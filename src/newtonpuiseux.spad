-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2019-2020,  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\begin{document}
\title{Newton-Puiseux Method}
\author{Ralf Hemmecke}
\date{08-Aug-2019}
\maketitle
\begin{abstract}
  \url{https://homepages.math.uic.edu/~jan/mcs563s14/puiseux.pdf}

  \url{http://jaypantone.com/courses/winter16math118/lecture-notes/lecture-notes-25.pdf}

  \url{https://www.risc.jku.at/education/courses/ss2016/caag/09-puiseux.pdf}
\end{abstract}

\tableofcontents

\section{Overview}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

OF==>OutputForm
dbgPrint(x,y) ==> print(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF))

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
SY ==> Symbol
POLYK ==> Polynomial K
KX ==> SparseUnivariatePolynomial K -- K[x]
KXY ==> SparseUnivariatePolynomial KX -- KX[y]
KPX ==> PolynomialRing(K, Q) -- Puiseux polynomials
KPXY ==> SparseUnivariatePolynomial KPX -- KPX[y]
SlopePoints K ==> Record(slope: K, points: List Point K)
PRENP(K) ==> PreNewtonPuiseux K

asN x ==> x pretend N
asP x ==> x pretend P
asZ x ==> x pretend Z

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{QPowers}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif
)abbrev domain QPOWER QPower
QPower(v: SY): Join(QuotientFieldCategory Z, OpenMath, Canonical) == Q add
    Rep ==> Q
    xx ==> rep x
    coerce(x: %): OutputForm ==
        o: OutputForm := v::OutputForm
        if not one? xx then o := o ^ (xx::OutputForm)
        return o

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{NewtonPolygon}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif
)abbrev package NEWTONP NewtonPolygon
++ Author: Ralf Hemmecke
++ Description:
++ Implement Newton polygon computation
NewtonPolygon(K: Join(Field, OrderedSet)): Exports == Implementation where
  Exports ==> with

    pointsOfNewtonPolygon: List Point K -> List Point K
      ++ pointsOfNewtonPolygon(points) returns the vertices of the
      ++ Newton polygon corresponding to points.
    slopePointsOfNewtonPolygon: List Point K -> List SlopePoints K
      ++ slopePointsOfNewtonPolygon(points) returns the slopes
      ++ of the Newton polygon corresponding to p together with the
      ++ points forming this slope.

  Implementation ==> add

    normalize(points: List Point K): List Point K ==
        -- Check whether all points are 2-dimensional
        for point in points repeat
            if dimension point ~= 2 then
                error "not all points live in a plane"

        -- points are ascendingly ordered first by x-coordinate
        -- then by y-coordinate.
        points := sort(_<, points)$List(Point K)
        -- Take only the points with different x part.
        p1: Point K := first points
        points := rest points
        pts: List Point K := [p1]
        for p2 in points repeat
            if p2.1 > p1.1 then
                p1 := p2
                pts := cons(p2, pts)
        reverse! pts

    pointsOfNewtonPolygon(points: List Point K): List Point K ==
        points := normalize points
        -- points.1 and points(#points) are certainly vertices of the
        -- Newton polygon. We start with points.1, add new points, but
        -- while adding new points, old points are removed from the
        -- Newton polygon, if they lie above the edge with a previous
        -- point of the current Newton polygon.
        p1: Point K := first points;  points := rest points
        p2: Point K := first points;  points := rest points
        npPoints: List Point K := [p2, p1] -- Newton polygon points
        slopes: List K := [(p2.2  - p1.2) / (p2.1 - p1.1)]
        for np in points repeat -- newpoint
            pt: Point K := first npPoints
            slope: K := (np.2 - pt.2) / (np.1 - pt.1)
            while not empty? slopes and slope <= first slopes repeat
                -- remove old points
                slopes := rest slopes
                npPoints := rest npPoints
                pt := first npPoints
                slope := (np.2 - pt.2) / (np.1 - pt.1)
            slopes := cons(slope, slopes)
            npPoints := cons(np, npPoints)
        reverse! npPoints

    slopePointsOfNewtonPolygon(points: List Point K): List SlopePoints K ==
        points := normalize points
        -- points.1 and points(#points) are certainly vertices of the
        -- Newton polygon. We start with points.1, add new points, but
        -- while adding new points, old points are removed from the
        -- Newton polygon, if they lie above the edge with a previous
        -- point of the current Newton polygon.
        p1: Point K := first points;  points := rest points
        p2: Point K := first points;  points := rest points
        slope: K := (p2.2  - p1.2) * (1 / (p2.1 - p1.1))
        slopePointList: List SlopePoints K := [[slope, [p1, p2]]]
        for np in points repeat -- newpoint
            slopePoints: SlopePoints K := first slopePointList
            sPoints: List Point K := slopePoints.points
            -- p1 := sPoints.1 -- startpoint of last slope
            pt := sPoints.2 -- endpoint of last slope
            slope: K := (np.2 - pt.2) / (np.1 - pt.1)
            if slope = slopePoints.slope then
                slopePoints.points := cons(sPoints.1, cons(np, rest sPoints))
            else
                while not empty? slopePointList and
                      slope < first(slopePointList).slope repeat
                    -- remove useless slopes (and points)
                    pt := first(first(slopePointList).points) --
                    slopePointList := rest slopePointList
                    slope := (np.2 - pt.2) / (np.1 - pt.1)
                slopePointList := cons([slope, [pt, np]], slopePointList)
        reverse! slopePointList


)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{PreNewtonPuiseux}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PreNewtonPuiseux holds data that is later used for the creation of the
Puiseux series that are zeros of the given (bivariate) polynomial.

)endif

)abbrev domain PRENP PreNewtonPuiseux
++ Author: Ralf Hemmecke
++ Description:
++ A container that holds all data necessary to create the respective
++ Puiseux series in case maxidx = #arr.
PreNewtonPuiseux(K): Exports == Implementation where
  K: Field
  PUIMON ==> Record(k: Q, c: K)
  PUIREC ==> Record(mons: List PUIMON, curpol: KPXY)
  Exports ==> CoercibleTo OutputForm with
    new: (N, List PUIMON, KPXY) -> %
    _#: % -> N
    maxIndex: % -> N
    elt: (%, N) -> PUIREC
    setelt!: (%, N, PUIREC) -> PUIREC
    extend!: (%, PUIREC) -> PUIREC
  Implementation ==> add
    Rep ==> Record(maxidx: N, arr: PrimitiveArray PUIREC)
    import from Rep
    coerce(x: %): OutputForm == rep(x)::OutputForm
    emptyPUIREC: PUIREC := [empty()$List(PUIMON), 0$KPXY]
    new(n: N, monoms: List PUIMON, p: KPXY): % ==
       a: PrimitiveArray PUIREC := new(n, emptyPUIREC)
       i: N := 0
       for mon in monoms repeat
           a.i := [[mon], p]$PUIREC
           i := i+1
       per [i, a]
    #(x: %): N == #(rep(x).arr)
    maxIndex(x: %):N == rep(x).maxidx
    elt(x: %, i: N): PUIREC == rep(x).arr.(asZ(i)-1)
    setelt!(x: %, i: N, pr: PUIREC): PUIREC ==
        a: PrimitiveArray PUIREC := rep(x).arr
        a.(asZ(i) - 1) := pr
    extend!(x: %, pr: PUIREC): PUIREC ==
        a: PrimitiveArray PUIREC := rep(x).arr
        i: N := rep(x).maxidx
        rep(x).maxidx := i+1
        a.i := pr

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{NewtonPuiseux}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev package NEWTPUIS NewtonPuiseux
++ Author: Ralf Hemmecke
++ Description:
++ Implements the computation of a Puiseux series satisfying a bivariate
++ polynomial.
NewtonPuiseux(K, var, cen): Exports == Implementation where
  K: Join(AlgebraicallyClosedField, PolynomialFactorizationExplicit)
  var: Symbol
  cen: K
  UPX ==> UnivariatePuiseuxSeries(K, var, cen)
  PUIMON ==> Record(k: Q, c: K)
  PUIREC ==> Record(mons: List PUIMON, curpol: KPXY)

  Exports ==> with
    leadingPuiseuxMonomials: (KPXY, Q) -> List PUIMON
    leadingPuiseuxMonomials: KPXY -> List PUIMON
      ++ leadingPuiseuxMonomials(p) returns for each slope of the
      ++ Newton polygon of p the leading monomial of the Puiseux
      ++ series Y satisfying p(x, Y(x)) = 0 in terms of the defining
      ++ polynomial for the leading coefficient, i.e., one monomial
      ++ might correspond to several coefficients according to the
      ++ degree of the defining polynomial.
    leadingPuiseuxMonomials: KXY -> List PUIMON
      ++ leadingPuiseuxMonomials(p) returns for each slope of the
      ++ Newton polygon of p the leading monomial of the Puiseux
      ++ series Y satisfying p(x, Y(x)) = 0 in terms of the defining
      ++ polynomial for the leading coefficient, i.e., one monomial
      ++ might correspond to several coefficients according to the
      ++ degree of the defining polynomial.
    leadingPuiseuxMonomials: (POLYK, Symbol, Symbol) -> List PUIMON
      ++ leadingPuiseuxMonomials(p, x, y) returns for each slope of
      ++ the Newton polygon of p the leading monomial of the Puiseux
      ++ series Y satisfying p(x, Y(x)) = 0 in terms of the defining
      ++ polynomial for the leading coefficient, i.e., one monomial
      ++ might correspond to several coefficients according to the
      ++ degree of the defining polynomial.

    polynomial2Points: (POLYK, Symbol,Symbol) -> List Point Q
    polynomial2Points: KXY -> List Point Q
    polynomial2Points: KPXY -> List Point Q

    poly2KPXY: (POLYK, Symbol, Symbol) -> KPXY
    nextY: (KPXY, PUIMON) -> KPXY
    nextPuiseuxMonomials: PRENP K -> PRENP K
    coefficientRelation: (KPXY, List Point Q) -> KX
      ++ coefficientRelation(p, points) returns the relation that the
      ++ coefficient must fulfil in order to be a coefficient of the
      ++ puiseux series.

    puiseuxSolutions: KPXY -> List UPX
     ++ puiseuxSolutions(p) returns degree(p) Puiseux series solutions
     ++ s such that p(s)=0.

  Implementation ==> add
    -- For hacking the fact that the implementation of AlgebraicNumber
    -- is actually not of category noZeroDivisors, we introduce the
    -- functions removeZeroCoefficients[X].
    removeZeroCoefficientsX(p: KPX): KPX ==
        zero? p => p
        m := leadingMonomial p
        z := removeZeroCoefficientsX reductum p
        c: K := leadingCoefficient m
        zero? c => z
        m + z

    removeZeroCoefficients(p: KPXY): KPXY ==
        zero? p => p
        m := leadingMonomial p
        z := removeZeroCoefficients reductum p
        c: KPX := leadingCoefficient m
        zero? removeZeroCoefficientsX c => z
        m + z

    coefficientRelation(p: KPXY, points: List Point Q): KX ==
        --assert(#point > 1)
        --assert(one? denom(pt.1) for all pt in points)
        coefficientPoly: KX := 0
        ymin: Z := numer(first(points).1)
        for point in rest points repeat ymin := min(ymin, numer point.1)
        for point in points repeat
            yex: Z := numer(point.1)
            cx: KPX := coefficient(p, asN(yex))
            c: K := coefficient(cx, point.2)
            if not zero? c then
                coefficientPoly := coefficientPoly + monomial(c, asN(yex-ymin))
        squareFreePart coefficientPoly

    toKPX(p: KX): KPX ==
        z: KPX := 0
        for m in reverse monomials p repeat -- from smallest to highest degree
            z := z + monomial(leadingCoefficient p, degree(p)::Q)
        return z

    toKPXY(p: KXY): KPXY ==
        z: KPXY := 0
        for m in reverse monomials p repeat -- from smallest to highest degree
            z := z + monomial(toKPX leadingCoefficient p, degree p)
        return z

    poly2KPXY(p: POLYK, x: Symbol, y: Symbol): KPXY ==
        -- sanity check
        sort variables p ~= sort [x, y] =>
            error "not a polynomial in the given variables"
        z: KPXY := 0
        for m in monomials p repeat
            mx: KPX := monomial(leadingCoefficient m, degree(m, x)::Q)$KPX
            z := z + monomial(mx, degree(m, y))$KPXY
        z

    -- We don't need exponents in the result that are smaller than e.
    biggerOrderThan?(e: Q): Q -> Boolean == (o: Q): Boolean +-> o > e
    leadingPuiseuxMonomialsOrder(p: KPXY, cond?: Q -> Boolean): List PUIMON ==
        import from NewtonPolygon(Q)
        points: List Point Q := polynomial2Points p
        slopePointList: List SlopePoints Q := slopePointsOfNewtonPolygon points
        mons: List PUIMON := empty()$List(PUIMON)
        for slopePoints in slopePointList | cond?(e:=-slopePoints.slope) repeat
            pnts := slopePoints.points
            cp: KX := coefficientRelation(p, pnts) -- assert(not zero? cp 0)
            roots: List K := rootsOf cp
            -- loop over the roots of the defining poly
            for c in roots repeat mons := cons([e, c]$PUIMON, mons)
        mons

    -- Here we assume that there is no branching anymore.
    --TODO: Code should be optimized, since we only need exponent > expo.
    leadingPuiseuxMonomial(p: KPXY, expo: Q): PUIMON ==
        import from NewtonPolygon(Q)
        dbgPrint("lm expo", expo)
        points: List Point Q := polynomial2Points p
        slopePointList: List SlopePoints Q := slopePointsOfNewtonPolygon points
        for slopePoints in slopePointList | (e:=-slopePoints.slope)>expo repeat
            pnts := slopePoints.points
            cp: KX := coefficientRelation(p, pnts) -- assert(not zero? cp 0)
            dbgPrint("lm e", e)
            return [e, rootOf cp]$PUIMON
        error "leadingPuiseuxMonomial: should never come here"
        --TODO: Can this "error" ever appear? Before we call this function,
        -- We check whether the last monomial is a root of the previous
        -- polynomial. the new p shouldn't have that monomial as root.

-- exported functions

    polynomial2Points(p: POLYK, x: Symbol, y: Symbol): List Point Q ==
        sort variables p ~= sort [x, y] =>
            error "not a polynomial in the given variables"
        [point [degree(m, y)::Q, degree(m, x)::Q] for m in monomials p]

    polynomial2Points(p: KXY): List Point Q ==
        points: List Point Q := empty()
        while not zero? p repeat
            ydeg := degree p
            cx: KX := leadingCoefficient p
            p := reductum p
            while not zero? cx repeat
                xdeg: Z := degree cx
                c: K := leadingCoefficient cx
                cx := reductum cx
                points := cons(point [ydeg::Q, xdeg::Q], points)
        return points

    polynomial2Points(p: KPXY): List Point Q ==
        points: List Point Q := empty()
        while not zero? p repeat
            ydeg := degree p
            cx: KPX := leadingCoefficient p
            p := reductum p
            while not zero? cx repeat
                xdeg: Q := degree cx
                c: K := leadingCoefficient cx
                cx := reductum cx
                points := cons(point [ydeg::Q, xdeg], points)
        return points

    leadingPuiseuxMonomials(p: KPXY, e: Q): List PUIMON ==
        leadingPuiseuxMonomialsOrder(p, biggerOrderThan? e)

    leadingPuiseuxMonomials(p: KPXY): List PUIMON ==
        leadingPuiseuxMonomialsOrder(p, (o: Q): Boolean +-> true)


    leadingPuiseuxMonomials(p: KXY): List PUIMON ==
        pp: KPXY := toKPXY p
        leadingPuiseuxMonomials(pp)

    leadingPuiseuxMonomials(p: POLYK, x: Symbol, y: Symbol): List PUIMON ==
        leadingPuiseuxMonomials poly2KPXY(p, x, y)

    nextPuiseuxMonomials(prenp: PRENP K): PRENP K ==
        maxidx: N := maxIndex prenp
        for i in 1..maxidx | (r := prenp.i; p := r.curpol; not zero? p) repeat
            puimons: List PUIMON := r.mons
            puimon := first puimons
            c: K := puimon.c
            e: Q := puimon.k

            -- First check whether a finite series is a solution.
            cxe: KPXY := monomial(monomial(c, e)$KPX, 0)$KPXY
            y := monomial(1, 1)$KPXY + cxe
            pnew := p y --substiture p(y+c*x^e) for the new polynomial
            -- Hack: If K is AlgebraicNumber then the new element c
            -- might have introduced zerodivisors.
            -- https://groups.google.com/forum/#!msg/fricas-devel/sowcAymy04s/xWBnEr1QCAAJ
            -- In order to avoid zero coefficients in polynomials from
            -- KPX, we explicitly remove such possible zero
            -- coefficients.
            pnew := removeZeroCoefficients pnew

            -- We only need monomials with bigger degree than e.
            monoms: List PUIMON := leadingPuiseuxMonomials(pnew, e)
            -- If it is empty we mark that we don't have to do anything
            -- in the next step, i.e., we set curpol:=0.

            -- Handle i-th record r=prenp.i
            if zero? p cxe then
                r.curpol := 0 -- modify in-place
              else
                empty? monoms => r.curpol := 0
                puimon: PUIMON := first monoms
                monoms := rest monoms
                r.mons := cons(puimon, puimons) -- update in-place
                r.curpol := pnew -- update in-place

            -- add new entries
            for puimon in monoms repeat
                extend!(prenp, [cons(puimon, puimons), pnew]$PUIREC)
        prenp

    puiseuxStream(p: KPXY, mon: PUIMON): Stream PUIMON == delay
        dbgPrint("pst mon", mon)
        zero? p =>
            dbgPrint("pstz", p)
            empty()
        -- First check whether a finite series is a solution.
        e: Q := mon.k
        cxe: KPXY := monomial(monomial(mon.c, e)$KPX, 0)$KPXY
        zero? p cxe =>
            dbgPrint("pst zeropcxe", cxe)
            empty()
        y := monomial(1, 1)$KPXY + cxe
        pnew := p y --substiture p(y+c*x^e) for the new polynomial
        pnew := removeZeroCoefficients pnew -- work over algebraic extension

        -- We only need monomials with bigger degree than e=monnew.k.
        monnew: PUIMON := leadingPuiseuxMonomial(pnew, e)
        cons(monnew, puiseuxStream(pnew, monnew))


    puiseux(puirec: PUIREC): UPX ==
        terms: List PUIMON := puirec.mons
        dbgPrint("pui terms", terms)
        --assert(not empty? terms)
        den: N := asN lcm [denom(m.k) for m in terms]
        dbgPrint("pui den", den)
        st: Stream PUIMON := puiseuxStream(puirec.curpol, first terms)
        for mon in terms repeat
            dbgPrint("pui mon", mon)
            st := cons(mon, st)
        upx := series(den, st)
        dbgPrint("pui", upx)
        upx

    puiseuxSolutions(p: KPXY): List UPX ==
        d := degree p
        puimons: List PUIMON := leadingPuiseuxMonomials p
        dbgPrint("ps puimons", puimons)
        m := new(d, puimons, p)$PRENP(K)
        -- repeat until the initial segments of all solutions can be
        -- distinguished.
        while d > maxIndex m repeat m := nextPuiseuxMonomials m
        dbgPrint("ps m", m)
        -- Now construct Puiseux series from the PreNewtonPuiseux data.
        l := [puiseux(m.i) for i in 1..d]$List(UPX)
        dbgPrint("ps l", l)
        l

)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
