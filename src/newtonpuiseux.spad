-------------------------------------------------------------------
---
--- FriCAS QFunctions
--- Copyright (C) 2019,  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:

-- 1. Redistributions of source code must retain the above copyright notice,
--    this list of conditions and the following disclaimer.
-- 2. Redistributions in binary form must reproduce the above copyright
--    notice, this list of conditions and the following disclaimer in the
--    documentation and/or other materials provided with the distribution.

-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\begin{document}
\title{Newton-Puiseux Method}
\author{Ralf Hemmecke}
\date{08-Aug-2019}
\maketitle
\begin{abstract}
  \url{https://homepages.math.uic.edu/~jan/mcs563s14/puiseux.pdf}
\end{abstract}

\tableofcontents

\section{Overview}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}

)endif

OF==>OutputForm
dbgPrint(x,y) ==> print(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF))

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
SY ==> Symbol
POLYK ==> Polynomial K
KX ==> SparseUnivariatePolynomial K -- K[x]
KXY ==> SparseUnivariatePolynomial KX -- KX[y]
KPX ==> PolynomialRing(K, Q) -- Puiseux polynomials
KPXY ==> SparseUnivariatePolynomial KPX -- KPX[y]
SlopePoints K ==> Record(slope: K, points: List Point K)

)abbrev package NEWTONP NewtonPolygon
++ Author: Ralf Hemmecke
++ Description:
++ Implement Newton polygon computation
NewtonPolygon(K: Join(Field, OrderedSet)): Exports == Implementation where
  Exports ==> with

    pointsOfNewtonPolygon: List Point K -> List Point K
      ++ pointsOfNewtonPolygon(points) returns the vertices of the
      ++ Newton polygon corresponding to points.
    slopePointsOfNewtonPolygon: List Point K -> List SlopePoints K
      ++ slopePointsOfNewtonPolygon(points) returns the slopes
      ++ of the Newton polygon corresponding to p together with the
      ++ points forming this slope.

  Implementation ==> add

    normalize(points: List Point K): List Point K ==
        -- Check whether all points are 2-dimensional
        for point in points repeat
            if dimension point ~= 2 then
                error "not all points live in a plane"

        -- points are ascendingly ordered first by x-coordinate
        -- then by y-coordinate.
        points := sort(_<, points)$List(Point K)
        -- Take only the points with different x part.
        p1: Point K := first points
        points := rest points
        pts: List Point K := [p1]
        for p2 in points repeat
            if p2.1 > p1.1 then
                p1 := p2
                pts := cons(p2, pts)
        reverse! pts

    pointsOfNewtonPolygon(points: List Point K): List Point K ==
        points := normalize points
        -- points.1 and points(#points) are certainly vertices of the
        -- Newton polygon. We start with points.1, add new points, but
        -- while adding new points, old points are removed from the
        -- Newton polygon, if they lie above the edge with a previous
        -- point of the current Newton polygon.
        p1: Point K := first points;  points := rest points
        p2: Point K := first points;  points := rest points
        npPoints: List Point K := [p2, p1] -- Newton polygon points
        slopes: List K := [(p2.2  - p1.2) / (p2.1 - p1.1)]
        for np in points repeat -- newpoint
            pt: Point K := first npPoints
            slope: K := (np.2 - pt.2) / (np.1 - pt.1)
            while not empty? slopes and slope <= first slopes repeat
                -- remove old points
                slopes := rest slopes
                npPoints := rest npPoints
                pt := first npPoints
                slope := (np.2 - pt.2) / (np.1 - pt.1)
            slopes := cons(slope, slopes)
            npPoints := cons(np, npPoints)
        reverse! npPoints

    slopePointsOfNewtonPolygon(points: List Point K): List SlopePoints K ==
        points := normalize points
        -- points.1 and points(#points) are certainly vertices of the
        -- Newton polygon. We start with points.1, add new points, but
        -- while adding new points, old points are removed from the
        -- Newton polygon, if they lie above the edge with a previous
        -- point of the current Newton polygon.
        p1: Point K := first points;  points := rest points
        p2: Point K := first points;  points := rest points
        slope: K := (p2.2  - p1.2) * (1 / (p2.1 - p1.1))
        slopePointList: List SlopePoints K := [[slope, [p1, p2]]]
        for np in points repeat -- newpoint
            slopePoints: SlopePoints K := first slopePointList
            sPoints: List Point K := slopePoints.points
            -- p1 := sPoints.1 -- startpoint of last slope
            pt := sPoints.2 -- endpoint of last slope
            slope: K := (np.2 - pt.2) / (np.1 - pt.1)
            if slope = slopePoints.slope then
                slopePoints.points := cons(sPoints.1, cons(np, rest sPoints))
            else
                while not empty? slopePointList and
                      slope < first(slopePointList).slope repeat
                    -- remove useless slopes (and points)
                    pt := first(first(slopePointList).points) --
                    slopePointList := rest slopePointList
                    slope := (np.2 - pt.2) / (np.1 - pt.1)
                slopePointList := cons([slope, [pt, np]], slopePointList)
        reverse! slopePointList

-------------------------------------------------------------------

)abbrev package NEWTPUIS NewtonPuiseux
++ Author: Ralf Hemmecke
++ Description:
++ Implements the computation of a Puiseux series satisfying a bivariate
++ polynomial.
NewtonPuiseux(K): Exports == Implementation where
  K: AlgebraicallyClosedField
  PUIMON ==> Record(defpoly: KX, expo: Q)

  Exports ==> with
    polynomial2Points: (POLYK, Symbol,Symbol) -> List Point Q
    polynomial2Points: KXY -> List Point Q
    polynomial2Points: KPXY -> List Point Q

    leadingPuiseuxMonomials: KPXY -> List PUIMON
      ++ leadingPuiseuxMonomials(p) returns for each slope of the
      ++ Newton polygon of p the leading monomial of the Puiseux
      ++ series Y satisfying p(x, Y(x)) = 0 in terms of the defining
      ++ polynomial for the leading coefficient.
    leadingPuiseuxMonomials: KXY -> List PUIMON
      ++ leadingPuiseuxMonomials(p) returns for each slope of the
      ++ Newton polygon of p the leading monomial of the Puiseux
      ++ series Y satisfying p(x, Y(x)) = 0 in terms of the defining
      ++ polynomial for the leading coefficient.
    leadingPuiseuxMonomials: (POLYK, Symbol, Symbol) -> List PUIMON
      ++ leadingPuiseuxMonomials(p, x, y) returns for each slope of the
      ++ Newton polygon of p the leading monomial of the Puiseux
      ++ series Y satisfying p(x, Y(x)) = 0 in terms of the defining
      ++ polynomial for the leading coefficient.

    leadingPuiseuxMonomials2: (KPXY, PUIMON) -> List PUIMON
    poly2KPXY: (POLYK, Symbol, Symbol) -> KPXY
    nextY: (KPXY, PUIMON) -> KPXY
    nextPuiseuxMonomials: (KPXY, Q) -> List PUIMON

  Implementation ==> add

    coefficientRelation(p: KPXY, points: List Point Q): KX ==
        --assert(#point > 1)
        --assert(one? denom(p.1) for all p in points)
        defPoly: KX := 0
        ymin: Z := numer(first(points).1)
        for point in rest points repeat ymin := min(ymin, numer point.1)
        for point in points repeat
            yex: Z := numer(point.1)
            cx: KPX := coefficient(p, qcoerce(yex)@N)
            c: K := coefficient(cx, point.2)
            defPoly := defPoly + monomial(c, qcoerce(yex - ymin)@N)
        primitivePart squareFreePart defPoly

    toKPX(p: KX): KPX ==
        z: KPX := 0
        for m in reverse monomials p repeat -- from smallest to highest degree
            z := z + monomial(leadingCoefficient p, degree(p)::Q)
        return z

    toKPXY(p: KXY): KPXY ==
        z: KPXY := 0
        for m in reverse monomials p repeat -- from smallest to highest degree
            z := z + monomial(toKPX leadingCoefficient p, degree p)
        return z

    poly2KPXY(p: POLYK, x: Symbol, y: Symbol): KPXY ==
        -- sanity check
        sort variables p ~= sort [x, y] =>
            error "not a polynomial in the given variables"
        z: KPXY := 0
        for m in monomials p repeat
            mx: KPX := monomial(leadingCoefficient m, degree(m, x)::Q)$KPX
            z := z + monomial(mx, degree(m, y))$KPXY
        z

-- exported functions

    polynomial2Points(p: POLYK, x: Symbol, y: Symbol): List Point Q ==
        sort variables p ~= sort [x, y] =>
            error "not a polynomial in the given variables"
        [point [degree(m, y)::Q, degree(m, x)::Q] for m in monomials p]

    polynomial2Points(p: KXY): List Point Q ==
        points: List Point Q := empty()
        while not zero? p repeat
            ydeg := degree p
            cx: KX := leadingCoefficient p
            p := reductum p
            while not zero? cx repeat
                xdeg: Z := degree cx
                c: K := leadingCoefficient cx
                cx := reductum cx
                points := cons(point [ydeg::Q, xdeg::Q], points)
        return points

    polynomial2Points(p: KPXY): List Point Q ==
        points: List Point Q := empty()
        while not zero? p repeat
            ydeg := degree p
            cx: KPX := leadingCoefficient p
            p := reductum p
            while not zero? cx repeat
                xdeg: Q := degree cx
                c: K := leadingCoefficient cx
                cx := reductum cx
                points := cons(point [ydeg::Q, xdeg], points)
        return points

    leadingPuiseuxMonomials(p: KPXY): List PUIMON ==
        import from NewtonPolygon(Q)
        points: List Point Q := polynomial2Points p
        slopePointList: List SlopePoints Q := slopePointsOfNewtonPolygon points
        result: List PUIMON := empty()
        for slopePoints in slopePointList repeat
            dp: KX := coefficientRelation(p, slopePoints.points)
            result := cons([dp, - slopePoints.slope], result)
        result

    leadingPuiseuxMonomials(p: KXY): List PUIMON ==
        pp: KPXY := toKPXY p
        leadingPuiseuxMonomials(pp)

    leadingPuiseuxMonomials(p: POLYK, x: Symbol, y: Symbol): List PUIMON ==
        leadingPuiseuxMonomials poly2KPXY(p, x, y)

    nextY(y: KPXY, m: PUIMON): KPXY ==
        c: K := rootOf(m.defpoly)
        monomial(monomial(c, m.expo)$KPX, 0) + y

    nextPuiseuxMonomials(p: KPXY, ex: Q): List PUIMON ==
        lpm: List PUIMON := leadingPuiseuxMonomials p
        [pm for pm in lpm | pm.expo > ex]



)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
