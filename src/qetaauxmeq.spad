-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Eta Quotients}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
We compute a monoid basis for the set of $\eta$-quotients that are
modular functions and have a (multiple) pole, if any, at infinity
only.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Indroduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let $N$ be a positive natural number and define a $\Gamma_0(N)$ as a
subgroup of the special linear group $SL_2(\setZ)$ as follows.
\begin{gather*}
\Gamma_0(N) := \SetDef{  \begin{pmatrix}
    a & b\\
    c & d
  \end{pmatrix} \in SL_2(\setZ)}{N|c}
\end{gather*}
As in \cite{Radu:RamanujanKolberg:2015}, let $K(N)$ denote the set of
modular functions for $\Gamma_0(N)$ and $K^\infty(N)$ the set of
modular functions have a (multiple) pole, if any, at infinity only.
Furthermore, let $E(N)$ be the set of $\eta$-quotients that are
modular functions, and let $E^\infty(N) := E(N)\cap K^\infty(N)$.

This file contains code to compute a (finite) monoid basis for
$E^\infty(N)$ in two variants.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Representing square roots by roots of unity}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
According to \cite[Section~IV.3]{Lang:AlgebraicNumberTheory:1986} we
have
\begin{gather*}
  \sum_{k=0}^{m-1} \unityPower{\frac{k^2}{m}}
  =
  \begin{cases}
    (1+i)\sqrt{m} & \text{if $m \equiv 0 \pmod{4}$},\\
    \sqrt{m}      & \text{if $m \equiv 1 \pmod{4}$},\\
    0             & \text{if $m \equiv 2 \pmod{4}$},\\
    i\sqrt{m}     & \text{if $m \equiv 3 \pmod{4}$},
  \end{cases}
\end{gather*}
where $\unityPower{x} := \exp(2\pi i x)$.
%
Note that
$2=\left(\unityPower{\frac{1}{8}}+\unityPower{-\frac{1}{8}}\right)^2$.

If $m\equiv 2 \pmod{4}$, then $m=2m'$ with $m'\not\equiv 2 \pmod{4}$.
Then, we can compute $\sqrt{m}$ by computing $\sqrt{m'}$ and
multiplying by
$\sqrt{2}$.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

First of all for debugging.
)endif
OF==>OutputForm
display77(x) ==> display((x::OF)::LinearOutputFormat, 77)
vPrint(x,y) ==> display77(hconcat(["-- "::Symbol::OF, x::Symbol::OF, ":="::Symbol::OF, y::OF]$List(OF)))

)if LiterateDoc
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
MZ ==> Matrix Z -- will be a square matrix
SL2Z ==> MZ -- represents SL_2(Z)
Z24 ==> IntegerMod 24
EXGCD ==> Record(coef1: Z, coef2: Z, generator: Z)
Rec ==> Record(red: SL2Z, triang: MZ)
Pol ==> SparseUnivariatePolynomial Z

INTF ==> IntegerNumberTheoryFunctions

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Auxiliary package to check modularity of $\eta$ quotients}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Here we mainly deal with the sets $R^*(N)$ and $R^\infty(N)$ from
\cite{Hemmecke+Radu:EtaRelations:2018}.

The function \code{matrixLigozat} computes the respective matrix $A_N$
whereas \code{rStarConditions} checks which of the conditions for an
$r$ vector to correspond to a modular $\eta$-quotient is violated.

width of a cusp \cite[Lemma~2.37]{Radu:PhD:2010} and
\cite[Definition~2.9]{Radu:PhD:2010}


)endif

-- Maybe this should become a domain CongruenceSubgroupGamma0(m).
)abbrev package QAUXMEQ QAuxiliaryModularEtaQuotientPackage
++ QAuxiliaryModularEtaQuotientPackage helps to do computations with
++ eta quotients that are modular functions.
QAuxiliaryModularEtaQuotientPackage: with
    aLigozat: (P, Z, Z) -> Z
      ++ aLigozat(m, c, delta) computes an entry of the matrix of
      ++ Ligozat corresponding to the index (c, delta) counted in
      ++ divisors.
    matrixLigozat: P -> MZ
      ++ matrixLigozat(m) returns the (n,n) matrix with entries a_m(di,dj)
      ++ given by Notation 3.2.6 in \cite{Ligozat:CourbesModulaires:1975}
      ++ where di and dj run over all positive divisors of m.
      ++ This matrix is A_N as described after Theorem 5.2 in
      ++ \cite{Hemmecke+Radu:EtaRelations:2018}.
    matrixAtkinLehner: (P, P) -> MZ
      ++ matrixAtkinLehner(m, t) with t a Hall divisor
      ++ (https://en.wikipedia.org/wiki/Hall_subgroup) of m returns
      ++ the 2x2 matrix with entries [[t, -a], [m, t*b]] such that
      ++ n=m/t and t*b + n*a = 1, see
      ++ \cite{Kohnen:WeierstrassPointsAtInfinity:2004}.
    rStarConditions: (P, List Z) -> Z
      ++ rStarConditions returns 0 if all conditions are fulfilled.
      ++ Otherwise it returns a positive number in the range 1 to 4 that
      ++ corresponds to the condition that is not met.
    rStarConditionMatrix: P -> MZ
      ++ rStarConditionMatrix(nn) returns a matrix mat such that if
      ++ n=#divisors(nn) and v is such that mat*v=0 then v(1..n) is in
      ++ R^*(nn), in other words, the nullspace of mat "generates"
      ++ R^*(nn).
      -- It computes matrix B_N (equation (8) in
      -- \cite{Hemmecke+Radu:EtaRelations:2018}
      -- (DOI:10.1016/j.jsc.2018.10.001).
    rStarNonNegativeMatrix: (P, List Z) -> MZ
      ++ rStarNonNegativeMatrix(nn, idivs) returns a matrix mat which
      ++ is a vertical concatenation of rStarConditionMatrix(nn) and
      ++ (a part of) matrixLigozat(nn) whose rowindices correspond to
      ++ idivs.
      ++ It computes matrix B_N equation (8) in
      ++ \cite{Hemmecke+Radu:EtaRelations:2018}
      ++ (DOI:10.1016/j.jsc.2018.10.001) joined with the respective rows
      ++ of matrix A_N from the same article.
    upsilonExponent: (Z, Z, Z, Z) -> Z24
      ++ upsilonExponent(a,b,c,d) returns z \in {0..23} such that
      ++ exp(\pi*i*z/12) is a multiplier in the transformation of an
      ++ eta function by the matrix [[a,b],[c,d]] from SL_2(Z).
      ++ A definition can be found in \cite[Lemma~2.27]{Radu:PhD:2010}.
    upsilonExponent: MZ -> Z24
      ++ upsilonExponent(m) for a matrix m from SL_2(Z) returns
      ++ upsilonExponent(m(1,1), m(1,2), m(2,1), m(2,2)).
    width: (P, Z) -> Z
      ++ width(m, c) returns the width of the cusp a/c for Gamma_0(m)
      ++ and some a. The width is independent of a and given by
      ++ m/gcd(c^2,m).
      ++ \cite[Lemma~2.37]{Radu:PhD:2010}
    numberOfGaps: (P, List P) -> N
      ++ numberOfGaps(n, l) computes
      ++ reduce(+, [floor(x/n) for x in l], 0).
    dedekindPsi:P -> P
      ++ dedekindPsi(n) computes the value of the Dedekind psi function.
      ++ https://en.wikipedia.org/wiki/Dedekind_psi_function
    indexOfGamma0: P -> P
        ++ indexOfGamma0(n) computes the index of Gamma_0(n) in SL2Z.
        ++ indexOfGamma0(n) is equal to dedekindPsi(n).
    cusps2OfGamma0: P -> List Q
      ++ According to
      ++ \cite[Lemma~5.3]{Radu:AlgebraicRelationsInvolvingEtaQuotients:2016},
      ++ there are $\eulerphi(\gcd(N/c, c))$ different cusps $\frac{a}{c}$ of
      ++ $\Gamma_0(N)$ that correspond to a divisor $c$ of $N$.
      ++ cusps(m) returns all the cusps for Gamma_0(m)$
    cuspsOfGamma0: P -> List Q
      ++ According to
      ++ \cite[Lemma~2.45]{Radu:PhD:2010},
      ++ there are $\eulerphi(\gcd(N/c, c))$ different cusps $\frac{a}{c}$ of
      ++ $\Gamma_0(N)$ that correspond to a divisor $c$ of $N$.
      ++ cusps(m) returns all the cusps for Gamma_0(m) sorted first by
      ++ denominator and then (among the cusps with the same denominator)
      ++ by the numerator of the cusp.
    numberOfCuspsOfGamma0: P -> P
      ++ numberOfCuspsOfGamma0(m) returns the number of cusps of level m.
    genusOfGamma0: P -> N
      ++ genusOfGamma0(level) returns the genus of the congruence subgroup
      ++ Gamma_0.`It corresponds to the series <https://oeis.org/A001617> .
    splitMatrix: (SL2Z, Z, P, N) -> Rec
      ++ splitMatrix(mat, delta, m, lambda) computes
      ++ splitMatrix(a, b, c, d) where the arguments are the matrix
      ++ entries of matrix [[delta, delta*lambda], [0, m]]*mat.
      ++ Input condition: determinant(mat)>0.
    splitMatrix: (SL2Z, Z) -> Rec
      ++ splitMatrix(mat, delta) computes splitMatrix(mat, delta, 1, 0).
      ++ Input condition: determinant(mat)>0.
    splitMatrix: (Z, Z, Z, Z) -> Rec
      ++ splitMatrix(a, b, c, d) returns a record rec that contains
      ++ two matrices rec.red=m1 and rec.triang=m2 such that mat=m1*m2
      ++ according to \cide[Lemma~4.8]{Radu:PhD:2010}, but in a variation
      ++ as described in qetafun.spad, i.e., such that 0<=m2(1,2)<det(mat)/g
      ++ where g = gcd(a, c) and mat=[[a,b],[c,d]].
      ++ Input condition: a*d-b*c>0.
    cuspToMatrix: (P, Q) -> SL2Z
      ++ cuspToMatrix(m, a/c) returns a matrix gamma=[[a,b],[c,d]] such
      ++ that splitMatrix(gamma, m) returns two matrices [m1, m2] with
      ++ m1*m2 = [[m*a, c], m*b, d]] and m1 being in SL_2(Z) and m2 being
      ++ a triangular matrix with 0 <= m2(1,2) < m/c.
    rightCosetRepresentatives: (P, P) -> List SL2Z
      ++ rightCosetRepresentatives(nn, mm) returns a list of right
      ++ coset representatives of
      ++ $\Gamma_0(mm*nn) \backslash \Gamma_0(mm)$.
    doubleCosetRepresentatives: P -> List SL2Z
      ++ doubleCosetRepresentatives(nn) returns a list of double
      ++ coset representatives of
      ++ $\Gamma_0(nn) \backslash \Gamma_0(1) / SL_2(\setZ)_\infty$
      ++ where $SL_2(\setZ)_\infty are matrices of the form [[1,h],[0,1]]
      ++ with h being an integer.
    rationalSquareRoot: Q -> Record(rat: Q, rootOf: P)
      ++ if z = rationalSquareRoot(x) then x = (z.rat)^2 * z.root
    minimalSquareRootOfUnity: P -> P
      ++ minimalSquareRootOfUnity(p) returns an integer n such that
      ++ in Z(x) (where x is a primitive n-th root of unity) there
      ++ exists an element y such that y^2=p.
      ++ p must be a radical integer, i.e., should not contain the
      ++ square of a prime.
    primePower: (P, P) -> N
      ++ primePower(d, p) returns e such that gcd(d/p^e, p)=1, i.e., the
      ++ highest power e such that p^e is a factor of d.

-------------------------------------------------------------------
-- Temporarily exported
-------------------------------------------------------------------
    jacobiUpperStar: (Z, Z) -> Z
    jacobiLowerStar: (Z, Z) -> Z
    coprimePart: (Z, Z) -> Z
    nu2: P -> Z
      ++ \cite[p.~25]{Shimura:ArithmeticTheory:1994}
    nu3: P -> Z
      ++ \cite[p.~25]{Shimura:ArithmeticTheory:1994}

  == add
    fUnion ==> Union("nil", "sqfr", "irred", "prime")
    FL ==> List Record(flag: fUnion, factor: Z, exponent: N)

    -- Auxiliary functions
    coprimePart(n: Z, c: Z): Z ==
       -- coPrimePart(n, c) splits n into u*v such that gcd(u,c)=1
       -- and returns u.
       -- We assume that all input numbers are positive.
       u := n
       while (g := gcd(u, c)) > 1 repeat u := (u exquo g)::Z
       u

    -- Compute B_N and V_N as in \cite{Hemmecke+Radu:EtaRelations:2018}.
    -- aLigozat(m, di, dj) here corresponds to a_m(di, dj) in
    -- \cite[Notation 3.2.6]{Ligozat:CourbesModulaires:1975}.
    -- Note that we can use any integer c here, including c=0.
    aLigozat(m: P, c: Z, delta: Z): Z == -- di==c, dj==delta
        num: Z := m * gcd(c, delta)^2
        den: Z := gcd(c^2, m) * delta
        (num exquo den)::Z -- can prove that this cannot fail

    matrixLigozat(m: P): MZ ==
        divs: List Z := divisors(m)$INTF
        n: N := # divs
        mat: MZ := new(n, n, 0)
        for i in 1..n for di in divs repeat
            for j in 1..n for dj in divs repeat
                qsetelt!(mat, i, j, aLigozat(m, di, dj))
        mat

    matrixAtkinLehner(m: P, t: P): MZ ==
        -- t is a Hall divisor of m.
        -- https://en.wikipedia.org/wiki/Hall_subgroup
        --assert((m exquo t) case Z)
        n: Z := (m exquo t)::Z -- input condition is that t divides m
        --assert(one? gcd(n, t))
        exgcd: EXGCD := extendedEuclidean(n, t)
        matrix [[t, -exgcd.coef1], [m, t*exgcd.coef2]]

    -- These are the conditions (1) to (4) of
    -- \cite{Hemmecke+Radu:EtaRelations:2018} that have to be fulfilled
    -- by a vector r to lie in R^*(N).
    rStarConditions(m: P, r: List Z): Z ==
        divs: List Z := divisors(m)$INTF
        rdivs: List Z := reverse divs
        s: Z := 0
        a: Z := 0
        b: Z := 0
        c: Factored Z := 1
        for ri in r for d in divs for rd in rdivs repeat
            s := s + ri
            a := a + ri * d  -- sigma_\infty
            b := b + ri * rd -- sigma_0
            c := c * factor(d)^(qcoerce(abs(ri))@N)
        -- Check conditions 1, 2, 3, 4.
        not zero? s => 1
        not zero? positiveRemainder(a, 24) => 2
        not zero? positiveRemainder(b, 24) => 3
        for fe in factors c repeat if odd?(fe.exponent) then return 4
        return 0

    rStarConditionMatrix(m: P): MZ ==
        divs: List Z := divisors(m)$INTF
        n: N := # divs
        d: Vector Z := vector divs
        fl: List Record(factor: Z, exponent: N) := factors factor m
        cols: P := qcoerce(n + 2 + #fl)@P
        rows: P := qcoerce(3 + #fl)@P
        mat: MZ := new(rows, cols, 0)
        -- sum(r(d.i), i=1..n)=0
        for j in 1..n repeat qsetelt!(mat, 1, j, 1)
        -- sum(d.i * r(d.i), i=1..n+1) = 0 (mod 24)
        for j in 1..n repeat qsetelt!(mat, 2, j, d.j)
        qsetelt!(mat, 2, n+1, 24) -- additional variable for (mod 24)
        -- sum(d.(n+2-i) * r(d.i), i=1..n+1) = 0 (mod 24)
        for j in 1..n repeat qsetelt!(mat, 3, j, d(n+1-j))
        qsetelt!(mat, 3, n+2, 24) -- additional variable for (mod 24)
        -- product is rational square
        for i in 1..#fl for fe in fl repeat
            k := n+2+i
            p: P := qcoerce(fe.factor)@P
            for j in 2..n repeat -- for all divisors > 1
                qsetelt!(mat, i+3, j, primePower(qcoerce(d.j)@P, p))
            qsetelt!(mat, i+3, k, 2) -- additional variable for (mod 2)
        --vPrint("rstarConditionMatrix", mat)
        return mat

    rStarNonNegativeMatrix(m: P, idivs: List Z): MZ ==
        matRStar: MZ := rStarConditionMatrix m
        empty? idivs => return matRStar
        matLigozat: MZ := matrixLigozat m -- is a square matrix
        l: N := ncols matLigozat
        n: N := # idivs
        rows: N := nrows matRStar
        cols: N := ncols matRStar
        mat: MZ := new(rows + n, cols, 0)
        for i in 1..rows repeat for j in 1..cols repeat
            qsetelt!(mat, i, j, qelt(matRStar, i, j))
        for i in idivs for k in rows+1.. repeat for j in 1..l repeat
            qsetelt!(mat, k, j, qelt(matLigozat, i, j))
        return mat

    jacobiLowerStar(c: Z, d: Z): Z == -- result either 1 or -1
        --assert(one? gcd(c,d))
        --aaawer(odd? d)
        -- See \cite[Def.~2.26]{Radu:PhD:2010}.
        -- \left(\frac{c}{d}\right)_* =
        -- \begin{cases}
        -- \left(\frac{c}{\lvert d \rvert}\right) (-1)^{m_c m_d},
        --   & \text{if $c\ne0$},\\
        -- \sign{d}, & \text{otherwise}
        -- \end{cases}
        -- where $m x=\frac{\sign{x}-1}{2}$.
        zero? c => sign(d) -- note that d ~= 0 in this case
        j: Z := jacobi(c, abs(d))$INTF
        if c>0 or d>0 then j else -j -- c=0 or d=0 does not happen

    jacobiUpperStar(c: Z, d: Z): Z == -- result either 1 or -1
        --assert(one? gcd(c,d))
        --aaawer(odd? d)
        -- See \cite[Def.~2.26]{Radu:PhD:2010}.
        -- \left(\frac{c}{d}\right)^* =
        -- \begin{cases}
        -- \left(\frac{c}{\lvert d \rvert}\right), & \text{if $c\ne0$},\\
        -- 1, & \text{otherwise}
        -- \end{cases}
        zero? c => 1
        jacobi(c, abs(d))$INTF

    upsilonExponent(a: Z, b: Z, c: Z, d: Z): Z24 ==
        u: Z := c*(a+d)-b*d*(c^2-1)-3*c
        v: Z := 3*(d-1)*(c-1)
        r(x) ==> x :: Z24
        -- Note that we exp(2*\pi*i*n/24)=exp(\pi*i)=-1 for n=12.
        odd? c => if jacobiUpperStar(d, c) > 0 then r(u) else r(u+12)
        if jacobiLowerStar(c, d) > 0 then r(u-v) else r(u-v+12)

    upsilonExponent(mat: MZ): Z24 ==
        upsilonExponent(mat(1,1), mat(1,2), mat(2,1), mat(2,2))

    width(m: P, c: Z): Z == (m exquo gcd(c^2, m)) :: Z

    numberOfGaps(n: P, list: List P): N ==
        qcoerce(reduce(_+, [floor(x /$Q n) for x in list]$List(Z), 0))@N

    -- Split matrix as in Lemma~\ref{thm:matrix-splitting} with
    -- z = delta*lambda.
    splitMatrix(mat: SL2Z, delta: Z, m: P, lambda: N): Rec ==
        z: Z := delta*lambda
        w11: Z := delta*mat(1,1) + mat(2,1)*z
        w12: Z := delta*mat(1,2) + mat(2,2)*z
        w21: Z := mat(2,1)*m
        w22: Z := mat(2,2)*m
        splitMatrix(w11, w12, w21, w22)

    -- Split matrix as in Lemma~\ref{thm:matrix-splitting} with
    -- z = 0 and m = 1.
    splitMatrix(mat: SL2Z, delta: Z): Rec ==
        splitMatrix(mat(1,1) * delta, mat(1,2) * delta, mat(2,1), mat(2,2))
        -- Same as splitMatrix(mat, delta, 1, 0).

    -- Split matrix according to Section~\ref{sec:eta-transformation} in
    -- qetafun.spad.
    splitMatrix(a: Z, b: Z, c: Z, d: Z): Rec ==
        LLZ ==> List List Z
        exgcd: EXGCD := extendedEuclidean(a, c)
        g: Z := exgcd.generator
        d0: Z :=  exgcd.coef1 -- initial value for d1
        b0: Z := -exgcd.coef2 -- initial value for b1
        a1: Z := (a exquo g) :: Z
        c1: Z := (c exquo g) :: Z
        a2: Z := g
        d2: Z := a1*d-b*c1
        -- Now try to find s such that 0 <= b*d1 - d*b1 - s*d2 < d2.
        b2init: Z := b*d0 - d*b0
        b2: Z := positiveRemainder(b2init, d2)
        s: Z := ((b2init - b2) exquo d2) :: Z
        b1: Z := b0 + s * a1
        d1: Z := d0 + s * c1
        m1: MZ := matrix([[a1, b1], [c1, d1]]$LLZ)
        m2: MZ := matrix([[g, b2], [0, d2]]$LLZ)
        [m1, m2]$Rec

    cuspToMatrix(m: P, cusp: Q): MZ ==
        a: Z := numer cusp
        c: Z := denom cusp
        exgcd: EXGCD := extendedEuclidean(a, c)
        g: Z := exgcd.generator
        dprime: Z :=  exgcd.coef1
        -- bprime: Z := -exgcd.coef2 -- ((not needed ))
        mc: Z := (m exquo c) :: Z
        u: Z := coprimePart(mc, c)
        -- v: Z := (mc exquo u) :: Z -- ((not meeded here))
        t: Z := mulmod(dprime, invmod(u, c), c)
        d: Z := t*u
        -- s: Z := ((t*u - dprime) exquo c) :: Z
        b := ((a*d -1) exquo c) :: Z -- instead of s we use that det=1
        matrix [[a, b], [c, d]]


    indexOfGamma0(m: P): P == dedekindPsi(m)
    dedekindPsi(m: P): P ==
        r: Q := 1
        for f in factorList factor m repeat
            r := r * (1 + 1/(f.factor))
        qcoerce(numer(m*r))@P

)if LiterateDoc

We use \cite[Lemma~2.45]{Radu:PhD:2010} to compute the cusps of
$\Gamma_0(N)$ as the set of all $\frac{a}{c}$ such that $c|N$ and
$a\in X_c$.

)endif
    smallerCusp(x: Q, y: Q): Boolean ==
      denom x < denom y => true
      denom x > denom y => false
      numer x < numer y

    cuspsOfGamma0(level: P): List Q ==
        -- We use \cite[Lemma~2.45]{Radu:PhD:2010} with \delta replaced by
        -- c and N replaced by level.
        divs: List Z := divisors(level)$INTF
        result: List Q := empty()
        for c in divs repeat
            -- Let's compute the list corresponding to $X_c$.
            g: Z := gcd(c, (level exquo c)::Z)
            for x in 1..g | one? gcd(x, g) repeat
                a: Z := x
                while not one? gcd(a, c) repeat a := a + g;
                -- The variable a corresponds to an element of X_\delta
                -- from \cite[Lemma~2.45]{Radu:PhD:2010}.
--                exgcd: EXGCD := extendedEuclidean(a, c)
--                d: Z := exgcd.coef1
--                b: Z := -exgcd.coef2

                result := cons(a/c, result)
        sort!(smallerCusp, result)


    cusps2OfGamma0(level: P): List Q ==
        -- We use
        -- \cite[Lemma~5.3]{Radu:AlgebraicRelationsInvolvingEtaQuotients:2016}
        divs: List Z := divisors(level)$INTF
        result: List Q := empty()
        for c in divs repeat
            g: Z := gcd(c, (level exquo c)::Z)
            candidates: List Z := [a for a in 1..c | one? gcd(a, c)]
            for y in 1..g | one? gcd(y, g) repeat
                a: Z := -1 -- not yet assigned
                for t in candidates | zero? positiveRemainder(t-y, g) repeat
                    a := t
                    break
                if a<0 then error "cusps: no candidates"
                -- now compute other two matrix entries (b and d)
--                exgcd: EXGCD := extendedEuclidean(a, c)
--                d: Z := exgcd.coef1
--                b: Z := -exgcd.coef2
--                m: MZ := matrix [[a, b], [c, d]]
                result := cons(a/c, result)
        sort!(smallerCusp, result)

    numberOfCuspsOfGamma0(level: P): P ==
        --assert(one/ first divisors level)
        n: Z := 1  -- eulerPhi(gcd(1, level))
        for c in rest divisors(level)$INTF repeat
            n := n + eulerPhi(gcd(c, (level exquo c)::Z))
        qcoerce(n)@P

    -- Two helper function mu2 and mu3
    nu2(m: P): Z ==
        s: Z := 1
        for f in factorList factor m repeat
            p := f.factor
            even? p =>
                f.exponent >= 2 => return 0 -- 4|m
            r := positiveRemainder(p, 4)
            r = 3 => return 0
            if one? r then s := 2*s
        return s

    nu3(m: P): Z ==
        s: Z := 1
        for f in factorList factor m repeat
            p := f.factor
            p = 3 =>
                f.exponent >= 2 => return 0 -- 9|m
            r := positiveRemainder(p, 3)
            r = 2 => return 0
            if r=1 then s := 2*s
        return s

    genusOfGamma0(m: P): N ==
        -- general formula is
        -- g = 1 + mu/12 - nu2/4 - nu3/3 - nuinfinity/2
        -- where mu is the index of Gamma0(m) in SL2Z
        -- nu2 and nu3 are the number of solutions in Z/mZ of
        -- x^2+1=0 and x^2+x+1=0 and nuinfinity is the number of cusps
        -- of Gamma0(m).
        q: Q := indexOfGamma0(m)/12 - nu2(m)/4 - nu3(m)/3
                - numberOfCuspsOfGamma0(m)/2
        not one? denom q => error "genusOfGamma0: non-vanishing denominator"
        qcoerce(1 + numer(q))@N

    squarePart(fl: FL): Z ==
        -- if fl = factorList factor x and z=squarePart(fl) then
        -- z^2*r=expand(fl) for some squarefree r.
        z: Z := 1
        for x in fl repeat
            e: P := qcoerce(shift(x.exponent, -1))@P
            z := (x.factor)^e * z
        return z

    rationalSquareRoot(x: Q): Record(rat: Q, rootOf: P) ==
        import from FL
        fden: Factored Z := factor denom x
        fnum: Factored Z := factor numer x
        fl: FL := factorList fden
        for x in fl | odd?(x.exponent) repeat
            fnum := x.factor * fnum
            fden := x.factor * fden
        fl := factorList fnum
        r: Z := 1
        for x in fl | odd? (x.exponent) repeat r := x.factor * r
        return [squarePart(fl)/squarePart(factorList fden), qcoerce(r)@P]

    square(x: Record(root: P, elem: Pol)): Vector Z ==
        pol: Pol := cyclotomic(x.root)$CyclotomicPolynomialPackage
        C ==> SimpleAlgebraicExtension(Z, Pol, pol)
        z: C := convert(x.elem)@C
--        dbgPrint("elem", z)
--        dbgPrint("square", z*z)
        convert(z*z)@Vector(Z)

    minimalSquareRootOfUnity(x: P): P ==
        -- x is a radical integer (squarefree)
        -- See \cite[Section~IV.3]{Lang:AlgebraicNumberTheory:1986}.
        x = 2 => 8
        positiveRemainder(x, 4)=1 => x
        4*x

    primePower(d: P, p: P): N ==
        e: N := 0;
        x: Z := d
        while not one? gcd(x, p) repeat (x := (x exquo p)::Z; e:=e+1)
        return e

-------------------------------------------------------------------
-- auxiliary function
-------------------------------------------------------------------

    -- This function corresponds to $\rho_{m,n}(\lambda)$ in
    -- \cite[Definition~2.42]{Radu:PhD:2010}.
    -- The loop terminates because of \cite[Lemma~2.41]{Radu:PhD:2010}.
    rho(lambda: Z, m: Z, n: Z): Z ==
        --assert(lambda>=0)
        --assert(m*n>0)
        --assert(one? gcd [lambda, m, n])
        r := lambda
        while not one? gcd(r, n) repeat r := r + m
        return r

    -- This function corresponds to S_{N,\delta} in
    -- \cite[Definition~2.44]{Radu:PhD:2010}.
    lambdas(delta: Z, nn: Z): List Z ==
        --assert(delta*nn>0)
        --assert((nn exquo delta) case Z)
        m: Z := (nn exquo delta)::Z
        g: Z := gcd(m, delta)
        [rho(lambda, m, delta) for lambda in 0..m-1 | one? gcd(g, lambda)]

    -- This function corresponds to just one matrix from R_{N,\delta}
    -- for a concrete \lambda.
    cosetRep(lambda: Z, delta: Z, qm: Z): SL2Z ==
        --assert(lambda>=0)
        --assert(delta*qm>0)
        --assert(one? gcd(delta, qm))
        c := lambda * qm
        REC ==> Record(coef1: Z, coef2: Z, generator: Z)
        rec: REC := extendedEuclidean(delta, lambda*qm)
        return matrix [[rec.coef1, -rec.coef2], [c, delta]]

    -- This function corresponds to R_{N,\delta} in
    -- \cite[Lemma~2.44]{Radu:PhD:2010}.
    rightCosetReps(delta: Z, nn: Z, mm: Z): List SL2Z ==
        --assert(delta * mm * nn > 0)
        [cosetRep(lambda, delta, mm) for lambda in lambdas(delta, nn)]

-------------------------------------------------------------------
-- exported function
-------------------------------------------------------------------
    rightCosetRepresentatives(nn: P, mm: P): List SL2Z ==
        concat [rightCosetReps(delta, nn, mm) for delta in divisors(nn)$INTF]

    doubleCosetRepresentatives(nn: P): List SL2Z ==
        [cuspToMatrix(nn, cusp) for cusp in cuspsOfGamma0(nn)]



)abbrev package QAUXMOD QAuxiliaryModularPackage
QAuxiliaryModularPackage(L): Exports == Implementation where
  L: UnivariateLaurentSeriesCategory Z
  ZX ==> Polynomial Z
  VZ ==> Vector Z
  term x ==> monomial(1, degree x)$ZX
  lc x ==> leadingCoefficient x
  Exports ==> with
    annihilateLeadingCoefficients: (P, ZX -> L) -> ZX -> ZX
      ++ annihilateLeadingCoefficients(p, ev)(pol) adds a p-multiple
      ++ to any monomial of pol and returns a polynomial z such that
      ++ the evaluation order ev(z) >= order ev(pol) and the order
      ++ of ev(z) is as big as it can be made by varying each of the
      ++ monomials, i.e. we expect
      ++ order(ev z) = order(ev pol) + #monomials(pol) - 1.
      ++ The polynomial pol is assumed to be nonzero.
  Implementation ==> add
    annihilateLeadingCoefficients(p: P, ev: ZX -> L): ZX -> ZX ==
      (pol: ZX): ZX +->
        --assert(not zero? pol)
        mons: List ZX := monomials pol
        vPrint("mons", [term(x) for x in mons])
        ll: L := ev pol
        ls: List L := [ev term x for x in mons]
        ords: List Z := [order l for l in ls]
        o: Z := min ords
        nmons: N := # mons      -- number of variables
        for neqs in nmons..1 by -1 repeat
            vPrint("neqs", neqs)
            mat: MZ := new(neqs, nmons, 0)
            vPrint("nmons, neqs, o", concat([nmons, neqs, o], ords))
            v: VZ := new(neqs, 0)
            for i in 1..neqs repeat -- number of equations
                v. i := - coefficient(ll, o+i-1)
                for j in 1..nmons for l in ls repeat -- number of coefficients
                    mat(i, j) := p*coefficient(l, o+i-1)
            sol := diophantineSystem(mat, v)$SmithNormalForm(Z, VZ, VZ, MZ)
            vPrint("mat",mat)
            vPrint("v",v)
            vPrint("sol", sol)
            if sol.particular case VZ then
                s := (sol.particular) :: VZ
                adjust := [p*c*term(x) for c in members s for x in mons]
                return pol + reduce(_+, adjust, 0)
                -- should minimize the leading coefficient of the series
                -- by adding 11*(combination of basis elements).
        error "annihilateLeadingCoefficients: failed" -- should not happen



)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
