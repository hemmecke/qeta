-------------------------------------------------------------------
---
--- FriCAS CachedPower
--- Copyright (C) 2018-2019,  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\begin{document}
\title{Caching powers of an element}
\author{Ralf Hemmecke}
\date{03-Apr-2018}
\maketitle
\begin{abstract}
  The package \code{CachedPower} implements a cache for powers of an
  element.
\end{abstract}
)endif

PP ==> PositiveInteger
ZZ ==> Integer

)abbrev domain CPOWER CachedPower
++ Author: Ralf Hemmecke
++ Description:
++ CachedPower(S) stores together with an element also its powers.
++ Each power is only computed once.
CachedPower(S: SemiGroup): Exports == Implementation where
  Exports ==> Join(CoercibleTo S, CoercibleFrom S) with
    power!: (%, PP) -> S
        ++ power!(x, n) extracts the n-th power of x, if that has
        ++ already been computed. Otherwise it computes the n-th power
        ++ by repeated squaring and stores all intermediately computed
        ++ powers of x including the n-th power in the cache and only
        ++ then returns the result.
    if S has MagmaWithUnit then
        power!: (%, ZZ) -> S
            ++ power!(x, n) extracts the n-th power of x, if that has
            ++ already been computed. Otherwise it computes the n-th
            ++ power by repeated squaring and stores all
            ++ intermediately computed powers of x including the n-th
            ++ power in the cache and only then returns the result.
  Implementation == add
    Rep ==> XHashTable(ZZ, S)
    rep x ==> (x@%) pretend Rep
    per x ==> (x@Rep) pretend %
    coerce(x: %): S == rep(x).1
    coerce(s: S): % ==
        cache: Rep := empty()
        cache.1 := s
        per cache

    --auxiliary function pow
    pow!(x: %, n: ZZ): S ==
        cache ==> rep x
        s: S := cache.1
        one? n => s
        key?(n, cache) => cache.n
        odd? n and key?(n-1, cache) => cache.n := s*cache(n-1)
        n2: ZZ := shift(n, -1) -- n2 := floor(n/2)
        z: S := pow!(x, n2) -- set cache recursively
        n2 := 2*n2
        z := z * z
        if odd? n then
            cache(n-1) := z -- also remember the even part (it was not known)
            z := s*z
        cache.n := z

    --exported function power
    power!(x: %, n: PP): S == pow!(x, n::ZZ)
    if S has MagmaWithUnit then
        power!(x: %, n: ZZ): S ==
            zero? n => 1$S
            n > 0 => pow!(x, n)
            cache ==> rep x
            key?(n, cache) => cache.n
            u: Union(S, "failed") := recip pow!(x, -n)
            if u case "failed" then
                error "power!(x, n) failed to compute inverse"
            cache.n := u::S

)if LiterateDoc
%$
\end{document}
)endif
