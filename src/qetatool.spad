-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2018  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Conversion, Evaluation, and Gr\"obner bases} %"
\author{Ralf Hemmecke}
\date{10-Dec-2015}
\maketitle
\begin{abstract}
  Auxiliary packages to help with the implementation of algorithms
  from \cite{Radu:RamanujanKolberg:2015},
  \cite{Hemmecke:DancingSambaRamanujan:2018}, and
  \cite{Hemmecke+Radu:EtaRelations:2018}.


  This file contains a number of auxiliary packages, namely
  \begin{itemize}
  \item \code{QAuxiliaryToos} helps to create variables (symbols) with
    given indices and converts a polynomial from
    \spadtype{Polynomial}\code{(Q)} to \spadtype{Polynomial}\code{(Z)}
    by clearing denominators (where \code{Z==>}\spadtype{Integer} and
    \code{Q==>}\spadtype{Fraction}\code{(Z)}).

  \item \code{QFunctionToos(C, L)} helps to create a Laurent series
    from another Laurent series by just picking a subsequence of
    coefficients. For example, from a series
    $\sum_{k=0}^\infty p(n)q^n$, we can form
    $\sum_{k=0}^\infty g(p(f(n))q^n$ for any functions
    $f:\setZ\to\setZ$ and $g: C\to C$, in particular we can optain the
    series
    $\sum_{k=0}^\infty p(5n+4)q^n$.

  \item \code{QFunctionTools2} allows to create a Laurent series from
    another Laurent series. In particular it can be used to replace
    $q$ by $cq^v$ where $c$ is an element of the coefficient domain
    and $v$ is a positive integer.

  \item \code{Finite0SeriesFunctions2} helps to embed elements of
    \code{Finite0Series(C1)} into \code{Finite0Series(C2)}.

  \item \code{PolynomialConversion} converts a polynomial from the
    generic \spadtype{Polynomial}\code{(C)} to a more specific
    polynomial ring of the form \code{PolynomialRing(C, E)} with a
    given domain of the exponents.

  \item \code{PolynomialEvaluation} evaluates the variables of a
    (multivariate) polynomial by given values in a structure that
    comes with the operations \code{+}, \code{*}, and \code{^}.

  \item \code{PolynomialTool} helps to extract from a number of
    polynomials only those whose variables start with a certain
    letter.
    %
    This package helps to compute $I\cap C[E]$ where
    $I \subset C[Y,E]$ and $Y=(Y_1,\ldots,Y_n$),
    $E=(E_1,\ldots, E_n)$.

  \item \code{QEtaGroebner} is a wrapper for the FriCAS
    \spadtype{GroebnerPackage}.
  \end{itemize}
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This code implements a number of conversion and evaluation tools.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
LSym ==> List Symbol

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
We want variables that are easy to parse when written to a file.
)endif

)abbrev package QAUXTOOL QAuxiliaryTools
++ Miscellaneous tools to deal with polynomials.
QAuxiliaryTools(): with
    indexedSymbols: (String, N) ->  List Symbol
        ++ indexedSymbols(s, n) returns indexedSymbols(s, [i for i in 1..n])
    indexedSymbols: (String, List Z) ->  List Symbol
        ++ indexedSymbols(s, l) creates a list of symbols of the form
        ++ [sx for x in l] where sx denotes the symbol with a name that
        ++ starts with the string s and ends with the number x.
    clearDenominator: Polynomial Q -> Polynomial Z
        ++ clearDenominator(p) multiplies the polynomial p over rational numbers
        ++ with the least common multiple of all its coefficients and
        ++ returns the result as a polynomial over the integers.
  == add
    indexedSymbols(s: String, n: N): List Symbol ==
        [concat(s, convert(i)@String)::Symbol for i in 1..n]
    indexedSymbols(s: String, l: List Z): List Symbol ==
        [concat(s, convert(i)@String)::Symbol for i in l]
    clearDenominator(p: Polynomial Q): Polynomial Z ==
        zero? p => 0$Polynomial(Z)
        c: Z := lcm [denom x for x in coefficients p]
        mon(x) ==> monomial(numer(c*leadingCoefficient x), degree x)$Polynomial(Z)
        lm: List Polynomial Z := [mon(x) for x in monomials p]
        reduce(_+, lm)

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Auxiliary package to create a series from another series.
)endif

)abbrev package QFUN2 QFunctionTools2
++ QFunctionTools2 allows to create a series from another series.
QFunctionTools2(C, L, CX, LX): Exports == Implementation where
  C: Ring
  L: QEtaLaurentSeriesCategory C
  CX: Ring
  LX: QEtaLaurentSeriesCategory CX
  S ==> Stream C
  SX ==> Stream CX
  RecC ==> Record(k: Z, c: C)
  RecX ==> Record(k: Z, c: CX)
  Exports ==> with
    map: (RecC -> RecX, L) -> LX
      ++ If x = \sum_{n=m}^\infty c(n)*q^n, then map(h, x) returns
      ++ a series \sum{n=m}^\infty g(c(n), n)*q^{f(n}}
      ++ where h([k,c]) is assumed to be equal to [f(k), g(c, k)].
      ++ f is assumed to be strictly increasing.
      ++ x is assumed to be non-zero.
    map: ((C, Z) -> CX, Z -> Z, L) -> LX
      ++ If x = \sum_{n=m}^\infty c(n)*q^n, then map(g, f, x) returns
      ++ a series \sum{n=m}^\infty g(c(n), n)*q^{f(n}}.
      ++ f is assumed to be strictly increasing.
      ++ x is assumed to be non-zero.
  Implementation ==> add
    SFCX ==> StreamFunctions2(RecC, RecX)

    map(f: RecC -> RecX, x: L): LX ==
        stc: Stream RecC := terms x
        stx: Stream RecX := map(f, stc)$SFCX
        series(stx)$LX

    gxf(g: (C, Z) -> CX, f: Z -> Z): RecC -> RecX == (x: RecC): RecX +->
        [f(x.k), g(x.c, x.k)]

    map(g: (C, Z) -> CX, f: Z -> Z, x: L): LX == map(gxf(g, f), x)

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Convert convert power series by mapping coefficients.
)endif

)abbrev package FIN0SER2 Finite0SeriesFunctions2
++ Finite0SeriesFunctions2 maps coefficients of the series.
Finite0SeriesFunctions2(C1, C2): Exports == Implementation where
  C1: CommutativeRing
  C2: CommutativeRing
  F1 ==> Finite0Series C1
  F2 ==> Finite0Series C2
  Exports ==> with
    map: (C1 -> C2, F1) -> F2
        ++ \spad{map(f, g(x))} applies the map f to the coefficients of
        ++ the series \spad{g(x)}.
  Implementation ==> add
    map(f: C1 -> C2, s: F1): F2 ==
        cs: Stream C1 := coefficients qetaTaylorRep s
        s2: QEtaTaylorSeries C2 := series(map(f, cs)$StreamFunctions2(C1, C2))
        laurent(order s, s2)$F2

)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\code{PolynomialConversion} converts a polynomial from the generic
\spadtype{Polynomial}\code{(C)} to a more specific polynomial ring of
the form \spadtype{PolynomialRing}\code{(C, E)} with a given domain of the
exponents.
)endif

)abbrev package POLYCONV PolynomialConversion
PolynomialConversion(_
  C: Ring, _
  E: OrderedAbelianMonoid with (
       directProduct: Vector N -> %; members: % -> List N),_
  syms: LSym): with
    coerce: Polynomial C -> PolynomialRing(C, E)
    coerce: PolynomialRing(C, E) -> Polynomial C
 == add
    R ==> PolynomialRing(C, E)
    coerce(p: Polynomial C): R ==
        r: R := 0
        while not zero? p repeat
            c: C := leadingCoefficient p
            v: Vector N := vector degree(leadingMonomial p, syms)
            e: E := directProduct(v)$E
            p := reductum p
            r := r + monomial(c, e)
        r

    coerce(r: R): Polynomial C ==
        p: Polynomial(C) := 0
        while not zero? r repeat
            c: C := leadingCoefficient r
            e: E := leadingSupport r
            r := reductum r
            exponents: List N := members e
            p := p + monomial(c::Polynomial(C), syms, exponents)
        p

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Evaluate a polynomial at a certain point.
)endif

)abbrev package POLYEVAL PolynomialEvaluation
PolynomialEvaluation(_
  C: Ring, _
  S: with (_
      _+: (%, %) -> %; _
      _*: (%, %) -> %; _
      _^: (%, NonNegativeInteger) -> %)_
 ): with
    eval: (Polynomial C, C -> S, LSym, List S) -> S
    eval: (C -> S, LSym, List S) -> Polynomial C -> S
 == add
    eval(p: Polynomial C, embed: C -> S, vars: LSym, vals: List S): S ==
        E ==> IndexedExponents Symbol
        PE ==> PolynomialCategoryLifting(E, Symbol, C, Polynomial C, S)
        map((s:Symbol):S +-> vals.position(s, vars), embed, p)$PE
    eval(embed: C -> S, vars: LSym, vals: List S): Polynomial C -> S ==
      (p: Polynomial C): S +-> eval(p, embed, vars, vals)

)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The following package helps to compute $I\cap C[E]$ where $I \subset
C[Y,E]$ and $Y=(Y_1,\ldots,Y_n$), $E=(E_1,\ldots, E_n)$.
)endif

)abbrev package POLYAUX PolynomialTool
PolynomialTool(R: Ring): with
    xPolynomials: (List Polynomial R, Character) -> List Polynomial R
      ++ xPolynomials(pols, c) returns all polynomials p from
      ++ pols such that variables(p) contains only variables starting
      ++ with the character c.
 == add
    -- variables not starting with the character c.
    xVariables(p: Polynomial(R), c: Character): List Symbol ==
        [x for x in variables p | (string x).1 ~= c]

    -- Is it a polynomial just in variables starting with the character c?
    xPolynomial?(p: Polynomial R, c: Character): Boolean ==
        degs: List N := degree(p, xVariables(p, c))
        zero? reduce(_+, degs, 0)

    -- Extract all polynomials just in variables that begin with the
    -- character c.
    xPolynomials(pols: List Polynomial R, c: Character): List Polynomial R ==
        [x for x in pols | xPolynomial?(x, c)]

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
A wrapper for \GB{} omputations.
)endif

)abbrev package QETAGB QEtaGroebner
++ QEtaGroebner(C, E) is a wrapper around the GrobnerPackage. It basically
++ converts given polynomials to elements in PolynomialRing(C, E), does
++ some Groebner basis computation or reduction and then converts back.
QEtaGroebner(C, E): Exports == Implementation where
  C: GcdDomain
  ExponentCat ==> OrderedAbelianMonoidSup with _
    (directProduct: Vector N -> %; members: % -> List N)
  E: ExponentCat
  Pol ==> Polynomial C
  LPol ==> List Pol
  R ==> PolynomialRing(C, E)
  X ==> Record(poly: R, repr: Vector R, mult: C)
  Exports ==> with
    groebner: (LPol, LSym) -> LPol
      ++ groebner(lpol, syms) considers the list of polynomials as
      ++ polynomials in syms, and computes a Groebner basis with
      ++ respect to the order given by E.
      ++ We assume that each of the polynomials in lpol is indeed a
      ++ polynomial in syms (and no other variables) and that E
      ++ corresponds to exactly #syms variables.
    groebnerExtend: (LPol, LPol, LSym) -> LPol
      ++ groebnerExtend(lpol, gb, syms) computes a Groebner basis of the
      ++ union of lpos and gb under the assumption that gb is already
      ++ a Groebner basis wrt. the order given by E.
      ++ We assume that each of the polynomials in lpol and gb is indeed a
      ++ polynomial in syms (and no other variables) and that E
      ++ corresponds to exactly #syms variables.
    normalForms: (LPol, LPol, LSym) -> LPol
      ++ normalForms(lpol, gb, syms) reduces each polynomial from lpol
      ++ with respect to the Groebner basis given by gb.
      ++ We assume that each of the polynomials in lpol and gb is indeed a
      ++ polynomial in syms (and no other variables) and that E
      ++ corresponds to exactly #syms variables.
    extendedNormalForm: (Pol, LPol, LSym, Symbol, String) -> Pol
      ++ extendedNormalForm(pol, gb, syms, f, g) returns
      ++ extendedNormalForm(pol, gb, syms, f, gsyms) for
      ++ gsyms := indexedSymbols(g, #gb).
    extendedNormalForm: (Pol, LPol, LSym, Symbol, LSym) -> Pol
      ++ extendedNormalForm(pol, gb, syms, f, gsyms) reduces pol with
      ++ respect to gb and returns that reduced polynomial together
      ++ with its relations in terms of gb. The original polynomial
      ++ is represented by the variable f and the Groebner basis
      ++ elements by the variables gsyms.
      ++ We assume that each of the polynomials pol and gb is indeed a
      ++ polynomial in syms (and no other variables) and that E
      ++ corresponds to exactly #syms variables.
    extendedNormalForms: (LPol, LPol, LSym, String, String) -> LPol
      ++ extendedNormalForms(lpol, gb, syms, f, g) returns
      ++ [extendedNormalForm(p, gb, syms, f, g)
      ++   for p in lpol for f in indexedSymbols(f, #lpol)]
  Implementation ==> add
    -- local
    -- toPol(x, syms, sym, gsyms) returns a polynomial that describes
    -- the representation of x.poly in terms of x.repr
    toPol(x: X, syms: LSym, sym: Symbol, gsyms: LSym): Pol ==
        import from PolynomialConversion(C, E, syms)
        p: Pol := (x.mult)*(sym::Pol) - (x.poly)::Pol
        for gsym in gsyms for r in members(x.repr) repeat
            p := p - (gsym::Pol)*(r::Pol)
        return primitivePart p

    -- exported
    groebner(lpol: LPol, syms: LSym): LPol ==
        import from PolynomialConversion(C, E, syms)
        rs: List R := [p::R for p in lpol]
        gb: List R := groebner(rs)$GroebnerPackage(C, E, R)
        [r::Pol for r in gb]

    groebnerExtend(lpol: LPol, gb: LPol, syms: LSym): LPol ==
        import from PolynomialConversion(C, E, syms)
        import from GroebnerInternalPackage(C, E, R)
        rs: List R := [p::R for p in lpol]
        rgb: List R := [p::R for p in gb]
        xgb: List R := gbasisExtend(rs, rgb, 2, 1)
        mgb: List R := minGbasis(sort((x, y) +-> degree x > degree y, xgb))
        [r::Pol for r in mgb]

    normalForms(lpol: LPol, gb: LPol, syms: LSym): LPol ==
        import from PolynomialConversion(C, E, syms)
        import from GroebnerInternalPackage(C, E, R)
        rs: List R := [p::R for p in lpol]
        rgb: List R := [p::R for p in gb]
        [(primitivePart redPol(x, rgb))::Pol for x in rs]

    extendedNormalForm(pol: Pol, gb: LPol, syms: LSym, f: Symbol, g: String): Pol ==
        gsyms: LSym := indexedSymbols(g, #gb)$QAuxiliaryTools
        extendedNormalForm(pol, gb, syms, f, gsyms)

    extendedNormalForm(pol: Pol, gb: LPol, syms: LSym, f: Symbol, gsyms: LSym): Pol ==
        import from PolynomialConversion(C, E, syms)
        import from ExtendedPolynomialReduction(C, E, R)
        rgb: List R := [p::R for p in gb]
        x: X := reduce(pol::R, rgb)
        toPol(x, syms, f, gsyms)

    extendedNormalForms(lpol: LPol, gb: LPol, syms: LSym, f: String, g: String): LPol ==
        import from PolynomialConversion(C, E, syms)
        import from ExtendedPolynomialReduction(C, E, R)
        rs: List R := [p::R for p in lpol]
        rgb: List R := [p::R for p in gb]
        lx: List X := [reduce(r, rgb) for r in rs]
        import from QAuxiliaryTools
        fsyms: LSym := indexedSymbols(f, #lpol)
        gsyms: LSym := indexedSymbols(g, #gb)
        [toPol(x, syms, fsym, gsyms) for fsym in fsyms for x in lx]

)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Unused}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{verbcode}
)abbrev package UPEVAL UnivariatePolynomialEvaluation
UnivariatePolynomialEvaluation(C: CommutativeRing, R: Algebra C): with
    eval: (UP, R) -> R
  == add
    eval(p: UP, x: R): R ==
        zero? p => 0
        leadingCoefficient(p)$UP * (x^degree(p)$UP) + eval(reductum p, x)
\end{verbcode}

\bibliography{qeta}
\end{document}
)endif
