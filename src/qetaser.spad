-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2020-2021  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------
OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

)if LiterateDoc
%$

\documentclass{article}
\usepackage{qeta}
\usepackage{showlabels}

\usepackage{makeidx}
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Expanding (sifted) or generalized Dedekind Eta Functions into
  $q$-series at various cusps}

\author{Ralf Hemmecke}
\date{26-Nov-2018}
\maketitle
\begin{abstract}
  The code in this file provides formal Taylor, Laurent, and Puiseux
  series in the variable $q$ suited for computation in the QEta
  package.

  Modular function that are eta-quotients and have a pole (if any)
  only at infinity, can be represented by univariate Laurent series
  that have the property that they are zero if their order is
  positive. This domain is implemented via \code{Finite0Series}. In
  other words, in contrast to \spadtype{UnivariateLaurentSeries}, it
  can be checked in finite time whether an element of
  \code{Finite0Series} is zero or not. \code{Finite0Series(C)} is of
  type \code{QEtaGradedAlgebra(C)}.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z

asZ x ==> x pretend Z

UTS(C) ==> UnivariateTaylorSeries(C, 'q, 0$C)
ULS(C) ==> UnivariateLaurentSeries(C, 'q, 0$C)
UPS(C) ==> UnivariatePuiseuxSeries(C, 'q, 0$C)
QTS ==> QEtaTaylorSeries
QLS ==> QEtaLaurentSeries
QPS ==> QEtaPuiseuxSeries


)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Category QEtaTaylorSeriesCategory}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Expansions of eta-quotients or generalized eta-quotients are Puiseux
series in $q=\exp(2\pi i \tau)$.
%
However, most computations are actually done with Laurent series.

)endif

)abbrev category QETATSC QEtaTaylorSeriesCategory
++ QEtaTaylorSeriesCategory is a UnivariateTaylorSeriesCategory
++ extended by a few functions that we need in the computation of our
++ package.
QEtaTaylorSeriesCategory(C: Ring): Category ==
  UnivariateTaylorSeriesCategory C with
    coerce: UTS C -> %
      ++ coerce(x) interpret a univariate Taylor series in q with a
      ++ center at 0 as an element of this domain. No check is made.
    coerce: % -> UTS C
      ++ coerce(x) interprets x as a univariate Taylor series in the
      ++ variable q about the center 0.
    multisect : (Z, Z, %) -> %
      ++ multisect(a, b, x} selects the coefficients of q^((a+b)*n+a)
      ++ and changes this monomial to q^n.
    revert: % -> %
      ++ revert(f(x)) returns a Taylor series g(x) such that f(g(x)) =
      ++ g(f(x)) = x. Series f(x) should have constant coefficient 0
      ++ and invertible 1st order coefficient.
      -- needed for functionalInverse.

)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Domain QEtaTaylorSeries}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev domain QETATS QEtaTaylorSeries
++ QEtaTaylorSeries(C) is in fact identical with
++ UnivariateTaylorSeries(C, 'q, 0). We just fix the variable to the
++ symbol q and the center to zero.
QEtaTaylorSeries(C: Ring): Exports == Implementation where
  Exports ==> QEtaTaylorSeriesCategory C
  Implementation ==> UTS C add
    Rep ==> UTS C
    coerce(s: UTS C): % == per s
    coerce(x: %): UTS C == rep x

)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Category QEtaTaylorSeriesCategory}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev category QETALSC QEtaLaurentSeriesCategory
++ QEtaLaurentSeriesCategory is a UnivariateLaurentSeriesCategory
++ extended by a few functions that we need in the computation of our
++ package.
QEtaLaurentSeriesCategory(C: Ring): Category ==
  Join(UnivariateLaurentSeriesCategory C, RetractableTo QTS C) with
    coerce: ULS C -> %
      ++ coerce(x) assumes that the Laurent series x belongs to the
      ++ subalgebra of series with the properties of this damain.
      ++ No check is made.
    coerce: % -> ULS C
      ++ coerce(x) returns the element x as a Laurent series.
    choose: (P, N, %) -> %
      ++ choose(m, t, x) returns the Laurent series z whose n-th
      ++ coefficient is the (m*n+t)-th coefficient of x, 0<=t<m.
      ++ It is an extension of multisect to Laurent series.
    qetaTaylorRep: % -> QTS C
      ++ qetaTaylorRep(x) returns the underlying Taylor representation
      ++ of the Laurent serires. This might return a taylor series that
      ++ has 0 as its constant coefficient.
    laurent: (Z, QTS C) -> %
      ++ laurent(n, s) creates a Laurent series by multiplying the
      ++ given Taylor series by q^n.
    removeZeroes: (Z, %) -> %
      ++ removeZeroes(n, x) removes at most n leading zeros from the
      ++ series x and stops as soon as it has found a non-zero leading
      ++ coefficient.
    removeZeroes: % -> %
      ++ removeZeroes(x) is like removeZeroes(n, x) without a bound on
      ++ the number of possible zeroes that will be removed. It might
      ++ never stop if the input is the (infinite) series that has
      ++ only zero coefficients.

)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Domain QEtaLaurentSeries}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev domain QETALS QEtaLaurentSeries
++ QEtaLaurentSeries(C) is in fact identical with
++ UnivariateLaurentSeries(C, 'q, 0). We just fix the variable to the
++ symbol q and the center to zero.
QEtaLaurentSeries(C: Ring): Exports == Implementation where
  Exports ==> QEtaLaurentSeriesCategory C
  Implementation ==> ULS C add
    Rep ==> ULS C
    Rec ==> Record(expon: Z, ps: QTS C) -- hack!!!
    qetaTaylorRep(x: %): QTS C == (x pretend Rec).ps
    retractIfCan(x: %): Union(QTS C, "failed") ==
        (d := degree x) < 0 =>
            x := removeZeroes(-d, x)
            degree x < 0 => "failed"
            qetaTaylorRep x
        z := qetaTaylorRep x
        zero? d => z
        z * monomial(1, d::N)
    retract(x: %): QTS C ==
        (d := degree x) < 0 =>
            x := removeZeroes(-d, x)
            degree x < 0 => error "QetaTaylorSeries: cannot retract"
            qetaTaylorRep x
        z := qetaTaylorRep x
        zero? d => z
        z * monomial(1, d::N)
    coerce(s: ULS C): % == per s
    coerce(x: %): ULS C == rep x
    choose(m: P, t: N, x: %): % ==
        -- if possible, get rid of some initial zeros up to degree 0
        x := removeZeroes(-degree x, x)
        -- start with the actual selection of coefficients
        ord: Z := order(x, max(0, degree x))
        ord ~= degree x => error "choose$QEtaLaurentSeries: deg=ord expected"
        nord: Z := ceiling((ord-t)/m)$Q
        n: Z := nord*m + t - ord -- 0 <= n < m -- avoid calling "reductum"
        laurent(nord, multisect(m-n, n, qetaTaylorRep x)$QTS(C))
    laurent(n: Z, s: QTS C): % == per laurent(n, s pretend UTS(C))
    laurent(n: Z, s: Stream C): % == laurent(n, series(s)$QTS(C))
    removeZeroes(n: Z, x: %): % == per removeZeroes(n, rep x)
    removeZeroes(x: %): % == per removeZeroes rep x





)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Domain Finite0Series}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In \cite{Radu:RamanujanKolberg:2015}, the computations are done in
a subclass of Laurent series, namely those that are identically zero
if their order is greater than zero.

)endif

)abbrev domain FIN0SER Finite0Series
++ Finite0Series represents Laurent series such that if
++ x is such a series and order(x)>0 then x=0.
++ Quotients of Dedekind eta-functions that are modular functions
++ that only have a pole (if any) at infinity,
++ can be represented as such series.
-- We need the center parameter, because SPAD cannot yet pass
-- non-integer constants to constructors.
-- https://www.mail-archive.com/fricas-devel@googlegroups.com/msg08670.html
Finite0Series(C: CommutativeRing): Exports == Implementation where
  Exports ==> Join(QEtaLaurentSeriesCategory C, QEtaGradedAlgebra C) with
    coerce: QLS C -> %
      ++ coerce(x) assumes that the QEta Laurent series x belongs to
      ++ the subalgebra of series with the properties of this damain.
      ++ No check is made.
    coerce: % -> QLS C
      ++ coerce(x) returns the element x as a QEta Laurent series.
  Implementation ==> QLS C add
    Rep ==> QLS C
    Rec ==> Record(expon: Z, ps: QTS C) -- hack!!!
    coerce(s: QLS C): % == per s
    coerce(x: %): QLS C == rep x
    zero?(x: %): Boolean ==
        d: Z := degree x -- (x pretend Rec).expon
        d > 0 => true
        not zero? coefficient(qetaTaylorRep x, 0) => false -- get out early
        -- remove zeroes until order becomes positive
        rec: Rec := (removeZeroes(1-d, x)) pretend Rec
        xrec := x pretend Rec
        xrec.expon := rec.expon
        xrec.ps    := rec.ps
        xrec.expon > 0 or empty? coefficients(xrec.ps)
    qetaGrade(x: %): Z ==
        zero? x => -1 -- destructively set x
        -order(x, 0)
    qetaCoefficient(x: %, k: Z): C == coefficient(x, -k)
    qetaLeadingCoefficient(x: %): C ==
        zero? x => 0 -- destructively set x
        leadingCoefficient x
    choose(m: P, t: N, x: %): % ==
        zero? x => 0
        per choose(m, t, rep x)








)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Domain QEtaPuiseuxSeries}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif


)abbrev domain QETAPS QEtaPuiseuxSeries
QEtaPuiseuxSeries(C: Ring): Exports == Implementation where
  Exports ==> UnivariatePuiseuxSeriesCategory C with
    qetaLaurentRep: % -> QLS C
      ++ qetaLaurentRep(x) returns the underlying Laurent representation
      ++ of the Puiseux seriers. This might return a taylor series that
      ++ has 0 as its constant coefficient.
    rationalPower : % -> Q
      ++ rationalPower(p(q)) returns a rational number r such that the
      ++ p(q) = l(q^r) for some Laurent series l.
    puiseux: (Q, QLS C) -> %
      ++ puiseux(r, s) creates a Puiseux series by replacing the
      ++ variable q of a by q^r.
  Implementation ==> UPS C add
    Rep ==> UPS C
    Rec ==> Record(expon: Q, lSeries: QLS C)
    qetaLaurentRep(x: %): QLS C == (x pretend Rec).lSeries
    rationalPower(x: %): Q == (x pretend Rec).expon
    puiseux(q: Q, qls: QLS C): % ==
        rec: Rec := [q, qls]$Rec
        rec pretend %






)if LiterateDoc
%$

\bibliography{qeta}
\printindex
\end{document}

)endif
