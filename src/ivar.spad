-------------------------------------------------------------------
---
--- IndexedVariable
--- Copyright (C) 2019,  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\DeclareUrlCommand\code{\urlstyle{tt}}
\begin{document}
\title{Indexed variables}
\author{Ralf Hemmecke}
\date{22-Oct-2019}
\maketitle
\begin{abstract}
  A helper domain to represent (infinitely many) variables that are
  ordered ascendingly by their index.
\end{abstract}

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

P ==> PositiveInteger
Z ==> Integer

asP x ==> x pretend P
asZ x ==> x pretend Z

)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{IndexedVariable}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev domain IVAR IndexedVariable
++ Author: Ralf Hemmecke
++ Description:
++ IndexedVariable(x) represents potentially infinitely many
++ variables, namely x1, x2, x3. etc. and orders them ascendingly like
++ the natural order of their indices.
IndexedVariable(v: String): Exports == Implementation where
  Exports ==> Join(OrderedSet, ConvertibleTo Symbol) with
    new: () -> %
      ++ new() returns a new (not yet used) variable.
    rank: () -> Z
      ++ rank() returns the highest index of the currently known
      ++ variables. It returns 0 if no variables are known.
    lookup: % -> P
      ++ lookup(x) returns the index of the variable.
    index: P -> %
      ++ index(p) returns the variable v such that lookup(v) = p. It
      ++ is an error to call index(p) for p > rank().

  Implementation ==> P add
    next: Reference Z := ref(1$Z)
    syms: FlexibleArray Symbol := empty()
    Rep ==> Z -- we only use positive integers (x>0)
    rank(): Z ==
--        free next
        deref(next) - 1
    lookup(x: %): P == asP rep x
    index(p: P): % ==
        z: Z := asZ p
        z < deref next => per z
        error "No variable with that index is yet known."
    new(): % ==
--        free next, syms
        m: Z := deref next
        s: String := concat(v, string m)
        sym: Symbol := s::Symbol
        concat!(syms, sym) -- destructively changes syms
        setelt!(next, m+1)$Reference(Z)
        per m
    convert(x: %): Symbol == syms(rep x)
    coerce(x: %): OutputForm ==
        import from Symbol
        (convert(x)@Symbol)::OutputForm

)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
