-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018-2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Finding co-factors for sifted (generalized) Eta-Quotients with cusps only at infinity}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
  The code in this file deals the computation of a cofactor to a
  sifted (generalized) eta-quotient such that the result is a modular
  function with a cusp at most at infinity.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
VZ ==> Vector Z
MZ ==> Matrix Z -- consider only 2x2 matricies
LP ==> List P
LZ ==> List Z
LLZ ==> List LZ
INDICES ==> LLZ
QETAAUX ==> QEtaAuxiliaryPackage
SPEC ==> QEtaSpecification
SPECS ==> List SPEC
CUSPS ==> List Cusp

YGEQ ==> SymbolicGeneralizedEtaQuotient
YM0EQ ==> SymbolicModularGamma0EtaQuotient
YM1GEQ ==> SymbolicModularGamma1GeneralizedEtaQuotient

asP x ==> x pretend P

INTF ==> IntegerNumberTheoryFunctions
DIVISORS m ==>  [asP d for d in divisors(m)$INTF]

LVZ ==> List VZ
ECS ==> Record(indices: INDICES, particular: Union(VZ,"failed"), basis: LVZ)
ECSS ==> Record(comatrix: MZ, rhs: VZ)
SOL ==> Record(particular: Union(VZ, "failed"), basis: LVZ)
ZRESULT ==> Record(zinhom: LVZ, zhom: LVZ, zfree: LVZ) -- zsolve$X4ti2

GAMMA0 ==> CongruenceSubgroupGamma0
GAMMA1 ==> CongruenceSubgroupGamma1

A1 C ==> Finite0Series C
specM1A1 C ==> modularGeneralizedEtaQuotientInfinity $ QEtaModularGamma1Infinity(C)



)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaModularGammaPackage}
\label{sec:QEtaModularGammaPackage}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Compute a vector that must be multiplied to the (sifted) eta-quotient
in order to make it a modular function for
$\Gamma_0(N)$ having a pole only at infinity or to make the (positive)
orders at all cusps (\code{qetaGrades}) small in total sum.

)endif

)abbrev package QETAMGP QEtaModularGammaPackage
QEtaModularGammaPackage: Exports == Implementation where
  Exports ==> with
    etaCofactorInfinitySpaceSystem: (SPECS, LZ, CUSPS) -> ECSS
      ++ etaCofactorInfinitySpaceSystem(bspecs,grds,spitzen) returns a
      ++ matrix A and a right-hand side v for a system A*x>=v where
      ++ the right-hand side is grds (which is the expansion
      ++ poleorders ath the cusps spitzen and A is the expansion
      ++ poleorders of the basis elements given by bspecs. The rows
      ++ are indexed by the cusps.
    reduceSystem: ECSS -> ECSS
      ++ reduceSystem([A,v]) returns a matrix A' and a right-hand side
      ++ v' such that A*x>=v and A'*x>=v' have the same solutions, but
      ++ A' has duplicate rows removed.
  Implementation ==> add
    etaCofactorInfinitySpaceSystem(bspecs:SPECS,grds:LZ,spitzen:CUSPS):ECSS ==
        -- For bspecs (modular functions) we can use the
        -- matrixEtaOrder to compute the order vectors.
        ybas: List YGEQ := [generalizedEtaQuotient(bspec, spitzen)
                            for bspec in bspecs]
        bas: LLZ := [qetaGrades y for y in ybas]
        mat: MZ := transpose matrix bas
        [mat, vector grds]

    reduceSystem(ecss: ECSS): ECSS ==
        -- See \eqref{eq:remove-non-infinity-poles}. We have to solve
        -- ecss.comatrix * x >= ecss.rhs and are satisfied with a
        -- solution for "=" instead of ">=". The rows of ecss.comatrix
        -- and ecss.rhs are indexed by cusps. Since it might happen
        -- that some rows are identical, we remove them. From the rhs
        -- we collect the corresponding entries and take their maximum
        -- grade (pole order), see \eqref{eq:remove-non-infinity-poles}.
        mat: MZ := ecss.comatrix
        u: VZ := ecss.rhs
        hrows: XHashTable(VZ, Z) := empty()
        for i in 1..nrows(mat) repeat
            hrow: VZ := row(mat, i)
            g: Union(Z, "failed") := search(hrow, hrows)
            if g case "failed" or u.i > (g::Z) then hrows.hrow := u.i
        ll: LLZ := empty()
        v: LZ := empty()
        for hrow in keys hrows repeat
            ll := cons(members hrow, ll)
            v := cons(hrows.hrow, v)
        [matrix ll, vector v]




)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaModularGamma0Package}
\label{sec:QEtaModularGamma0Package}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Compute a vector that must be multiplied to the (sifted) eta-quotient
in order to make it a modular function for
$\Gamma_0(N)$ having a pole only at infinity or to make the (positive)
orders at all cusps (\code{qetaGrades}) small in total sum.

)endif

)abbrev package QETAMG0 QEtaModularGamma0Package
QEtaModularGamma0Package: Exports == Implementation where
  Exports ==> with
    qetaGrades: YM0EQ -> LZ
      ++ qetaGrades(y) returns the qetaGrades of the modular function
      ++ corresponding to y. In the special case when order(e.c) is
      ++ less than 0 for every cusp c in cusps(y), the function
      ++ returns a value of -1 for each cusp although this might not
      ++ be the true grade of the expansion. This special treatment
      ++ avoids running into an infinite loop if y represents the zero
      ++ function.
    qetaGrades: (SPEC, SPEC, P, N, CUSPS) -> LZ
      ++ qetaGrades(sspec,rspec,m,t,spitzen) returns qetaGrades(y) where
      ++ y=etaQuotient(sspec,rspec,m,t,spitzen)$SymbolicModularGamma0EtaQuotient
    qetaGrades: (SPEC, SPEC, P, N) -> LZ
      ++ qetaGrades(sspec,rspec,m,t) returns qetaGrades(y) where
      ++ y=etaQuotient(sspec,rspec,m,t)$SymbolicModularGamma0EtaQuotient.
    etaCofactorInfinity: (P, SPEC, P, N) -> SPEC
      ++ etaCofactorInfinity(nn,rspec,m,t) returns a specification
      ++ sspec such that
      ++ modularGamma0?(sspec,rspec,m,t)$QEtaCofactorConditions and
      ++ etaQuotient(sspec,rspe,m,t)$SymbolicModularGamma0EtaQuotient
      ++ corresponds to a modular function with poles only at infinity
      ++ and with smallest pole order.

  Implementation ==> add
    C ==> Q
    lift2C x ==> map(coerce, x)$SparseUnivariatePolynomialFunctions2(Z, C)
    SUPC ==> SparseUnivariatePolynomial C
    CX ==> SimpleAlgebraicExtension(C, SUPC, supc)
    TX ==> QEtaTaylorSeries CX
    LX ==> QEtaLaurentSeries CX
    QLX ==> XHashTable(Cusp, LX)

    a ==> aLigozat $ QETAAUX

    -- order of eta^r at cusp a/c.
    grade(nn: P, divs: LP, c: Z, r: LZ): Z ==
        zero? c => error "cusp (1:0) not allowed here" -- safety check
        l: LZ := [rdelta * a(nn, c, delta) for delta in divs for rdelta in r]
        -(reduce(_+, l, 0) exquo 24)::Z

    -- local
    -- orders at cusps of Gamma0(nn) different from infinity
    grades(nn: P, divs: LP, cusps: CUSPS, r: LZ): LZ ==
        [grade(nn, divs, denom cusp, r) for cusp in cusps]

    qetaGrades(y: YM0EQ): LZ ==
        mx: P := minimalRootOfUnity y
        supc: SUPC := lift2C(cyclotomic(mx)$CyclotomicPolynomialPackage);
        xi := generator()$CX;
        xsym: Symbol := "x"::Symbol;
        e: QLX := laurentExpansions(y)$QEtaSeriesExpansion(C, mx, CX, xi)
        spitzen: CUSPS := cusps y
        qetaGrades(e :: ModularFunctionExpansionsAtCusps(CX, spitzen))
    qetaGrades(sspec: SPEC, rspec: SPEC, m: P, t: N, spitzen: CUSPS): LZ ==
        qetaGrades(etaQuotient(sspec, rspec, m, t, spitzen)$YM0EQ)
    qetaGrades(sspec: SPEC, rspec: SPEC, m: P, t: N): LZ ==
        qetaGrades(etaQuotient(sspec, rspec, m, t)$YM0EQ)

    -- local function
    -- What actually counts is that the grade of eta-quotient corresponding
    -- to sinitial is small.
    -- The initial minimizeVector is only here, because the computation of
    -- qetaGrades involves the actual computation of the Laurent series
    -- expansion of the respective eta-quotient at all cusps. So we
    -- shouldn't have too high exponents.
    minimizeGradesSpecification(nn: P, rspec: SPEC, m: P, t: N,
                                rinitial: VZ, b: LVZ): SPEC ==
        sinitial: VZ := minimizeVector(rinitial, b)$QETAAUX
        -- Compute the poleorders/grades (at all cusps) for the
        -- particular solution rinitial.
        sspec: SPEC := etaQuotientSpecification(nn, members sinitial)
        -- Exclude order at the cusp infinity.
        spitzen: CUSPS := [cusp for cusp in cusps(nn)$GAMMA0 _
                           | not infinity? cusp]
        rhs: LZ := qetaGrades(sspec, rspec, m, t, spitzen)
        -- For the vectors in the basis, we don't need to compute the
        -- series explicitly, since these vectors correspond to
        -- modular eta-quotients and thus we can use the matrix of
        -- Ligozat to compute the order vectors.
        nndivs: List P := DIVISORS nn
        bas: List LZ := [grades(nn, nndivs, spitzen, members x) for x in b]
        mat: MZ := transpose matrix bas
        rels: VZ := vector [1 for x in 1..#spitzen]
        zresult: ZRESULT := zsolve(mat, rels, vector rhs)$X4ti2
        -- We are interested in the inhomogeneous solutions, since
        -- they yield an adjustment such that the resulting cofactor
        -- vector s leads to an element in M^\infty(nn) for the
        -- etaQuotient(sspec,rspec,m,t).
        --
        -- There can be several inhomogeneous solutions. Any of them
        -- is fine, but we want the resulting series to be of a small
        -- qetaGrade (= small poleorder = big order) at infinity. So
        -- we compute the series expansion at infinity for each of the
        -- inhomogeneous solutions and take the minimal qetaGrade.
        adjustments := zresult.zinhom
        empty? adjustments => error "cannot find cofactor"
        v: VZ := first adjustments
        sadjust:VZ := reduce(_+, [x*bb for x in members v for bb in b])
        s: LZ := members(sinitial - sadjust)
        -- Let sspec=etaSpecification(nn,s).
        -- The order of the expansion at infinity of the modular
        -- function given by (sspec,rspec,m,t) can be approximated
        -- by alphaInfinity. See its definition in QEtaCofactorSpace.
        -- Even though it might not be the correct order since
        -- a(m*n+t) can be zero for an initial segment of natural
        -- numbers n, alphaInfinity can be used to determine which of
        -- the possible inhomogeneous candidates gives a minimal
        -- grade. Note that grade = -order.
        -- Since in the computation of alphaInfinity only the cofactor
        -- part changes, it is sufficient if we try to maximize
        -- sigmaInfinity(etaQuotientSpecification(nn, s)).
        sspec: SPEC := etaQuotientSpecification(nn, s)
        sinf: Q := sigmaInfinity sspec
        while not empty?(adjustments := rest adjustments) repeat
            v := first adjustments
            sadjust: VZ := reduce(_+, [x*bb for x in members v for bb in b])
            stest := members(sinitial - sadjust)
            tspec := etaQuotientSpecification(nn, stest)
            si: Q := sigmaInfinity tspec
            if si > sinf then
                s := stest
                sspec := tspec
                sinf := si
        sspec

    etaCofactorInfinity(nn: P, rspec: SPEC, m: P, t: N): SPEC ==
        ecs: ECS := etaCofactorSpace0(nn, rspec, m, t)$QEtaCofactorSpace
        n: Z := numberOfDivisors(nn)$INTF
        sinitial: VZ := ((ecs.particular)::VZ)(1..n)
        b: LVZ := [x(1..n) for x in ecs.basis]
        minimizeGradesSpecification(nn, rspec, m, t, sinitial, b)














)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaModularGamma1Package}
\label{sec:QEtaModularGamma1Package}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compute a vector that must be multiplied to the (sifted) (generalized)
eta quotient in order to make it a modular function for $\Gamma_1(N)$
having a pole only at infinity or to make the (positive) orders at all
cusps (\code{qetaGrades}) small in total sum.

)endif

)abbrev package QETAMG1 QEtaModularGamma1Package
QEtaModularGamma1Package: Exports == Implementation where
  Exports ==> with
    qetaGrades: YM1GEQ -> LZ
      ++ qetaGrades(y) returns the qetaGrades of the modular function
      ++ corresponding to y. In the special case when order(e.c) is
      ++ less than 0 for every cusp c in cusps(y), the function
      ++ returns a value of -1 for each cusp although this might not
      ++ be the true grade of the expansion. This special treatment
      ++ avoids running into an infinite loop if y represents the zero
      ++ function.
    qetaGrades: (SPEC, SPEC, P, N, CUSPS) -> LZ
      ++ qetaGrades(sspec,rspec,m,t,spitzen) returns qetaGrades(y) where
      ++ y=etaQuotient(sspec,rspec,m,t,spitzen)$SymbolicModularGamma1GeneralizedEtaQuotient.
    qetaGrades: (SPEC, SPEC, P, N) -> LZ
      ++ qetaGrades(sspec,rspec,m,t) returns qetaGrades(y) where
      ++ y=etaQuotient(sspec,rspec,m,t)$SymbolicModularGamma1GeneralizedEtaQuotient
    etaCofactorInfinity: (P, SPEC, P, N, INDICES) -> SPEC
      ++ etaCofactorInfinity(nn,rspec,m,t,idxs) returns a
      ++ specification sspec such that sspec has only indices from
      ++ idxs, modularGamma1?(sspec,rspec,m,t)$QEtaCofactorSpace and
      ++ generalizedEtaQuotient(sspec,rspec,m,t)$SymbolicModularGamma1GeneralizedEtaQuotient
      ++ corresponds to a modular function with poles only at infinity
      ++ and with smallest pole order. If idxs=[], then it is
      ++ equivalent to the indices generalizedEtaFunctionIndices(nn).
    etaCofactorInfinity: (P, SPEC, P, N) -> SPEC
      ++ etaCofactorInfinity(nn,rspec,m,t) returns
      ++ etaCofactorInfinity(nn,rspec,m,t,[])
  Implementation ==> add
    C ==> Q
    lift2C x ==> map(coerce, x)$SparseUnivariatePolynomialFunctions2(Z, C)
    SUPC ==> SparseUnivariatePolynomial C
    CX ==> SimpleAlgebraicExtension(C, SUPC, supc)
    TX ==> QEtaTaylorSeries CX
    LX ==> QEtaLaurentSeries CX
    QLX ==> XHashTable(Cusp, LX)

    qetaGrades(y: YM1GEQ): LZ ==
        mx: P := minimalRootOfUnity y
        supc: SUPC := lift2C(cyclotomic(mx)$CyclotomicPolynomialPackage);
        xi := generator()$CX;
        xsym: Symbol := "x"::Symbol;
        e: QLX := laurentExpansions(y)$QEtaSeriesExpansion(C, mx, CX, xi)
        spitzen: CUSPS := cusps y
        qetaGrades(e :: ModularFunctionExpansionsAtCusps(CX, spitzen))
    qetaGrades(sspec: SPEC, rspec: SPEC, m: P, t: N, spitzen: CUSPS): LZ ==
        qetaGrades generalizedEtaQuotient(sspec, rspec, m, t, spitzen)
    qetaGrades(sspec: SPEC, rspec: SPEC, m: P, t: N): LZ ==
        qetaGrades generalizedEtaQuotient(sspec, rspec, m, t)

    etaCofactorInfinity(nn: P, rspec: SPEC, m: P, t: N, idxs: INDICES): SPEC ==
        ecs: ECS := etaCofactorSpace1(nn, rspec, m, t, idxs)$QEtaCofactorSpace
        ecs.particular case "failed" =>
            error "etaCofactorInfinity: cannot make modular"
        rinitial: VZ := (ecs.particular)::VZ
        idxs := ecs.indices -- because idxs can be empty initially
        hbasis: LVZ := ecs.basis -- a basis for the homogeneous solutions
        hmat: MZ := transpose matrix [members x for x in hbasis]
        sinitial: VZ := minimizeVector(rinitial, hbasis)$QETAAUX
        -- Compute the poleorders/grades (at all cusps) for the
        -- particular solution sinitial.
        le := members sinitial -- exponents
        sspec: SPEC := generalizedEtaQuotientSpecification(nn, idxs, le)
        spitzen: CUSPS := cusps(level sspec)$GAMMA1
        y: YM1GEQ := generalizedEtaQuotient(sspec, rspec, m, t, spitzen)
        constant? y => sspec
        -- y can still represent a constant function.
        -- We only make an actual test at the cusp infinity for all others
        -- the poleorder estimate must suffice.
        spitzen := remove!(infinity(), spitzen)
        y: YM1GEQ := generalizedEtaQuotient(sspec, rspec, m, t, spitzen)
        if constant? y then -- note that infinity is not involved
            -- Coming here, we definitely have no pole at non-infinity cusps.
            -- The implementation for qetaGrade in A1(C) takes care of not
            -- running indefinityly of the series is zero.
            if qetaGrade(specM1A1(C)(sspec, rspec, m, t)) <= 0 then return sspec
        -- Coming here, it is still possible that (sspec, rspec, m, t)
        -- represents a constant function, since the "constant?"
        -- function above only estimates the grades.
        bspecs := [generalizedEtaQuotientSpecification(nn, idxs, members x)
                   for x in hbasis]
        import from QEtaModularGammaPackage
        ecss := etaCofactorInfinitySpaceSystem(bspecs, qetaGrades y, spitzen)
        ecss := reduceSystem ecss -- remove identical rows
        mat: MZ := ecss.comatrix
        u: VZ := ecss.rhs
        -- We first solve mat*x=u for x.
        sol: SOL := diophantineSystem(mat, u)$SmithNormalForm(Z, VZ, VZ, MZ)
        not sol.particular case "failed" =>
            s := sinitial - (hmat * ((sol.particular)::VZ))
            return generalizedEtaQuotientSpecification(nn, idxs, members s)
        -- If there is no solution, we try the more involved mat*x>=u.
        rels: VZ := vector [1 for x in 1..#u]
        zresult: ZRESULT := zsolve(mat, rels, u)$X4ti2
        -- We are interested in the inhomogeneous solutions, since
        -- they yield an adjustment such that the resulting cofactor
        -- vector sbar leads to an element in M^\infty(nn) for the
        -- generalizedEtaQuotient(sspec,rspec,m,t).
        --
        -- There can be several inhomogeneous solutions. Any of them
        -- is fine, but we want the resulting series to be of a small
        -- qetaGrade (= small poleorder = big order) at infinity. So we
        -- compute the series expansion at infinity for each of the
        -- inhomogeneous solutions and take the minimal qetaGrade.
        dbgPrint("zresult", zresult)
        adjustments := zresult.zinhom
        empty? adjustments => error "cannot find cofactor"
        s := sinitial - hmat * first(adjustments)
        -- The order of the expansion at infinity of the modular
        -- function given by (sspec, rspec, m, t) can be approximated
        -- by alphaInfinity. See its definition in QEtaCofactorSpace.
        -- Even though it might not be the correct order since
        -- a(m*n+t) can be zero for an initial segment of natural
        -- numbers n, alphaInfinity can be used to determine which of
        -- the possible inhomogeneous candidates gives a minimal
        -- grade. Note that grade = -order.
        -- Since in the computation of alphaInfinity only the cofactor
        -- part changes, it is sufficient if we try to maximize
        -- sigmaInfinity(sspec) where sspec is given through s via
        -- sbar:=generalizedEtaQuotientSpecification(nn,idxs,s)
        sspec := generalizedEtaQuotientSpecification(nn, idxs, members s)
        sigmainf: Q := sigmaInfinity sspec
        while not empty?(adjustments := rest adjustments) repeat
            s := sinitial - hmat * first(adjustments)
            tspec := generalizedEtaQuotientSpecification(nn, idxs, members s)
            si: Q := sigmaInfinity tspec
            if si > sigmainf then
                sspec := tspec
                sigmainf := si
        return sspec

    etaCofactorInfinity(nn: P, rspec, m: P, t: N): SPEC ==
        etaCofactorInfinity(nn, rspec, m, t, [])











)if LiterateDoc
\bibliography{qeta}
\printindex
\end{document}
)endif
