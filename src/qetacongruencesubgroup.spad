-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{The congruence subgroup category}
\author{Ralf Hemmecke}
\date{14-Jan-2022}
\maketitle
\begin{abstract}
  The category \code{CongruenceSubgroup} provides function signature
  to specify congruence subgroups.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

First of all for debugging.
)endif

)if LiterateDoc
%$
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
SL2Z ==> Matrix Z -- represents SL_2(Z), will be a 2x2 square matrix


)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Category CongruenceSubgroup}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev category CONGGRP CongruenceSubgroup
++ CongruenceSubgroup is the category congruence subgroup of $L2Z such
++ as $\Gamma_0(N) and $\Gamma_1(N)$.
CongruenceSubgroup: Category == with
    index: () -> P
      ++ If GAMMA denotes this domain, then index() computes the index
      ++ of GAMMA in SL2Z. index().
    cusps: () -> List Cusp
      ++ If GAMMA denotes this domain, then cusps() returns
      ++ representatives for all the (inequivalent) cusps for GAMMA
      ++ sorted by their size as rational numbers with infinity being
      ++ the biggest cusp. Note that cusps()=[cusp(x(1,1),x(2,1)) for
      ++ x in doubleCosetRepresentatives()].
    cuspToMatrix: Cusp -> SL2Z
      ++ For cusp=(a:c), cuspToMatrix(cusp) returns a matrix
      ++ gamma=[[a,b],[c,d]] corresponding to the cusp (a:c) of this
      ++ domain. We assume that a/c is a normalized cusp, i.e.
      ++ cusp=normalizeCusp(cusp).
    dimensionOfCuspForms: Z -> N
      ++ dimensionOfCuspForms(w) computes the dimension of
      ++ S_w(\Gamma). See
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
    dimensionOfEisensteinSubspace: Z -> N
      ++ dimensionOfEisensteinSubspace(w) computes the dimension of
      ++ E_w(\Gamma), the Eisenstein subspace of modular forms. See
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
    dimensionOfModularForms: Z -> N
      ++ dimensionOfModularForms(w) computes the dimension of
      ++ M_w(\Gamma). See
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
    doubleCosetRepresentatives: () -> List SL2Z
      ++ doubleCosetRepresentatives() returns a list of double coset
      ++ representatives of $\Gamma \backslash SL_2(Z) /
      ++ SL_2(Z)_\infty$ where $SL_2(Z)_\infty$ are matrices of the
      ++ form [[1,h],[0,1]] with h being an integer. Note that
      ++ cusps()=[cusp(x(1,1),x(2,1)) for x in
      ++ doubleCosetRepresentatives()].
    equivalentCusps?: (Cusp, Cusp) -> Boolean
      ++ equivalentCusps?(cusp1, cusp2) returns true iff the cusp
      ++ cusp1=(a:c) is equivalent to cusp2=(u:w) modulo the action of
      ++ this domain.
    genus: () -> N
      ++ genus() returns the genus of the congruence subgroup
      ++ Gamma_0(nn). It corresponds to the series
      ++ https://oeis.org/A001617 .
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40.
    level: () -> P
      ++ level() returns the level of the congruence subgroup.
    normalizeCusp: Cusp -> Cusp
      ++ normalizeCusp(cusp) normalizes the cusp to another
      ++ (equivalent modulo GAMMA cusp (u:w) such that if
      ++ cusp is equivalent to infinity, then infinity() is returned;
      ++ if cusp is equivalent to (0:1), (0:1) is returned.
      ++ Otherwise the numerator and denominator are positive
      ++ and small amd coprime.
    member?: SL2Z -> Boolean
      ++ member?(mat) returns true if mat is an element of GAMMA.
      ++ It is assumed that determinant(mat)=1.
    nu2: () -> Z
      ++ nu2() returns the number of GAMMA inequivalent elliptic
      ++ points of order 2. See
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40 and \mu_{1,3}(n) of
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html.
    nu3: () -> Z
      ++ nu3() returns the number of GAMMA inequivalent elliptic
      ++ points of order 3. See See
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40 and \mu_{1,3}(n) of
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html.
    projectiveIndex: () -> P
      ++ projectivIndex() computes the index of the image of GAMMA in
      ++ PSL2Z.
    numberOfCusps: () -> P
      ++ numberOfCusps() returns the number of cusps of $\Gamma_0(nn)$.
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40.
    width: Cusp -> Z
      ++ If GAMMA denotes this domain, then width(cusp) returns the
      ++ width of the cusp=(a:c) of GAMMA.



)if LiterateDoc
%$
\bibliography{qeta}
\end{document}
)endif
