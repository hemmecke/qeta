-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2017  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Computation of polynomial relations among Dedekind Eta
Functions---Variant Radu}
\author{Ralf Hemmecke}
\date{03-Aug-2017}
\maketitle
\begin{abstract}
  The package \code{QEtaIdealRadu} implements a variant of the
  computation of $\eta$-relations. The algorithm \algo{AB} from
  \cite{Radu:RamanujanKolberg:2015} does not easily allow to express
  the resulting module basis elements in terms of the originally given
  algebra basis generators. Therefore, a \GB{} is computed to
  eliminate the variables corresponding to the module basis elements
  in order to obtain polynomials relations among the originally given
  $\eta$-quotients. In total there are then 3 \GB{} computations
  whereas via \PathName{qetaih.spad} only one \GB{} computation is
  necessary.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This code is based on \cite{Radu:RamanujanKolberg:2015},
\cite{Hemmecke:DancingSambaRamanujan:2018}, and
\cite{Hemmecke+Radu:EtaRelations:2018}.

Here we describe a variant that are basically ideas of Silviu Radu.
Ralf Hemmecke contributed the idea of first eliminating the $M$
variables and then adding the $Y$ variables. See next chapter.

The algorithm \algo{AB} from \cite{Radu:RamanujanKolberg:2015} does
not easily allow to express the resulting module basis elements in
terms of the originally given algebra basis generators. Therefore, a
\GB{} is computed to eliminate the variables corresponding to the
module basis elements in order to obtain polynomials relations among
the originally given $\eta$-quotients.

The method that is implemented in \code{polynomialRelationsGenerators}
is basically that of \cite[Chapter~5]{Radu:RamanujanKolberg:2015}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

First of all for debugging.
)endif
OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
vPrint(x,y) ==> display77(hconcat(["-- "::Symbol::OF, x::Symbol::OF, _
                                   ":="::Symbol::OF, y::OF]$List(OF)))

)if LiterateDoc
%$
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
LSym ==> List Symbol

asP x ==> x pretend P

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Variant Radu}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif

)abbrev package QETAIR QEtaIdealRadu
QEtaIdealRadu(C, L): Exports == Implementation where
  C: EuclideanDomain
  L: Join(QEtaLaurentSeriesCategory C, QEtaGradedAlgebra C)
  Pol ==> Polynomial C
  LPol ==> List Pol
  Exports ==> QEtaIdealCategory(C, L)
  Implementation ==> add
    eliminate(dim: P, dim1: P, syms: LSym, mpgens: LPol): LPol ==
        --assert(#syms = dim)
        --assert(dim>dim1+1) -- dim1+1 variables are to eliminate
        E ==> Split3HomogeneousDirectProduct(dim, dim1, 1, N)
        groebner(mpgens, syms)$QEtaGroebner(C, E)

    --polynomialRelationsGenerators: List L -> Record(gens: LPol, zlen: N)
    --    ++ polynomialRelationsGenerators(m) returns a list of polynomials
    --    ++ in the indeterminates Z1,...,Zs, T, M1, M2, ..., Mk where k=#m
    --    ++ and s+1 is the number of elements in algebraBasis(m).
    --    ++ The value s is returned as the second element in the resulting
    --    ++ record.
    --    ++ The polynomials represent all relations between the original
    --    ++ input (expressed in terms of Mi indeterminates) and its
    --    ++ algebra basis expressed in terms of the indeterminates T and
    --    ++ Zj.
    polynomialRelationsGenerators(mgens: List L): Record(gens: LPol, zlen: N) ==
        algbasis: List L := algebraBasis(mgens)$QEtaRaduAlgorithms(C, L)
        -- algbasis are the generators of the $\mathbb{Q}[t]$-module.
        -- Note that $t = b_1$, the element with smallest qetaGrade.
        t: L := first algbasis
        zgens: List L := rest algbasis
        vPrint("zgens", zgens)
        -- Safety check
        for x in mgens | not member?(x, t, zgens) repeat
            error "polynomialRelations: nonmember"

        -- Express the generators of $E^\infty(m)$ in the module
        -- $\langle 1, zgens \rangle_{Q[t]}$.
        -- This correspond to formula (62) in
        -- \cite{Radu:RamanujanKolberg:2015}.
        import from QAuxiliaryTools
        msyms: LSym := indexedSymbols("M", #mgens)
        mpols: LPol := [(w := membershipWitness(x, t, zgens);_
            w.mult * m::Pol - w.pol) for m in msyms for x in mgens]
        vPrint("mpols", mpols)
        -- Now we express the relations for the products of
        -- the basis elements. This correspond to formula (61) in
        -- \cite{Radu:RamanujanKolberg:2015}.
        zsyms: LSym := indexedSymbols("Z", #zgens)
        tsym: Symbol := "T"::Symbol
        syms: LSym := concat(zsyms, cons(tsym, msyms))
        dim: P := asP(#syms) -- for later: number of variables

        pgens: LPol := empty() -- generators of the product relations
        czsyms: LSym := copy zsyms -- don't modify zsyms
        l: List L := zgens -- don't modify zgens
        while not empty? l repeat
            zi: L := first l
            Zi: Symbol := first czsyms
            for zj in l for Zj in czsyms repeat
                w: Record(pol:Pol,mult:C) := membershipWitness(zi*zj, t, zgens)
                p: Pol := (Zi::Pol * Zj::Pol)*w.mult - w.pol
                pgens := cons(p, pgens)
            l := rest l
            czsyms := rest czsyms

        mpgens: LPol := concat(mpols, pgens)

        -- Try to compute relations of the original generators.
        -- Set up a Groebner basis context where we can eliminate the
        -- variables $Z_i$ and $T$

        vPrint("mpgens", mpgens)

        -- We build in a safety check, ie., plug in the respective series
        -- and check whether the result is zero.
        fc(c: C): L == c::L
        PE ==> PolynomialEvaluation(C, L)
        vars: LSym := concat(msyms, cons(tsym, zsyms))
        vPrint("vars", vars)
        vals: List L := concat(mgens, algbasis)$List(L)
        vPrint("vals", vals)
        evalmpgens: List L := [eval(x, fc, vars, vals)$PE for x in mpgens]
        vPrint("evalmpgens", evalmpgens)
        vPrint("zerompgens", [zero? x for x in evalmpgens])

        [mpgens, #zgens]

    -- First we compute the relations generators. This gives a set of
    -- polynomials that have the following structure.
    -- 1) Mi - (fi1(T)*Z1 + ... + fis(T)*Zs)
    --    with 1<=i<=k=#mgens and s+1=#algebraBasis(mgens).
    -- 2) Zi*Zj - (gij1(T)*Z1 + ... + gijs(T)*Zs)
    --    with 1<=i<=j<=s.
    -- All fij and gijl are univariate polynomials in C[T].
    -- We want to eliminate all Zi and T from the system.
    -- Since T plays a special role and is sometimes equal to one of
    -- the Mi's, we use a block elimination ordering with 3 blocks.
    -- ((Z1,...,Z2), (T), (M1, ..., Mk)) where in each block the
    -- variables are ordered by a degrevlex order.
    -- relationsIdealGenerators: List L -> LPol
    --    ++ polynomialRelations(m) returns a degrevlex (wrt the
    --    ++ indeterminates M1, M2, ..., Mk where k=#m)
    --    ++ Groebner basis of the relations among the elements of m.
    --    ++ In other words, if p(M1,...,Mk) is in the result list, then
    --    ++ p(m.1, m.2, ..., m.k)=0.
    relationsIdealGenerators(mgens: List L): LPol ==
        import from QAuxiliaryTools
        r := polynomialRelationsGenerators mgens
        relgens: LPol := r.gens
        dim1: P := asP(r.zlen)
        msyms: LSym := indexedSymbols("M", #mgens)
        zsyms: LSym := indexedSymbols("Z", asP dim1)
        tsym: Symbol := "T"::Symbol
        syms: LSym := concat(zsyms, cons(tsym, msyms))
        dim: P := asP(#syms) -- for later: number of variables
        ztmrels: LPol := eliminate(dim, dim1, syms, relgens)
        vPrint("ztmrels", ztmrels)
        mrels: LPol := xPolynomials(ztmrels, char "M")$PolynomialTool(C)
        vPrint("mrels", mrels)
        vPrint("lenmrels", #mrels)
        vPrint("totaldegmrels", [totalDegree x for x in mrels])
        return mrels

)if LiterateDoc
%$
\bibliography{qeta}
\end{document}
)endif
