-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018, 2020-2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))
warnPrint(x,y) ==> tracePrint(x,y)
errorPrint(x,y) ==> tracePrint(x,y)

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Finding co-factors for sifted (generalized) Eta-Quotients}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
  The package \code{QEtaCofactorConditions} implements functions to
  help turning a sifted eta-quotient into a modular function by
  finding an appropriate cofactor.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Problem}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We try to find all missing parts to find a Ramanujan-Kolberg relation
as defined in \cite[p.~227]{Radu_RamanujanKolberg_2015} and also for
\cite[Sect.~10]{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.

Assume that we are given a series
\begin{gather*}
  \sum_{n=0}^\infty a(n) q^n
  =
  \prod_{\delta|M}\prod_{n=0}^\infty(1-q^{\delta n})^{r_\delta}
\end{gather*}
and want to express $\sum_{n=0}^\infty a(mn+t) q^n$ where $m$ and $M$
are a positive integers with $m|M$, $r\in R(M)$, and
$t\in\Set{0,\ldots,m-1}$ as a $\setQ$-linear combination of
eta-quotients and (maybe) an appropriate power of
$q^{1/24}=\unityPowerTau{\frac{1}{24}}=\unityPower{\frac{\tau}{24}}$.

For mathematical background see \PathName{qeta.tex}.

As an extensionn of the above problem, we assume that
\begin{gather*}
  \sum_{n=0}^\infty a(n) q^n
  =
  g_{\bar{r}}(\tau)
\end{gather*}
is given by \ref{eq:g_rbar(tau)}.

By multiplication with a prefactor, we want to make
$\sum_{n=0}^\infty a(mn+t) q^n$ into a modular function for
$\Gamma_0(N)$ or $\Gamma_1(N)$ (for a suitable positive number $N$).
In case of $\Gamma_0(N)$, the sum might have to be multiplied with
similar sums in order to take care of the fact that by an arbitrary
transformation with a matrix from $\Gamma_0(N)$ we might come to a sum
with a different $t$.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

PP ==> PositiveInteger
NN ==> NonNegativeInteger
ZZ ==> Integer
QQ ==> Fraction ZZ
VZZ ==> Vector ZZ
MZZ ==> Matrix ZZ -- consider only 2x2 matricies
LPP ==> List PP
LZZ ==> List ZZ

SPEC ==> QEtaSpecification

asNN x ==> x pretend NN
asPP x ==> x pretend PP

-- Note that in the following correspondence between programming variables
-- and notation in the mathematical description in qetaq.tex.
-- Variable   <--> mathematical notation
-- m               m
-- mm              M
-- nn              N
-- sigmaInfty      \sigmainfty{r}
-- kappa(m)        \kappa

)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaCofactorSpace}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev package QETACOFC QEtaCofactorConditions
QEtaCofactorConditions: Exports == Implementation where
  Exports ==> with
    conditionPrimeDivisors?: (PP, PP) -> Boolean
      ++ conditionExponentSum?(nn, m) returns true if every prime
      ++ divisor of m is also a divisor of nn. This corresponds to
      ++ (28) in \cite{Radu_RamanujanKolberg_2015} and to
      ++ \eqref{eq:p|m=>p|N} in qeta.tex.

    conditionMmN?: (PP, SPEC, PP) -> Boolean
      ++ conditionMmN(nn, rspec, m) returns true if every divisor d of
      ++ mm=level(rspec) (for which r_d is non-zero) is also a divisor
      ++ of m*N where r=pureExponents(rspec). This corresponds to
      ++ condition (4.7) in \cite{Radu_PhD_2010} and in equation
      ++ \eqref{eq:delta|M=>delta|mN} in qeta.tex.

    conditionSumExponentsPure?: (PP, SPEC, PP) -> Boolean
      ++ conditionSumExponentsPure?(nn, rspec, m) returns true if the
      ++ sum of the entries of pureExponents(rspec) multiplied by
      ++ kappa(m)*nn is divisible by 8. This corresponds to
      ++ \eqref{eq:sum-r} in qeta.tex second condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35).

    conditionSumExponentsProperGeneralized?: (PP, SPEC, PP) -> Boolean
      ++ conditionSumExponentsProperGeneralized?(nn, rspec, m) returns
      ++ true if the sum of the entries of rspec corresponding to the
      ++ exponents of properGeneralizedParts(rspec) multiplied by
      ++ kappa(m)*nn is divisible by 4. This corresponds to condition
      ++ 4 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}. See
      ++ \eqref{eq:conditionSumExponentsProperGeneralized?(nn,rspec,m)}.

    conditionSigma0Pure?: (PP, SPEC, PP) -> Boolean
      ++ conditionSigma0?(nn, rspec, m) returns true if
      ++ (kappa(m)*m*nn^2/mm)*sigma0(rspec) = 0 mod 24. This
      ++ corresponds to \eqref{eq:sv24} and
      ++ \eqref{{eq:conditionSigma0Pure?(nn,mm,r,m)} in qeta.tex and
      ++ to the first condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35).

    conditionSigma0ProperGeneralized?: (PP, SPEC, PP) -> Boolean
      ++ conditionSigma0?(nn, rspec, m) returns true if
      ++ (kappa(m)*m*nn^2) *
      ++ sum(e/d for [d,g,e] in properGeneralizedParts x) = 0 mod 12.
      ++ This corresponds to condition 5 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}. See
      ++ \eqref{eq:conditionSigma0ProperGeneralized?(nn,rspec,m)}.

    conditionGSigma0?: (PP, SPEC, PP) -> Boolean
      ++ conditionGSigma0?(nn, rspec, m) returns true if
      ++ (kappa(m)*nn)*sum(g*e/d for [d,g,e] in properGeneralizedParts
      ++ rspec) = 0 mod 2. This corresponds to condition 3 on page 37
      ++ of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}. See
      ++ \eqref{eq:conditionGSigma0?(nn,rspec,m)}

    conditionNDivisor?: (PP, SPEC, PP, NN) -> Boolean
      ++ conditionNDivisor?(nn, rspec, m, t) returns true if the
      ++ expression (24*m*mm)/gcd(mm*kappa(m)*alpha, 24*m*mm) is a
      ++ divisor of nn where alpha=sigmaInfinity(rspec) + 24*t. This
      ++ corresponds to condition 8 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019} and
      ++ to \eqref{eq:w|N} and
      ++ \eqref{eq:conditionNDivosor?(nn,rspec,m,t)} in qeta.tex and
      ++ to the third condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35).

    conditionEvenMultiplier?: (PP, SPEC, PP) -> Boolean
      ++ conditionEvenMultiplier?(nn, rspec, m) returns true if
      ++ various divisibility conditions are fulfilled. This
      ++ corresponds to \eqref{eq:even-m} and
      ++ \eqref{eq:conditionEvenMultiplier?(nn,rspec,m)} in qeta.tex
      ++ fourth condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35). Same as
      ++ condition 9 on page 37 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.

    conditionOrbitLength?: (PP, SPEC, PP, NN) -> Boolean
      ++ conditionOrbitLength?(nn, rspec, m, t) returns true if the
      ++ conditions for an orbit of length 1 are satisfied. This
      ++ corresponds to condition 7 on page 6 of Chapter 2 and to
      ++ condition 10 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.

    chiExponent: (SPEC, PP, NN, List NN) -> ZZ
      ++ chiExponent(rspec,m,t,orb) computes e such that
      ++ $\exp(2\pi i e / 24) = \chi_{r,m,t)$ where r is given
      ++ by the pure eta-quotient specification rspec.

  Implementation ==> add
    fUnion ==> Union("nil", "sqfr", "irred", "prime")
    FL ==> List Record(flag: fUnion, factor: ZZ, exponent: NN)
    DIVISIBLEBY?(k, z) ==> zero?(z rem k)

    -- auxiliary (local) functions

    -- local
    -- \cite[Def.~35]{Radu_RamanujanKolberg_2015}
    kappa(m: PP): PP == -- gcd(1-m^2, 24)
        (even? m => 1; 8) * (DIVISIBLEBY?(3, m) => 1; 3)

    chiExponent(rspec: SPEC, m: PP, t: NN, orb: List NN): ZZ ==
        sigmaInfty := numer sigmaInfinity rspec
        x: ZZ := 24*reduce(_+, orb, 0) + sigmaInfty * #orb
        positiveRemainder((1-m^2)*((x exquo m)::ZZ), 24)

    conditionPrimeDivisors?(nn: PP, m: PP): Boolean ==
        fm: Factored ZZ := factor m
        mfl: FL := factorList fm
        nnprimes := [f.factor for f in factorList factor nn]
        for f in mfl repeat
            not member?(f.factor, nnprimes) => return false
        return true

    conditionMmN?(nn: PP, rspec: SPEC, m: PP): Boolean ==
        divs: LZZ := divisors(m*nn)$IntegerNumberTheoryFunctions
        for l in pureParts rspec | not member?(specDelta l, divs) repeat
            return false
        return true

    -- CDZ condition 6 (p. 37)
    conditionSumExponentsPure?(nn: PP, rspec: SPEC, m: PP): Boolean ==
        rsum: ZZ := 0
        for l in pureParts rspec repeat rsum := rsum + specExponent l
        DIVISIBLEBY?(8, kappa(m)*nn*rsum)

    -- CDZ condition 4 (p. 37)
    conditionSumExponentsProperGeneralized?(
      nn: PP, rspec: SPEC, m: PP): Boolean ==
        rsum: ZZ := 0
        for l in pureParts rspec repeat rsum := rsum + specExponent l
        DIVISIBLEBY?(8, kappa(m)*nn*rsum)

    -- CDZ condition 7 (p. 37)
    conditionSigma0Pure?(nn: PP, rspec: SPEC, m: PP): Boolean ==
        mm: PP := level rspec
        rv: ZZ := sigma0Pure rspec
        h: ZZ := (nn exquo mm)::ZZ
        DIVISIBLEBY?(24, kappa(m)*m*nn*h*rv)

    -- CDZ condition 5 (p. 37)
    conditionSigma0ProperGeneralized?(nn: PP, rspec: SPEC, m: PP): Boolean ==
        mm: PP := level rspec
        rv: ZZ := sigma0ProperGeneralized rspec
        h: ZZ := (nn exquo mm)::ZZ
        DIVISIBLEBY?(12, kappa(m)*m*nn*h*rv)

    -- CDZ condition 3 (p. 37)
    conditionGSigma0?(nn: PP, rspec: SPEC, m: PP): Boolean ==
        rv: QQ := 0
        for l in properGeneralizedParts rspec repeat
            d := specDelta l; g := specSubindex l; e := specExponent l
            rv := rv + e*g/d
        x: QQ := kappa(m)*nn*rv
        one? denom x and even? numer x

    -- local
    alphaAux(rspec: SPEC, t: NN): QQ == (24*t)::QQ + sigmaInfinity rspec

    -- CDZ condition 8 (p. 37)
    conditionNDivisor?(nn: PP, rspec: SPEC, m: PP,t: NN): Boolean ==
        mm: PP := level rspec
        a: ZZ := kappa(m)*numer(mm*alphaAux(rspec, t))
        n: ZZ := 24*m*mm
        w: ZZ := (n exquo gcd(a, n)) :: ZZ
        DIVISIBLEBY?(w, nn)

    -- CDZ condition 9 (p. 37)
    conditionEvenMultiplier?(nn: PP, rspec: SPEC, m: PP): Boolean ==
        odd? m => true
        u: ZZ := 1
        for l in pureParts rspec repeat -- l = [delta,rdelta]
            u := u * specDelta(l)^asPP(abs(specExponent l))
        e: ZZ := 0
        while even? u repeat
            e := e + 1
            u := shift(u, -1)
        b1: Boolean := DIVISIBLEBY?(4, kappa(m)*nn) and DIVISIBLEBY?(8, nn*e)
        b2: Boolean := even? e and DIVISIBLEBY?(8, nn*(u-1))
        return (b1 or b2)

    -- CDZ condition 10 (p. 38)
    conditionOrbitLength?(nn: PP, rspec: SPEC, m: PP, t: NN): Boolean ==
        a: QQ := alphaAux(rspec, t)
        n: PP := 24*m*level(rspec)
        for i in 0.. (n quo nn) repeat
            j := nn*i+1 -- (j = 1 (mod nn)) (j^2-1 is in S_{n})
            one? gcd(j, n) => -- then 24|(j^2-1)
               x: QQ := ((j^2 - 1)/24) * a
               not one? denom x => error "x should be integral"
               not zero?(numer(x) rem m) => return false
        return true



)if LiterateDoc
\end{document}
)endif
