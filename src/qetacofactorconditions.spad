-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018, 2020-2021  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))
warnPrint(x,y) ==> tracePrint(x,y)
errorPrint(x,y) ==> tracePrint(x,y)

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Finding co-factors for sifted (generalized) Eta-Quotients}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
  The package \code{QEtaCofactorConditions} implements functions to
  help turning a sifted eta-quotient into a modular function by
  finding an appropriate cofactor.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Problem}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We try to find all missing parts to find a Ramanujan-Kolberg relation
as defined in \cite[p.~227]{Radu_RamanujanKolberg_2015} and also for
\cite[Sect.~10]{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.

Assume that we are given a series
\begin{gather*}
  \sum_{n=0}^\infty a(n) q^n
  =
  \prod_{\delta|M}\prod_{n=0}^\infty(1-q^{\delta n})^{r_\delta}
\end{gather*}
and want to express $\sum_{n=0}^\infty a(mn+t) q^n$ where $m$ and $M$
are a positive integers with $m|M$, $r\in R(M)$, and
$t\in\Set{0,\ldots,m-1}$ as a $\setQ$-linear combination of
eta-quotients and (maybe) an appropriate power of
$q^{1/24}=\unityPowerTau{\frac{1}{24}}=\unityPower{\frac{\tau}{24}}$.

For mathematical background see \PathName{qeta.tex}.

As an extensionn of the above problem, we assume that
\begin{gather*}
  \sum_{n=0}^\infty a(n) q^n
  =
  g_{\bar{r}}(\tau)
\end{gather*}
is given by \ref{eq:g_rbar(tau)}.

By multiplication with a prefactor, we want to make
$\sum_{n=0}^\infty a(mn+t) q^n$ into a modular function for
$\Gamma_0(N)$ or $\Gamma_1(N)$ (for a suitable positive number $N$).
In case of $\Gamma_0(N)$, the sum might have to be multiplied with
similar sums in order to take care of the fact that by an arbitrary
transformation with a matrix from $\Gamma_0(N)$ we might come to a sum
with a different $t$.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
VZ ==> Vector Z
MZ ==> Matrix Z -- consider only 2x2 matricies
LP ==> List P
LZ ==> List Z
QETAAUX ==> QEtaAuxiliaryPackage
SPEC ==> QEtaSpecification

asN x ==> x pretend N
asP x ==> x pretend P

-- Note that in the following correspondence between programming variables
-- and notation in the mathematical description in qetaq.tex.
-- Variable   <--> mathematical notation
-- m               m
-- mm              M
-- nn              N
-- sigmaInfty      \sigmainfty{r}
-- kappa(m)        \kappa

)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaCofactorSpace}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev package QETACOFC QEtaCofactorConditions
QEtaCofactorConditions: Exports == Implementation where
  Exports ==> with
    conditionPrimeDivisors?: (P, P) -> Boolean
      ++ conditionExponentSum?(nn, m) returns true if every prime
      ++ divisor of m is also a divisor of nn. This corresponds to
      ++ (28) in \cite{Radu_RamanujanKolberg_2015} and to
      ++ \eqref{eq:p|m=>p|N} in qeta.tex.

    conditionMmN?: (P, SPEC, P) -> Boolean
      ++ conditionMmN(nn, rspec, m) returns true if every divisor d of
      ++ mm=level(rspec) (for which r_d is non-zero) is also a divisor
      ++ of m*N where r=pureExponents(rspec). This corresponds to
      ++ condition (4.7) in \cite{Radu_PhD_2010} and in equation
      ++ \eqref{eq:delta|M=>delta|mN} in qeta.tex.

    conditionSumExponentsPure?: (P, SPEC, P) -> Boolean
      ++ conditionSumExponentsPure?(nn, rspec, m) returns true if the
      ++ sum of the entries of pureExponents(rspec) multiplied by
      ++ kappa(m)*nn is divisible by 8. This corresponds to
      ++ \eqref{eq:sum-r} in qeta.tex second condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35).

    conditionSumExponentsProperGeneralized?: (P, SPEC, P) -> Boolean
      ++ conditionSumExponentsProperGeneralized?(nn, rspec, m) returns
      ++ true if the sum of the entries of rspec corresponding to the
      ++ exponents of properGeneralizedPart(rspec) multiplied by
      ++ kappa(m)*nn is divisible by 4. This corresponds to condition
      ++ 4 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}. See
      ++ \eqref{eq:conditionSumExponentsProperGeneralized?(nn,rspec,m)}.

    conditionSigma0Pure?: (P, SPEC, P) -> Boolean
      ++ conditionSigma0?(nn, rspec, m) returns true if
      ++ (kappa(m)*m*nn^2/mm)*sigma0(rspec) = 0 mod 24. This
      ++ corresponds to \eqref{eq:sv24} and
      ++ \eqref{{eq:conditionSigma0Pure?(nn,mm,r,m)} in qeta.tex and
      ++ to the first condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35).

    conditionSigma0ProperGeneralized?: (P, SPEC, P) -> Boolean
      ++ conditionSigma0?(nn, rspec, m) returns true if
      ++ (kappa(m)*m*nn^2) *
      ++ sum(e/d for [d,g,e] in properGeneralizedPart x) = 0 mod 12.
      ++ This corresponds to condition 5 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}. See
      ++ \eqref{eq:conditionSigma0ProperGeneralized?(nn,rspec,m)}.

    conditionGSigma0?: (P, SPEC, P) -> Boolean
      ++ conditionGSigma0?(nn, rspec, m) returns true if
      ++ (kappa(m)*nn)*sum(g*e/d for [d,g,e] in properGeneralizedPart
      ++ rspec) = 0 mod 2. This corresponds to condition 3 on page 37
      ++ of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}. See
      ++ \eqref{eq:conditionGSigma0?(nn,rspec,m)}

    conditionNDivisor?: (P, SPEC, P, N) -> Boolean
      ++ conditionNDivisor?(nn, rspec, m, t) returns true if the
      ++ expression (24*m*mm)/gcd(mm*kappa(m)*alpha, 24*m*mm) is a
      ++ divisor of nn where alpha=sigmaInfinity(rspec) + 24*t. This
      ++ corresponds to condition 8 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019} and
      ++ to \eqref{eq:w|N} and
      ++ \eqref{eq:conditionNDivosor?(nn,rspec,m,t)} in qeta.tex and
      ++ to the third condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35).

    conditionEvenMultiplier?: (P, SPEC, P) -> Boolean
      ++ conditionEvenMultiplier?(nn, rspec, m) returns true if
      ++ various divisibility conditions are fulfilled. This
      ++ corresponds to \eqref{eq:even-m} and
      ++ \eqref{eq:conditionEvenMultiplier?(nn,rspec,m)} in qeta.tex
      ++ fourth condition on page~241 of
      ++ \cite{Radu_RamanujanKolberg_2015} (Definition 35). Same as
      ++ condition 9 on page 37 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.

    conditionOrbitLength?: (P, SPEC, P, N) -> Boolean
      ++ conditionOrbitLength?(nn, rspec, m, t) returns true if the
      ++ conditions for an orbit of length 1 are satisfied. This
      ++ corresponds to condition 7 on page 6 of Chapter 2 and to
      ++ condition 10 on page 37 of Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.

    conditionCoEtaQuotientGamma0?: (P, SPEC, P, N) -> Boolean
      ++ conditionCoEtaQuotientGamma0?(nn, rspec, m, t) returns
      ++ true iff all the conditions for the parameters are fulfilled.
      ++ This checks whether (nn, mm, r, m, t) is in \Delta^* as
      ++ defined in
      ++ Definition~\ref{def:condition-co-eta-quotient-gamma0} in
      ++ qeta.tex and in Definition 35 of
      ++ \cite{Radu_RamanujanKolberg_2015}

    conditionCoEtaQuotientGamma1?: (P, SPEC, P, N) -> Boolean
      ++ conditionCoEtaQuotientGamma1?(nn, rspec, m, t) returns true
      ++ iff the conditions in Chapter 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019} just
      ++ before Theorem 10.1 are fulfilled. See
      ++ Definition~\ref{def:condition-co-eta-quotient-gamma1}. These
      ++ are conditions for the existence of a product of eta- and
      ++ generalized eta-quotient to exist as a cofactor for a
      ++ disection of such a quotient. The parameter rbar specifies
      ++ the generalized eta-quotient via
      ++ generalizedEtaQuotient(rbar). These are slight modifications
      ++ of conditions appearing in Definition 35 of
      ++ \cite{Radu_RamanujanKolberg_2015} in case the defining
      ++ eta-quotient is not a generalized one.

    candidateLevelsCoEtaQuotientGamma0: (SPEC, P, N) -> List P
      ++ candidateLevelsCoEtaQuotientGamma0(rspec,m,t) returns an
      ++ ascendingly sorted list of the nn up to 24*m*level(rspec)
      ++ such that conditionCoEtaQuotientGamma0?(nn,rspec,m,t) is
      ++ true, i.e. that (nn, mm, r, m, t) is an element of \Delta^*
      ++ as defined in
      ++ Definition~\ref{def:condition-co-eta-quotient-gamma0}.
    minimalLevelCoEtaQuotientGamma0: (SPEC, P, N) -> P
      ++ minimalLevelCoEtaQuotientGamma0(rspec, m, t) returns the
      ++ smallest nn of candidateLevalsCoEtaQuotientGamma0(rspec,m,t).
      ++ Note that one might have to use a bigger nn, because the
      ++ level might still be too small to find a cofactor an example
      ++ is for rspec=[[1,-1],[7,1]], m=9, t=5 where this function
      ++ returns 21, but one would have to use 42.
    candidateLevelsCoEtaQuotientGamma1: (SPEC, P, N) -> List P
      ++ minimalLevelCoEtaQuotientGamma1(rspec,m,t) returns an
      ++ ascendingly sorted list of the nn up to 24*m*level(rspec)
      ++ such that conditionCoEtaQuotientGamma1?(nn,rspec,m,t) is
      ++ true, i.e. that (nn,mm,rbar m,t) fulfills the 10 conditions
      ++ as defined in Section 10 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}. The
      ++ parameter rbar specifies the generalized eta-quotient via
      ++ generalizedEtaQuotient(rbar). In case rspec specifies a pure
      ++ eta-quotient in level mm given by the exponent vector r, the
      ++ function returns
      ++ candidateLevelsCoEtaQuotientGamma1(mm,r,m,t).
    minimalLevelCoEtaQuotientGamma1: (SPEC, P, N) -> P
      ++ minimalLevelCoEtaQuotientGamma1(rspec,m,t) returns the
      ++ smallest nn of
      ++ candidateLevelsCoEtaQuotientGamma1(nn,rspec,m,t).

    modularGamma0?: (SPEC, SPEC, P, N) -> Boolean
      ++ modularGamma0?(sspec, rspec, m, t) returns true iff all
      ++ the conditions of Theorem~\ref{thm:RaduConditions} are
      ++ fulfilled.
      ++ Compare with modularGamma0? from QEtaAuxiliaryPackage.

    modularGamma1?: (SPEC, SPEC, P, N) -> Boolean
      ++ modularGamma1?(sspec, rspec, m, t) returns true iff all the
      ++ conditions of Theorem~10.1 of
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.
      ++ are fulfilled. Here the parameter sspec stands for the exponents
      ++ $a_\delta$ and $a_{\delta,g}$.
      ++ See also Theorem~\ref{thm:condition-co-eta-quotient-gamma1}.

    modularGamma0Orbit: (SPEC, P, N) -> List N
      ++ modularGamma0Orbit(rspec, m, t) computes the elements of
      ++ $\modularOrbit{r,m,t)$ as defined in qeta.tex,
      ++ \cite[Def.~42]{Radu_RamanujanKolberg_2015} and
      ++ \cite[Lemma 4.35]{Radu_PhD_2010} were r is pureExponents(rspec)
      ++ and rspec is expected to specify a pure eta-quotient.

    chiExponent: (SPEC, P, N) -> Z
      ++ chiExponent(rspec, m, t) computes e such that
      ++ $\exp(2\pi i e / 24) = \chi_{r,m,t)$ where r is given
      ++ by the pure eta-quotient specification rspec.

  Implementation ==> add
    fUnion ==> Union("nil", "sqfr", "irred", "prime")
    FL ==> List Record(flag: fUnion, factor: Z, exponent: N)
    DIVISIBLEBY?(k, z) ==> zero?(z rem k)

    -- auxiliary (local) functions

    -- kappa: P -> P
    --   ++ kappa(m) computes gcd(1-m^2,24).
    kappa(m: P): P == -- gcd(1-m^2, 24)
        ++ \cite[Def.~35]{Radu_RamanujanKolberg_2015}
        (even? m => 1; 8) * (DIVISIBLEBY?(3, m) => 1; 3)

    odotBar(a2: Z, sigmaInfty: Z, m: P, t: N): N ==
        --assert(one? positiveRemainder(a2, 24))
        -- \cite[Def.~41]{Radu_RamanujanKolberg_2015}
        z: Z := positiveRemainder(t*a2+(((a2-1) exquo 24)::Z)*sigmaInfty, m)
        asN z

    -- Return true iff \eqref{eq:Radu-productsquare} holds.
    checkSquare?(sspec: SPEC, rspec: SPEC, m: P, orbitSize: Z): Boolean ==
        --assert(pure? sspec)
        --assert(pure? rspec)
        nn: P := level sspec
        fl: FL := factorList factor nn
        -- By \eqref{eq:p|m=>p|N} and \eqref{eq:delta|M=>delta|mN}, it is
        -- enough to consider all prime divisors of N.
        for fe in fl repeat -- do for all primes dividing nn
            p: P := asP(fe.factor) -- extract prime factor
            -- Determine whether an even power of p divides
            -- \prod_{\delta|N}\delta^rdelta.
            e1: Z := 0
            for l in purePart sspec | odd?(l.2) repeat -- exponent is odd
                e1 := e1 + primePower(asP(l.1), p)$QETAAUX -- l.1 = delta
            e2: Z := 0
            if odd? orbitSize then
                -- check 2nd prod in eq:Radu-productsquare
                em: N := primePower(m, p)
                -- for all divisors of mm > 1
                for l in purePart rspec | odd?(l.2) repeat -- exponent is odd
                    -- mod 2, only odd sdelta is relevant.
                    e2 := e2 + em + primePower(asP(l.1), p) -- l.1=delta
            if odd?(e1 + e2) then return false
        return true

    -- local function
    -- return true if for some a in
    -- \cite[Thm~10.1(4)]{ChenDuZhao_FindingModularFunctionsRamanujan_2019}
    -- or in \eqref{eq:CDZ-productsquare}
    -- the condition is true.
    checkSquare1?(sspec: SPEC, rspec: SPEC, m: P, a: Z): Boolean ==
        --assert(one? gcd(a, d)) for every divisor of nn (and of mm).
        import from IntegerNumberTheoryFunctions
        z: Z := 1
        for l in purePart sspec | odd? l.2 repeat z := z * jacobi(l.1, a)
        for l in purePart rspec | odd? l.2 repeat z := z * jacobi(m*l.1, a)
        zero? z => error "checkSquare1?: zero jacobi symbol"

        expo: Q := 0
        for l in properGeneralizedPart rspec repeat --assert(#l=3) -- l=[d,g,e]
            expo := expo + (l.2/l.1 - 1/2) * l.3 -- (g/d-1/2)*e
        for l in properGeneralizedPart sspec repeat --assert(#l=3) -- l=[d,g,e]
            expo := expo + (l.2/l.1 - 1/2) * l.3 -- (g/d-1/2)*e
        expo := (a-1) * expo -- this should give an integer
        not one? denom expo => error "checkSquare1?: expo not integral"

        (z > 0 and even? numer expo) or (z < 0 and odd? numer expo)

    -- exported functions

    -- The following function computes \modularOrbit{r, m, t} with the
    -- optimization given by Radu in \cite[Lemma 4.35]{Radu_PhD_2010},
    -- i.e., we do not need to check all entries of \setS_{24m}, but
    -- only those that are not equivalent mod w.
    modularGamma0Orbit(rspec: SPEC, m: P, t: N): List N ==
        not pure? rspec => error "orbit computation only for pure eta-quotients"
        --assert(one?(denom sigmaInfinity rspec)), because it is a pure EQ
        sigmaInfty := numer sigmaInfinity rspec
        m24: Z := 24*m
        g := gcd(kappa(m)*(24*t + sigmaInfty), m24)
        w: P := asP((m24 exquo g)::Z)
        result: List N := empty()
        for a in 0..w-1 | one? gcd(a, w) repeat
            y := a
            while y < m24 and not one? gcd(y, m24) repeat y := y + w
            -- Note that m24=g*w and gcd(a + k*w, m24) =
            -- gcd(a+k*w,g*w) = 1 for k chosen to be the product of
            -- all prime divisors of g that do not divide a and do not
            -- divide w. In other words, the above while loop also
            -- terminates without the "y < m24" condition.
            e := odotBar(positiveRemainder(y^2, m24), sigmaInfty, m, t)
            if not member?(e, result) then result := cons(e, result)
        result

    chiExponent(rspec: SPEC, m: P, t: N): Z ==
        orb := modularGamma0Orbit(rspec, m, t)
        sigmaInfty := numer sigmaInfinity rspec
        x: Z := 24*reduce(_+, orb, 0) + sigmaInfty * #orb
        positiveRemainder((1-m^2)*((x exquo m)::Z), 24)

    conditionPrimeDivisors?(nn: P, m: P): Boolean ==
        fm: Factored Z := factor m
        mfl: FL := factorList fm
        nnprimes := [f.factor for f in factorList factor nn]
        for f in mfl repeat
            not member?(f.factor, nnprimes) => return false
        return true

    conditionMmN?(nn: P, rspec: SPEC, m: P): Boolean ==
        divs: LZ := divisors(m*nn)$IntegerNumberTheoryFunctions
        for l in purePart rspec | not member?(l.1, divs) repeat return false
        return true

    -- CDZ condition 6 (p. 37)
    conditionSumExponentsPure?(nn: P, rspec: SPEC, m: P): Boolean ==
        rsum: Z := 0
        for l in purePart rspec repeat rsum := rsum + l.2
        DIVISIBLEBY?(8, kappa(m)*nn*rsum)

    -- CDZ condition 4 (p. 37)
    conditionSumExponentsProperGeneralized?(
      nn: P, rspec: SPEC, m: P): Boolean ==
        rsum: Z := 0
        for l in purePart rspec repeat rsum := rsum + l.2
        DIVISIBLEBY?(8, kappa(m)*nn*rsum)

    -- CDZ condition 7 (p. 37)
    conditionSigma0Pure?(nn: P, rspec: SPEC, m: P): Boolean ==
        mm: P := level rspec
        rv: Z := sigma0Pure rspec
        h: Z := (nn exquo mm)::Z
        DIVISIBLEBY?(24, kappa(m)*m*nn*h*rv)

    -- CDZ condition 5 (p. 37)
    conditionSigma0ProperGeneralized?(nn: P, rspec: SPEC, m: P): Boolean ==
        mm: P := level rspec
        rv: Z := sigma0ProperGeneralized rspec
        h: Z := (nn exquo mm)::Z
        DIVISIBLEBY?(12, kappa(m)*m*nn*h*rv)

    -- CDZ condition 3 (p. 37)
    conditionGSigma0?(nn: P, rspec: SPEC, m: P): Boolean ==
        rv: Q := 0
        for l in properGeneralizedPart rspec repeat rv := rv + l.2*l.3/l.1
        x: Q := kappa(m)*nn*rv
        one? denom x and even? numer x

    -- local
    alphaAux(rspec: SPEC, t: N): Q == (24*t)::Q + sigmaInfinity rspec

    -- CDZ condition 8 (p. 37)
    conditionNDivisor?(nn: P, rspec: SPEC, m: P,t: N): Boolean ==
        mm: P := level rspec
        a: Z := kappa(m)*numer(mm*alphaAux(rspec, t))
        n: Z := 24*m*mm
        w: Z := (n exquo gcd(a, n)) :: Z
        DIVISIBLEBY?(w, nn)

    -- CDZ condition 9 (p. 37)
    conditionEvenMultiplier?(nn: P, rspec: SPEC, m: P): Boolean ==
        odd? m => true
        u: Z := 1
        for l in purePart rspec repeat -- l = [delta,rdelta]
            u := u * l(1)^asP(abs(l.2))
        e: Z := 0
        while even? u repeat
            e := e + 1
            u := shift(u, -1)
        b1: Boolean := DIVISIBLEBY?(4, kappa(m)*nn) and DIVISIBLEBY?(8, nn*e)
        b2: Boolean := even? e and DIVISIBLEBY?(8, nn*(u-1))
        return (b1 or b2)

    -- CDZ condition 10 (p. 38)
    conditionOrbitLength?(nn: P, rspec: SPEC, m: P, t: N): Boolean ==
        a: Q := alphaAux(rspec, t)
        n: P := 24*m*level(rspec)
        for i in 0.. (n quo nn) repeat
            j := nn*i+1 -- (j = 1 (mod nn)) (j^2-1 is in S_{n})
            one? gcd(j, n) => -- then 24|(j^2-1)
               x: Q := ((j^2 - 1)/24) * a
               not one? denom x => error "x should be integral"
               not zero?(numer(x) rem m) => return false
        return true

    conditionCoEtaQuotientGamma0?(nn: P, rspec: SPEC, m: P, t: N): Boolean ==
        not pure? rspec => false
        t >= m => error "0<=t<m is a necessary condition"
        not conditionMmN?(nn, rspec, m) => false -- \eqref{eq:delta|M=>delta|mN}
        not conditionPrimeDivisors?(nn, m) => false -- \eqref{eq:p|m=>p|N}
        not conditionSumExponentsPure?(nn, rspec, m) => false --\eqref{eq:sum-r}
        not conditionSigma0Pure?(nn, rspec, m) => false -- \eqref{eq:sv24}
        not conditionNDivisor?(nn, rspec, m, t) => false -- \eqref{eq:w|N}
        conditionEvenMultiplier?(nn, rspec, m) -- \eqref{eq:even-m}

    -- condition for the disection of mixed-generalized eta-quotients
    conditionCoEtaQuotientGamma1?(nn: P, rspec: SPEC, m: P, t: N): Boolean ==
        t >= m => error "0<=t<m is a necessary condition"
        mm: P := level rspec

        -- CDZ(1), condition 1 (p. 6), M|N,
        not zero?(nn rem mm) => false

        -- CDZ(2), condition 2, p. 6)
        -- qeta.tex {eq:p|m=>p|N}
        not conditionPrimeDivisors?(nn, m) => false

        -- CDZ(6), condition 3 (p. 6)
        -- qeta.tex {eq:sum-r},
        --          {eq:conditionSumPureExponents?(nn,rspec,m)
        not conditionSumExponentsPure?(nn, rspec, m) => false

        -- CDZ(4)
        -- qeta.tex {eq:conditionSumExponentsProperGeneralized?(nn,rspec,m)}
        not conditionSumExponentsProperGeneralized?(nn, rspec, m) => false

        -- CDZ(7)
        -- qeta.tex {eq:rv24}, {eq:conditionSigma0Pure?(nn,rspec,m)}
        not conditionSigma0Pure?(nn, rspec, m) => false

        -- CDZ(5)
        -- qeta.tex {eq:conditionSigma0ProperGeneralized?(nn,rspec,m)}
        not conditionSigma0ProperGeneralized?(nn, rspec, m) => false

        -- CDZ(3)
        -- qeta.tex {eq:conditionGSigma0?(nn,rspec,m)}
        not conditionGSigma0?(nn, rspec, m) => false

        -- CDZ(8)
        -- qeta.tex {eq:w|N}, {eq:conditionNDivisor?(nn,rspec,m,t)}
        not conditionNDivisor?(nn, rspec, m, t) => false

        -- CDZ(9)
        -- qeta.tex {eq:even-m}, {eq:conditionEvenMultiplier?(nn,rspec,m)}
        not conditionEvenMultiplier?(nn, rspec, m) => false

        -- CDZ(10)
        -- qeta.tex {eq:conditionOrbitLength?(nn,rspec,m,t)}
        conditionOrbitLength?(nn, rspec, m, t)

-------------------------------------------------------------------
-- use of conditions from above
-------------------------------------------------------------------

    candidateLevelsCoEtaQuotientGamma0(rspec: SPEC, m: P, t: N): List P ==
        [asP nn for nn in 1..24*m*level(rspec) | _
            conditionCoEtaQuotientGamma0?(asP nn, rspec, m, t)]

    minimalLevelCoEtaQuotientGamma0(rspec: SPEC, m: P, t: N): P ==
        for nn in 1..24*m*level(rspec) repeat
            conditionCoEtaQuotientGamma0?(asP nn, rspec, m, t) => return asP nn
        error "minimalLevelCoEtaQuotientGamma0: should not be here"

    candidateLevelsCoEtaQuotientGamma1(rspec: SPEC, m: P, t: N): List P ==
        [asP nn for nn in 1..24*m*level(rspec) | _
            conditionCoEtaQuotientGamma1?(asP nn, rspec, m, t)]

    minimalLevelCoEtaQuotientGamma1(rspec: SPEC, m: P, t: N): P ==
        for nn in 1..24*m*level(rspec) repeat
            conditionCoEtaQuotientGamma1?(asP nn, rspec, m, t) => return asP nn
        error "minimalLevelCoEtaQuotientGamma1: should not be here"

    modularGamma0?(sspec: SPEC, rspec: SPEC, m: P, t: N): Boolean ==
        not pure? sspec => false
        nn: P := level sspec; s: LZ := pureExponents sspec
        mm: P := level rspec; r: LZ := pureExponents rspec

        not conditionCoEtaQuotientGamma0?(nn, rspec, m, t) => false

        orb: List N := modularGamma0Orbit(rspec, m, t)
        orbitSize: Z := # orb

        --\eqref{eq:Radu-sum=0}
        not zero?(reduce(_+, s, 0) + orbitSize * reduce(_+, r, 0)) =>
            warnPrint("eq:Radu-sum=0 sspec", sspec)
            warnPrint("eq:Radu-sum=0 rspec", rspec)
            warnPrint("eq:Radu-sum=0 orbitSize", orbitSize)
            false

        --\eqref{eq:Radu-sigmainfinity}
        shat: Z := numer sigmaInfinity sspec
        rhat: Z := numer sigmaInfinity rspec
        nu: Z := chiExponent(rspec, m, t)
        z: Z := shat + orbitSize * m * rhat + nu
        not DIVISIBLEBY?(24, z) =>
            warnPrint("eq:Radu-sigmainfinity sspec", sspec)
            warnPrint("eq:Radu-sigmainfinity rspec", rspec)
            warnPrint("eq:Radu-sigmainfinity orbitSize", orbitSize)
            warnPrint("eq:Radu-sigmainfinity nu", nu)
            false

        --\eqref{eq:Radu-sigma0}
        sv: Z := sigma0 sspec
        rv: Z := sigma0 rspec
        -- conditionCoEtaQuotientGamma0?(nn, rspec, m, t) \implies f \in Z
        -- See conditionMmN?(nn, rspec, m).
        f: Z := ((m * nn) exquo mm)::Z

        not DIVISIBLEBY?(24, sv + orbitSize * f * rv) =>
            warnPrint("eq:Radu-sigma0 sspec", sspec)
            warnPrint("eq:Radu-sigma0 rspec", rspec)
            warnPrint("eq:Radu-sigma0 orbitSize", orbitSize)
            false

        --\eqref{eq:Radu-productsquare}
        not checkSquare?(sspec, rspec, m, orbitSize) =>
            warnPrint("eq:Radu-productsquare sspec", sspec)
            warnPrint("eq:Radu-productsquare rspec", rspec)
            warnPrint("eq:Radu-productsquare orbitSize", orbitSize)
            false

        true

    modularGamma1?(sspec: SPEC, rspec: SPEC, m: P, t: N): Boolean ==
        not conditionCoEtaQuotientGamma1?(level sspec, rspec, m, t) => false
        -- \cite[Thm~10.1]{ChenDuZhao_FindingModularFunctionsRamanujan_2019}
        -- Condition (1)
        -- Condition \eqref{eq:CDZ-sum=0}
        ws: Z := reduce(_+, pureExponents sspec, 0)$LZ
        wr: Z := reduce(_+, pureExponents rspec, 0)$LZ
        not zero?(ws + wr) =>
            warnPrint("Chen: Theorem 10.1(1) sspec", sspec)
            warnPrint("Chen: Theorem 10.1(1) rspec", rspec)
            false

        -- Condition (2)
        -- Condition \eqref{eq:CDZ-sigma0=0}
        rbarv: Z := sigma0 rspec
        sbarv: Z := sigma0 sspec
        nn: P := level sspec
        mm: P := level rspec
        z: Z := sbarv + numer(nn/mm)*m*rbarv -- Note that mm divides nn.
        not DIVISIBLEBY?(24, z) =>
            warnPrint("Chen: Theorem 10.1(2) sspec", sspec)
            warnPrint("Chen: Theorem 10.1(2) rspec", rspec)
            warnPrint("Chen: Theorem 10.1(2) z", z)
            false

        -- Condition (3)
        -- Condition \eqref{eq:CDZ-sigmainfinity=0}
        rbarhat: Q := sigmaInfinity rspec
        sbarhat: Q := sigmaInfinity sspec
        alpha: Q := alphaAux(rspec, t)
        q: Q := sbarhat + m*rbarhat - ((m^2-1)/m)*alpha
        not one? denom q or not DIVISIBLEBY?(24, z) => --shouldn't happen
            warnPrint("Chen: Theorem 10.1(3) sspec", sspec)
            warnPrint("Chen: Theorem 10.1(3) rspec", rspec)
            warnPrint("Chen: Theorem 10.1(3) q", q)
            false

        -- Condition (4)
        -- Condition \eqref{eq:CDZ-productsquare}
        for i in 1..11 repeat
            a: Z := nn*i+1
            one? gcd(a,6) and not checkSquare1?(sspec, rspec, m, a) =>
                warnPrint("Chen: Theorem 10.1(4) sspec", sspec)
                warnPrint("Chen: Theorem 10.1(4) rspec", rspec)
                warnPrint("Chen: Theorem 10.1(4) a", a)
                return false

        true

)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
