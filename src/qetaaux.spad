-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018-2021  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Auxiliary functions for modular functions}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
  The packages \code{QEtaAuxiliaryPackage} contains helper functions
  for transformations of eta-quotients.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Indroduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let $N$ be a positive natural number and $\Gamma_0(N)$ be as defined
in \eqref{eq:Gamma0}.

This file contains code to compute a (finite) monoid basis for
$E^\infty(N)$.

This file contains code to compute a (finite) monoid basis for
$GE^\infty(N)$ (the generalized eta-quotients that are modular for
$\Gamma_1(N)$).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

First of all for debugging.
)endif
OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

)if LiterateDoc
%$
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
MZ ==> Matrix Z -- will be a square matrix
MQ ==> Matrix Q -- matrixEtaOrder
SL2Z ==> MZ -- represents SL_2(Z)
EXGCD ==> Record(coef1: Z, coef2: Z, generator: Z)
Rec ==> Record(red: SL2Z, triang: MZ)
Pol ==> SparseUnivariatePolynomial Z
LZ ==> List Z
LLZ ==> List LZ

INTF ==> IntegerNumberTheoryFunctions
DIVISORS m ==>  [asP d for d in divisors(m)$INTF]

asN x ==> x pretend N
asP x ==> x pretend P

)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Package QEtaAuxiliaryPackage: Check modularity of
  eta-quotients}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Here we mainly deal with the sets $R^*(N)$ and $R^\infty(N)$ from
\cite{Hemmecke+Radu:EtaRelations:2018}.

The function \code{matrixLigozat} computes the respective matrix $A_N$
whereas \code{modularGamma0} checks which of the conditions for an $r$
vector to correspond to a modular eta-quotient is violated.


)endif

-- Maybe this should become a domain CongruenceSubgroupGamma0(m).
)abbrev package QETAAUX QEtaAuxiliaryPackage
++ QEtaAuxiliaryPackage helps to do computations with
++ eta-quotients that are modular functions.
QEtaAuxiliaryPackage: with
    splitEtaQuotientSpecification: (P, List List Z) ->
        Record(etaQuotientExponents: List Z, generalizedParameters: LLZ)
      ++ splitEtaQuotientSpecification(nn, rr) separates the
      ++ part of rr that specifies a pure eta-quotient from the
      ++ part of rr that specifies a generalized eta-quotient.
      ++ See definition in specification of
      ++ generalizedEtaPower $ EtaQuotientInfinity for how each element
      ++ of rr is interpreted.
    lengthOfGeneralizedEtaQuotientSpecification: P -> N
      ++ lengthOfGeneralizedEtaQuotientSpecification(nn) returns
      ++ # toEtaQuotientSpecification(nn,[]) without ever
      ++ computing the specification list explicitly.
    toEtaQuotientSpecification: (P, List Z) -> List List Z
      ++ toEtaQuotientSpecification(nn, exponentList) returns a
      ++ specification for a generalized eta-quotient where
      ++ exponentList is considered to be a list of exponents for the
      ++ (generalized) eta-functions listed in the following order.
      ++ [eta(d\tau) for d in divsors(nn)]
      ++ [[eta_{d,g}(\tau) for g in 1..ceiling(d/2)-1] for d in divisors(nn)].

      ++ This function basically adds the index part d and (d,g) part
      ++ to the exponents. If the exponentList is too long an error is
      ++ signalled. If the exponentList is too short, that is no
      ++ problem.

      ++ For the special case that the exponentList is empty,
      ++ toEtaQuotientSpecification(nn, []) returns all the indices
      ++ (without exponents), i.e., it return the list in
      ++ \eqref{eq:sorted-indices} where the 0 in the second argument
      ++ is removed. To be precise, it returns
      ++ [[d1],[d2],...,[dn],[d2,1],...,[d2,f2],...,[dn,1],...,[dn,fn]]
      ++ where di is the i-th positive divisor of nn and
      ++ fi=ceiling(di/2)-1.

    sigmaInfinity: (P, List Z) -> Z
      ++ sigmaInfinity(mm, r) returns \sum_{delta|mm} delta*r_delta where
      ++ it is assumed that the entries of r correspond to the divisors
      ++ of mm.
      ++ It corresponds to \eqref{eq:sumdelta} in qetaquot.spad.
    sigmaInfinity: (P, List List Z) -> Q
      ++ sigmaInfinity(mm, gr) returns
      ++ \sum_{delta|mm,0<g<delta/2}
      ++      delta*fractionalBernoulli2(g/delta)*r_{delta,g}
      ++ or rather
      ++ \sum_{l \in gr}(d*fractionalBernoulli2(g/d)*e | (d,g,e)=l).
      ++ We assume here that everly element of gr is of the form
      ++ [d,g,e] and describes the generalized eta-power \eta_{d,g}^e
    sigmaInfinity: (P, List Z, List List Z) -> Q
      ++ sigmaInfinity(mm, r, gr) returns
      ++ sigmaInfinity(mm, r) + 12*sigmaInfinity(mm, gr).
      ++ Compare with \eqref{eq:generalized-sigmaInfinity}.
    sigma0: (P, List Z) -> Z
      ++ sigma0(mm, r) returns \sum_{delta|mm} (mm/delta)*r_delta where
      ++ it is assumed that the entries of r correspond to the divisors
      ++ of mm.
      ++ It corresponds to \eqref{eq:sumdelta} in qetaquot.spad.
    sigma0: (P, List List Z) -> Z
      ++ sigma0(mm, gr) returns
      ++ \sum_{delta|mm, 0<g<delta/2} (mm/delta)*r_{delta,g}
      ++ or rather \sum_{l \in gr}((mm/d)*e | (d,g,e)=l).
      ++ We assume here that everly element of gr is of the form
      ++ [d,g,e] and describes the generalized eta-power \eta_{d,g}^e
    sigma0: (P, List Z, List List Z) -> Z
      ++ sigma0(mm, r, gr) returns sigma0(mm, r) + 2*sigma0(mm, gr).
      ++ Compare with \eqref{eq:generalized-sigma0}.
    fractionalPart: Q -> Q
      ++ fractionalPart(x) returns x - floor(x)::Fraction(Integer).
    fractionalBernoulli1: Q -> Q
      ++ fractionalBernoulli1(x) computes t - 1/2 where t is the
      ++ fractional part of x, i.e., t = x - floor(x)
    fractionalBernoulli2: Q -> Q
      ++ fractionalBernoulli2(x) computes t^2 - t + 1/6 where t is the
      ++ fractional part of x, i.e., t = x - floor(x)
    sawTooth: Q -> Q
      ++ sawTooth(x) is 0 if x is an integer and
      ++ fractionalBernoulli1(x) otherwise.
    dedekindSum: (Z, Z) -> Q
       ++ dedekindSum(p,q) returns for two relatively prime integers
       ++ p and q the Dedekind sum as defined by
       ++ dedekindSum(p,q)=sum(sawTooth(1/q)*sawTooth(p*i/q), i=1..q-1).
    generalizedDedekindSum: (P, Z, Z, Z, Z) -> Q
       ++ generalizedDedekindSum(nn,g,h,p,q) returns the generalized
       ++ Dedekind sum as defined in
       ++ \cite[p~673]{Yang:GeneralizedDedekindEtaFunctions} by
       ++ generalizedDedekindSum(nn,g,h,p,q) =
       ++ sum(sawTooth((g+i*nn)/(q*nn))*sawTooth((g'+p*i*nn)/(q*nn)),i=1..q-1).
       ++ Condition: one? gcd(p,q).
    aLigozat: (P, Z, Z) -> Z
      ++ aLigozat(m, c, delta) computes an entry of the matrix of
      ++ Ligozat corresponding to the index (c, delta) counted in
      ++ divisors.
    matrixLigozat: P -> MZ
      ++ matrixLigozat(m) returns the (n,n) matrix with entries a_m(di,dj)
      ++ given by Notation 3.2.6 in \cite{Ligozat:CourbesModulaires:1975}
      ++ where di and dj run over all positive divisors of m.
      ++ This matrix is A_N as described after Lemma 5.2 in
      ++ \cite{Hemmecke+Radu:EtaRelations:2018}.
    matrixAtkinLehner: (P, P) -> MZ
      ++ matrixAtkinLehner(m, t) with t a Hall divisor
      ++ (https://en.wikipedia.org/wiki/Hall_subgroup) of m returns
      ++ the 2x2 matrix with entries [[t, -a], [m, t*b]] such that
      ++ n=m/t and t*b + n*a = 1, see
      ++ \cite{Kohnen:WeierstrassPointsAtInfinity:2004}.
    modularGamma0: (P, List Z) -> Z
      ++ modularGamma0(nn, r) returns 0 if all conditions are
      ++ fulfilled. Otherwise it returns a positive number in the
      ++ range 1 to 4 that corresponds to the condition that is not
      ++ met. This corresponds to the conditions given for
      ++ R(N,i,j,k,l) on page 226 of \cite{Radu:RamanujanKolberg:2015}
      ++ and to the conditions \eqref{eq:sum=0},
      ++ \eqref{eq:sigmainfinity}, \eqref{eq:sigma0}, and
      ++ \eqref{eq:productsquare} in qetaquot.spad.
      ++ It is equivalent to check whether there is an extension v of r
      ++ such that matrixModularGamma0(nn)*v is 0.
    modularGamma0?: (P, List Z) -> Boolean
      ++ modularGamma0(nn, r) returns true iff the eta-quotient
      ++ corresponding to r is a modular function for Gamma_0(nn). It
      ++ is equivalent to zero?(modularGamma0(nn, r)).
    matrixModularGamma0: P -> MZ
      ++ matrixModularGamma0(nn) returns a matrix mat such
      ++ that if divs:=divisors(nn), n=#divisors(nn) and v is such
      ++ that mat*v=0 then v(1..n) is in R^*(nn), in other words, the
      ++ nullspace of mat "generates" R^*(nn). The first row of mat
      ++ corresponds sum(r.i, i=1..n). The second row of mat
      ++ corresponds to the sum(divs.i*r.i,i=1..n)+24*r(n+1). The
      ++ third row of mat corresponds to the
      ++ sum((nn/divs.i)*r.i,i=1..n)+24*r(n+2). The function computes
      ++ matrix B_N (equation (8) from
      ++ \cite{Hemmecke+Radu:EtaRelations:2018}
      ++ \url{http://www.risc.jku.at/publications/download/risc_5561/etarelations.pdf}
      ++ (DOI:10.1016/j.jsc.2018.10.001).
    matrixLigozatModularGamma0: (P, List Z) -> MZ
      ++ matrixLigozatModularGamma0(nn, idivs) returns a matrix mat which
      ++ is a vertical concatenation (a part of) matrixLigozat(nn)
      ++ whose rowindices correspond to idivs and
      ++ matrixModularGamma0(nn).
      ++ It computes matrix B_N equation (8) in
      ++ \cite{Hemmecke+Radu:EtaRelations:2018}
      ++ (DOI:10.1016/j.jsc.2018.10.001) put below the respective rows
      ++ of matrix A_N from the same article.
    upsilonExponent: (Z, Z, Z, Z) -> Z
      ++ upsilonExponent(a,b,c,d) returns z \in {0..23} such that
      ++ exp(\pi*i*z/12) is a multiplier in the transformation of an
      ++ eta function by the matrix [[a,b],[c,d]] from SL_2(Z).
      ++ A definition can be found in \cite[Lemma~2.27]{Radu:PhD:2010}.
    upsilonExponent: MZ -> Z
      ++ upsilonExponent(m) for a matrix m from SL_2(Z) returns
      ++ upsilonExponent(m(1,1), m(1,2), m(2,1), m(2,2)).
    kappaSchoeneberg: (P, Z, Z, Z, Z, Z, Z) -> Q
      ++ kappaSchoeneberg(nn, g, h, a, b, c, d) returns a value x such
      ++ that \eta_{g,h}(mat*tau) = exp(2*%pi*%i*x) *
      ++ \eta_{g',h'}(tau) as given at the top of page 673 of
      ++ \cite{Yang:GeneralizedDedekindEtaFunctions:2004} where
      ++ mat=matrix[[a,b],[c,d]].
      ++ Condition: not zero? c.
    kappaSchoeneberg: (P, Z, Z, MZ) -> Q
      ++ kappaSchoeneberg(nn, g, h, mat) returns a value x such
      ++ that \eta_{g,h}(mat*tau) = exp(2*%pi*%i*x) *
      ++ \eta_{g',h'}(tau) as given at the top of page 673 of
      ++ \cite{Yang:GeneralizedDedekindEtaFunctions:2004}.
      ++ Condition: not zero? c.
    kappaYang: (P, Z, Z, Z, Z, Z, Z) -> Q
      ++ kappaYang(nn, g, h, a, b, c, d) returns a value x such that
      ++ E_{g,h}(mat*tau) = exp(2*%pi*%i*x) * E_{g',h'}(tau) as given
      ++ in \cite[Theorem~1]{Yang:GeneralizedDedekindEtaFunctions:2004}
      ++ where mat = matrix [[a,b],[c,d]].
      ++ Condition: not zero? c.
    kappaYang: (P, Z, Z, MZ) -> Q
      ++ kappaYang(nn, g, h, mat) returns a value x such that
      ++ E_{g,h}(mat*tau) = exp(2*%pi*%i*x) * E_{g',h'}(tau) as given
      ++ in \cite[Theorem~1]{Yang:GeneralizedDedekindEtaFunctions:2004}.
      ++ Condition: not zero? mat(2,1).
    numberOfGaps: (P, List P) -> N
      ++ numberOfGaps(n, l) computes
      ++ reduce(+, [floor(x/n) for x in l], 0).
    splitMatrix: (SL2Z, Z, P, N) -> Rec
      ++ splitMatrix(mat, delta, m, lambda) computes
      ++ splitMatrix(a, b, c, d) where the arguments are the matrix
      ++ entries of matrix [[delta, delta*lambda], [0, m]]*mat.
      ++ Input condition: determinant(mat)>0.
    splitMatrix: (SL2Z, Z) -> Rec
      ++ splitMatrix(mat, delta) computes splitMatrix(mat, delta, 1, 0).
      ++ Input condition: determinant(mat)>0.
    splitMatrix: (Z, Z, Z, Z) -> Rec
      ++ splitMatrix(a, b, c, d) returns a record rec that contains
      ++ two matrices rec.red=m1 and rec.triang=m2 such that mat=m1*m2
      ++ according to \cide[Lemma~4.8]{Radu:PhD:2010}, but in a variation
      ++ as described in qetaquot.spad, i.e., such that 0<=m2(1,2)<det(mat)/g
      ++ where g = gcd(a, c) and mat=[[a,b],[c,d]].
      ++ Input condition: a*d-b*c>0.
    rationalSquareRoot: Q -> Record(rat: Q, rootOf: P)
      ++ if z = rationalSquareRoot(x) then x = (z.rat)^2 * z.root
    minimalSquareRootOfUnity: P -> P
      ++ minimalSquareRootOfUnity(p) returns an integer n such that
      ++ in Z(x) (where x is a primitive n-th root of unity) there
      ++ exists an element y such that y^2=p.
      ++ p must be a radical integer, i.e., should not contain the
      ++ square of a prime.
    primePower: (P, P) -> N
      ++ primePower(d, p) returns e such that gcd(d/p^e, p)=1, i.e., the
      ++ highest power e such that p^e is a factor of d.

    modularGamma1: (P, List List Z) -> Z
      ++ modularGamma1(nn, rr) returns 0 if the parameters specify a
      ++ generalized eta-quotient that is modular for Gamma1(nn). It
      ++ returns 1, if condition \eqref{eq:generalized-weight} is not
      ++ met, 2, if condition \eqref{eq:generalized-sigmaInfinity} is
      ++ not met, and 3 if condition \eqref{eq:generalized-sigma0}
      ++ does not hold. It is equivalent to check whether there is an
      ++ extension v of rr such that matrixModularGamma1(nn)*v is 0
      ++ where for we sort rr according to the order given by
      ++ \eqref{eq:sorted-indices}.
    modularGamma1?: (P, List List Z) -> Boolean
      ++ modularGamma1(nn, rr) returns true iff the generalized
      ++ eta-quotient corresponding to rr is a modular function for
      ++ Gamma_1(nn). It is equivalent to zero?(modularGamma1(nn, rr)).
    matrixModularGamma1: P -> MQ
      ++ matrixModularGamma0(nn) returns a matrix mat such
      ++ that if divs:=divisors(nn), n=#divisors(nn) and v is such
      ++ that mat*v=0 then v(1..n) is in R^*(nn), in other words, the
      ++ nullspace of mat "generates" R^*(nn). The first row of mat
      ++ corresponds sum(r.i, i=1..n). The second row of mat
      ++ corresponds to the sum(divs.i*r.i,i=1..n)+24*r(n+1). The
      ++ third row of mat corresponds to the
      ++ sum((nn/divs.i)*r.i,i=1..n)+24*r(n+2). The function computes
      ++ matrix B_N (equation (8) from
      ++ \cite{Hemmecke+Radu:EtaRelations:2018}
      ++ \url{http://www.risc.jku.at/publications/download/risc_5561/etarelations.pdf}
      ++ (DOI:10.1016/j.jsc.2018.10.001).

    matrixEtaOrder: (P, Q, P, Z) -> Q
      ++ For g in the range 0..delta matrixEtaOrder(nn,cusp,delta,g)
      ++ returns the coefficient of r_{delta.g} in
      ++ \cite[Thm.~4]{Robins:GeneralizedDedekindEtaProducts:1994},
      ++ except for the case nn=4, gcd(denom(cusp),nn)=2 (or
      ++ Gamma1(4)-equivalent) where we return half of this
      ++ coefficient.
      ++ matrixEtaOrder(nn,cusp,delta,-1)=matrixEtaOrder(nn,cusp,delta,0)/2.
      ++ Note that Robins refers to an expansion in the uniformizing
      ++ variable q^(gcd(c,nn)/nn) (where cusp=a/c). That is equal to
      ++ q^(1/width(nn,c)$CongruenceSubgroupGamma1) except for the
      ++ case nn=4 and gcd(nn,c)=2. In that case the width of the cusp
      ++ 1/2 is 1 and not 2=4/gcd(4.2). For this case, we deviate from
      ++ Robins' coefficients and adapt to an expansion in q rather
      ++ than an expansion in q^(1/2).

    matrixEtaOrder: (P, List Q) -> MQ
      ++ matrixEtaOrder(nn, spitzen) returns a matrix that is similar
      ++ to matrixLigozat(nn). It allows the compution of the order of
      ++ generalized eta-quotients at the cusps of Gamma1(nn) given by
      ++ the parameter spitzen. The rows of the matrix are sorted
      ++ according to spitzen. The matrix columns correspond to the
      ++ following generalized eta-functions (in this order).
      ++ [eta(d\tau) for d in divsors(nn)]
      ++ [[eta_{d,g}(\tau) for g in 1..ceiling(d/2)-1] for d in divisors(nn)].

    matrixEtaOrder: P -> MQ
      ++ matrixEtaOrder(nn) returns matrixEtaOrder(nn, spitzen) where
      ++ spitzen := cusps(nn)$CongruenceSubgroupGamma1.

    matrixEtaOrderModularGamma1: (P, List Q) -> MQ
      ++ matrixEtaOrderModularGamma1(nn, spitzen) returns the
      ++ vertical concatenation of matrixEtaOrder(nn, spitzen) and
      ++ matrixModularGamma1(nn) so that there will be #spitzen+3 rows
      ++ and ncols(matrixModularGamma1 nn) columns.

-------------------------------------------------------------------
-- Temporarily exported
-------------------------------------------------------------------
    jacobiUpperStar: (Z, Z) -> Z
      ++ See, for example, Definition 2.26 in the PhD thesis of Silviu Radu.
      ++ http://www3.risc.jku.at/publications/download/risc_5453/main.pdf
    jacobiLowerStar: (Z, Z) -> Z
      ++ See, for example, Definition 2.26 in the PhD thesis of Silviu Radu.
      ++ http://www3.risc.jku.at/publications/download/risc_5453/main.pdf
    coprimePart: (Z, Z) -> Z
       ++ coPrimePart(n, c) splits n into u*v such that gcd(u,c)=1
       ++ and returns u.
       ++ We assume that all input numbers are positive.

  == add
    fUnion ==> Union("nil", "sqfr", "irred", "prime")
    FL ==> List Record(flag: fUnion, factor: Z, exponent: N)
    DIVISIBLEBY?(k, z) ==> zero?(z rem k)

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Local functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

    sigmaAux(divs: List P, r: List Z): Z ==
        z: Z := 0
        for d in divs for rd in r repeat z := z + d*rd
        return z

    sigmaInfinity(mm: P, r: List Z): Z == sigmaAux(DIVISORS mm, r)
    sigma0(mm: P, r: List Z): Z == sigmaAux(reverse! DIVISORS mm, r)

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Related to Eta-Quotients}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

    -- Compute B_N and V_N as in \cite{Hemmecke+Radu:EtaRelations:2018}.
    -- aLigozat(m, di, dj) here corresponds to a_m(di, dj) in
    -- \cite[Notation 3.2.6]{Ligozat:CourbesModulaires:1975}.
    -- Note that we can use any integer c here, including c=0.
    aLigozat(m: P, c: Z, delta: Z): Z == -- di==c, dj==delta
        num: Z := m * gcd(c, delta)^2
        den: Z := gcd(c^2, m) * delta
        (num exquo den)::Z -- can prove that this cannot fail

    matrixLigozat(m: P): MZ ==
        divs: List Z := divisors(m)$INTF
        n: N := # divs
        mat: MZ := new(n, n, 0)
        for i in 1..n for di in divs repeat
            for j in 1..n for dj in divs repeat
                qsetelt!(mat, i, j, aLigozat(m, di, dj))
        mat

    matrixAtkinLehner(m: P, t: P): MZ ==
        -- t is a Hall divisor of m.
        -- https://en.wikipedia.org/wiki/Hall_subgroup
        --assert((m exquo t) case Z)
        n: Z := (m exquo t)::Z -- input condition is that t divides m
        --assert(one? gcd(n, t))
        exgcd: EXGCD := extendedEuclidean(n, t)
        matrix [[t, -exgcd.coef1], [m, t*exgcd.coef2]]

    -- These are the conditions (1) to (4) of
    -- \cite{Hemmecke+Radu:EtaRelations:2018} that have to be fulfilled
    -- by a vector r to lie in R^*(N).
    modularGamma0(m: P, r: List Z): Z ==
        divs: List Z := divisors(m)$INTF
        rdivs: List Z := reverse divs
        s: Z := 0
        a: Z := 0
        b: Z := 0
        c: Factored Z := 1
        for ri in r for d in divs for rd in rdivs repeat
            s := s + ri
            a := a + ri * d  -- sigma_\infty
            b := b + ri * rd -- sigma_0
            c := c * factor(d)^asN(abs ri)
        -- Check conditions 1, 2, 3, 4.
        not zero? s => 1
        not zero? positiveRemainder(a, 24) => 2
        not zero? positiveRemainder(b, 24) => 3
        for fe in factors c repeat if odd?(fe.exponent) then return 4
        return 0

    modularGamma0?(nn: P, r: List Z): Boolean ==
        zero? modularGamma0(nn, r)

    matrixModularGamma0(m: P): MZ ==
        divs: List Z := divisors(m)$INTF
        n: N := # divs
        d: Vector Z := vector divs
        fl: List Record(factor: Z, exponent: N) := factors factor m
        cols: P := asP(n + 2 + #fl)
        rows: P := asP(3 + #fl)
        mat: MZ := new(rows, cols, 0)
        -- sum(r(d.i), i=1..n)=0
        for j in 1..n repeat qsetelt!(mat, 1, j, 1)
        -- sum(d.i * r(d.i), i=1..n+1) = 0 (mod 24)
        for j in 1..n repeat qsetelt!(mat, 2, j, d.j)
        qsetelt!(mat, 2, n+1, 24) -- additional variable for (mod 24)
        -- sum(d.(n+2-i) * r(d.i), i=1..n+1) = 0 (mod 24)
        for j in 1..n repeat qsetelt!(mat, 3, j, d(n+1-j))
        qsetelt!(mat, 3, n+2, 24) -- additional variable for (mod 24)
        -- product is rational square
        for i in 1..#fl for fe in fl repeat
            k := n+2+i
            p: P := asP(fe.factor)
            for j in 2..n repeat -- for all divisors > 1
                qsetelt!(mat, i+3, j, primePower(asP(d.j), p))
            qsetelt!(mat, i+3, k, 2) -- additional variable for (mod 2)
        return mat

    matrixLigozatModularGamma0(m: P, idivs: List Z): MZ ==
        matmod0: MZ := matrixModularGamma0 m
        empty? idivs => return matmod0
        matLigozat: MZ := matrixLigozat m -- is a square matrix
        l: N := ncols matLigozat
        n: N := # idivs
        rows: N := nrows matmod0
        cols: N := ncols matmod0
        mat: MZ := new(rows + n, cols, 0)
        for i in idivs for k in 1..n repeat for j in 1..l repeat
            qsetelt!(mat, k, j, qelt(matLigozat, i, j))
        for i in 1..rows repeat for j in 1..cols repeat
            qsetelt!(mat, n+i, j, qelt(matmod0, i, j))
        return mat

)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Related to Transformations of Eta-Quotients}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

    jacobiLowerStar(c: Z, d: Z): Z == -- result either 1 or -1
        --assert(one? gcd(c,d))
        --aaawer(odd? d)
        -- See \cite[Def.~2.26]{Radu:PhD:2010}.
        -- \left(\frac{c}{d}\right)_* =
        -- \begin{cases}
        -- \left(\frac{c}{\lvert d \rvert}\right) (-1)^{m_c m_d},
        --   & \text{if $c\ne0$},\\
        -- \sign{d}, & \text{otherwise}
        -- \end{cases}
        -- where $m x=\frac{\sign{x}-1}{2}$.
        zero? c => sign(d) -- note that d ~= 0 in this case
        j: Z := jacobi(c, abs(d))$INTF
        if c>0 or d>0 then j else -j -- c=0 or d=0 does not happen

    jacobiUpperStar(c: Z, d: Z): Z == -- result either 1 or -1
        --assert(one? gcd(c,d))
        --assert(odd? d)
        -- See \cite[Def.~2.26]{Radu:PhD:2010}.
        -- \left(\frac{c}{d}\right)^* =
        -- \begin{cases}
        -- \left(\frac{c}{\lvert d \rvert}\right), & \text{if $c\ne0$},\\
        -- 1, & \text{otherwise}
        -- \end{cases}
        zero? c => 1
        jacobi(c, abs(d))$INTF

    upsilonExponent(a: Z, b: Z, c: Z, d: Z): Z ==
        u: Z := c*(a+d)-b*d*(c^2-1)-3*c
        v: Z := 3*(d-1)*(c-1)
        r(x) ==> positiveRemainder(x, 24)
        -- Note that we exp(2*\pi*i*n/24)=exp(\pi*i)=-1 for n=12.
        odd? c => if jacobiUpperStar(d, c) > 0 then r(u) else r(u+12)
        if jacobiLowerStar(c, d) > 0 then r(u-v) else r(u-v+12)

    upsilonExponent(mat: MZ): Z ==
        upsilonExponent(mat(1,1), mat(1,2), mat(2,1), mat(2,2))

    numberOfGaps(n: P, list: List P): N ==
        asN reduce(_+, [floor(x /$Q n) for x in list]$List(Z), 0)

    -- Split matrix as in Lemma~\ref{thm:matrix-splitting} with
    -- z = delta*lambda.
    splitMatrix(mat: SL2Z, delta: Z, m: P, lambda: N): Rec ==
        z: Z := delta*lambda
        w11: Z := delta*mat(1,1) + mat(2,1)*z
        w12: Z := delta*mat(1,2) + mat(2,2)*z
        w21: Z := mat(2,1)*m
        w22: Z := mat(2,2)*m
        splitMatrix(w11, w12, w21, w22)

    -- Split matrix as in Lemma~\ref{thm:matrix-splitting} with
    -- z = 0 and m = 1.
    splitMatrix(mat: SL2Z, delta: Z): Rec ==
        splitMatrix(mat(1,1) * delta, mat(1,2) * delta, mat(2,1), mat(2,2))
        -- Same as splitMatrix(mat, delta, 1, 0).

    -- Split matrix according to Section~\ref{sec:eta-transformation} in
    -- qetaquot.spad.
    splitMatrix(a: Z, b: Z, c: Z, d: Z): Rec ==
        exgcd: EXGCD := extendedEuclidean(a, c)
        g: Z := exgcd.generator
        d0: Z :=  exgcd.coef1 -- initial value for d1
        b0: Z := -exgcd.coef2 -- initial value for b1
        a1: Z := (a exquo g) :: Z
        c1: Z := (c exquo g) :: Z
        a2: Z := g
        d2: Z := a1*d-b*c1
        -- Now try to find s such that 0 <= b*d1 - d*b1 - s*d2 < d2.
        b2init: Z := b*d0 - d*b0
        b2: Z := positiveRemainder(b2init, d2)
        s: Z := ((b2init - b2) exquo d2) :: Z
        b1: Z := b0 + s * a1
        d1: Z := d0 + s * c1
        m1: MZ := matrix([[a1, b1], [c1, d1]]$LLZ)
        m2: MZ := matrix([[g, b2], [0, d2]]$LLZ)
        [m1, m2]$Rec

)if LiterateDoc
%$

We use \cite[Lemma~2.45]{Radu:PhD:2010} to compute the cusps of
$\Gamma_0(N)$ as the set of all $\frac{a}{c}$ such that $c|N$ and
$a\in X_c$.

)endif

    squarePart(fl: FL): Z ==
        -- if fl = factorList factor x and z=squarePart(fl) then
        -- z^2*r=expand(fl) for some squarefree r.
        z: Z := 1
        for x in fl repeat
            e: P := asP shift(x.exponent, -1)
            z := (x.factor)^e * z
        return z

    rationalSquareRoot(x: Q): Record(rat: Q, rootOf: P) ==
        import from FL
        fden: Factored Z := factor denom x
        fnum: Factored Z := factor numer x
        fl: FL := factorList fden
        for x in fl | odd?(x.exponent) repeat
            fnum := x.factor * fnum
            fden := x.factor * fden
        fl := factorList fnum
        r: Z := 1
        for x in fl | odd? (x.exponent) repeat r := x.factor * r
        return [squarePart(fl)/squarePart(factorList fden), asP r]

    square(x: Record(root: P, elem: Pol)): Vector Z ==
        pol: Pol := cyclotomic(x.root)$CyclotomicPolynomialPackage
        C ==> SimpleAlgebraicExtension(Z, Pol, pol)
        z: C := convert(x.elem)@C
        convert(z*z)@Vector(Z)

    minimalSquareRootOfUnity(x: P): P ==
        -- x is a radical integer (squarefree)
        -- See \cite[Section~IV.3]{Lang:AlgebraicNumberTheory:1986}.
        x = 2 => 8
        positiveRemainder(x, 4)=1 => x
        4*x

    primePower(d: P, p: P): N ==
        e: N := 0;
        x: Z := d
        while not one? gcd(x, p) repeat (x := (x exquo p)::Z; e:=e+1)
        return e

)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Related to Generalized Eta-Quotients}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

    -- See definition in specification of
    -- generalizedEtaPower $ EtaQuotientInfinity.
    -- Here we separate the pure eta-quotient specification from the
    -- specification of generalized eta-quotients.
    splitEtaQuotientSpecification(mm: P, rr: LLZ):
      Record(etaQuotientExponents: List Z, generalizedParameters: LLZ) ==
        hr: XHashTable(Z, Z) := table() -- to compute r
        gr: LLZ := empty() -- specify all generalized eta-quotients
        for l in rr | not empty? l repeat
            d: Z := first l
            d <= 0 or not DIVISIBLEBY?(d, mm) => error "d does not divide mm"
            #l = 1 => hr.d := 1
            #l = 2 => hr.d := l.2
            #l = 3 => gr := cons(l, gr)
            error "splitEtaQuotientSpecification: list length > 3"
        r: List Z := [elt(hr, d, 0) for d in divisors(mm)$INTF]
        [r, gr]

    fractionalPart(x: Q): Q == -- local function
        d: Z := denom x
        positiveRemainder(numer x, d)/d

    fractionalBernoulli1(x: Q): Q == fractionalPart x - 1/2
    fractionalBernoulli2(x: Q): Q ==
        t: Q := fractionalPart x
        t^2 - t + 1/6

    sawTooth(x: Q): Q ==
        one? denom x => 0
        fractionalBernoulli1 x
    dedekindSum(p: Z, q: Z): Q ==
        not one? gcd(p, q) => error "dedekindSum: input not coprime"
        ds: Q := 0
        for i in 1..abs(q)-1 repeat
            ds := ds + sawTooth(i/q)*sawTooth(p*i/q)
        return ds
    generalizedDedekindSum(nn: P, g: Z, h: Z, a: Z, c: Z): Q ==
        not one? gcd(a, c) => error "generalizedDedekindSum: input not coprime"
        gds: Q := 0
        gg: Z := a*g + c*h
        for i in 0..abs(c)-1 repeat
            cn := c * nn
            s1: Q := sawTooth((g+i*nn)/cn)
            s2: Q := sawTooth((gg+a*i*nn)/cn)
            gds := gds + s1*s2
        return gds

    lengthOfGeneralizedEtaQuotientSpecification(nn: P): N ==
        nndivs: List P := DIVISORS nn
        len: N := 0
        for d in nndivs repeat len := len + asN(ceiling(d/2)$Q)
        return len

    toEtaQuotientSpecification(nn: P, exponentList: List Z): List List Z ==
        nndivs: List P := DIVISORS nn
        n: Z := # nndivs
        -- number of the r_d and r_{d,g} variables
        numOfVars: N := lengthOfGeneralizedEtaQuotientSpecification nn
        #exponentList > numOfVars =>
            error "toEtaQuotientSpecification: exponentList too long"

        indices: List List Z := empty()
        for d in nndivs repeat indices := cons([d], indices)
        for d in nndivs repeat
            for g in 1..ceiling(d/2)$Q-1 repeat indices := cons([d, g], indices)
        indices := reverse! indices

        -- Now we have all indices and just need to append the exponent
        -- entry to every element list.
        empty? exponentList => return indices

        spec: List List Z := empty()
        for i in indices for e in exponentList repeat
            if not zero? e then spec := cons(concat(i, e), spec)
        return reverse! spec

    sigmaInfinity(mm: P, gr: List List Z): Q ==
        res: Q := 0
        for l in gr repeat --assert(#l=3)
            not DIVISIBLEBY?(l.1, mm) =>
                error "sigmaInfinity: delta is not a divisor"
            res := res + l.1 * l.3 * fractionalBernoulli2(l.2/l.1)
        res

    sigmaInfinity(mm: P, r: List Z, gr: List List Z): Q ==
        sigmaInfinity(mm, r)::Q + 12*sigmaInfinity(mm, gr)

    sigma0(mm: P, gr: List List Z): Z ==
        z: Z := 0
        for l in gr repeat --assert(#l=3)
            z := z + l.3 * ((mm exquo l.1)::Z)
        z

    sigma0(mm: P, r: List Z, gr: List List Z): Z ==
        sigma0(mm, r) + 2*sigma0(mm, gr)

    modularGamma1(nn: P, rr: List List Z): Z ==
        rrec: Record(etaQuotientExponents: LZ, generalizedParameters: LLZ) :=
            splitEtaQuotientSpecification(nn, rr)
        r: LZ := rrec.etaQuotientExponents
        gr: LLZ := rrec.generalizedParameters
        not zero? reduce(_+, r) => 1 -- non-zero weight

        -- order at inifinity is an integer
        shat: Q := sigmaInfinity(nn, r, gr)
        not one? denom shat => 2
        not zero? positiveRemainder(numer shat, 24) => 2

        -- order at 0 is an integer
        not zero? positiveRemainder(sigma0(nn, r, gr), 24) => 3

        return 0 -- modular function for Gamma1(nn)

    modularGamma1?(nn: P, rr: List List Z): Boolean ==
        zero? modularGamma1(nn, rr)

    matrixModularGamma1(nn: P): MQ ==
        nndivs: List P := DIVISORS nn
        n: Z := # nndivs
        -- number of the r_d and r_{d,g} variables
        numOfVars: N := lengthOfGeneralizedEtaQuotientSpecification nn
        mat: MQ := new(3, numOfVars+2, 0) -- 2 more for "mod 24" rows
        jj := 0
        -- We run over the coulumns of the matrix.
        for d in nndivs for j in 1..n repeat
            -- sum exponents of pure eta-quotient part
            -- \eqref{eq:generalized-weight}
            qsetelt!(mat, 1, j, 1)
            -- row 2 and 3 correspond to the rows of matrixEtaOrder(nn)
            -- corresponding to the cusps 1/nn (infinity) and 1/1 (0).
            -- Thus, we use the same code as in matrixEtaOrder(nn).
            qsetelt!(mat, 2, j, matrixEtaOrder(nn, 1/nn, d, -1))
            qsetelt!(mat, 3, j, matrixEtaOrder(nn, 1/1,  d, -1))
            for g in 1..ceiling(d/2)-1 repeat
                jj := jj + 1
                qsetelt!(mat, 2, n + jj, matrixEtaOrder(nn, 1/nn, d, g))
                qsetelt!(mat, 3, n + jj, matrixEtaOrder(nn, 1/1,  d, g))

        -- make sure that row 2 and 3 must be integers
        qsetelt!(mat, 2, numOfVars+1, 1)
        qsetelt!(mat, 3, numOfVars+2, 1)
        return mat

    -- matrixEtaOrder(nn, cusp, delta, g) returns the coefficient of
    -- r_{delta.g} in
    -- \cite[Thm.~4]{Robins:GeneralizedDedekindEtaProducts:1994}.
    matrixEtaOrder(nn: P, cusp: Q, delta: P, g: Z): Q ==
        --assert(cusp>0) -- comes from cusps(nn)$CongruenceSubgroupGamma1
        g > delta => error "matrixEtaOrder: no such g allowed"
        entryFactor: Q := 1
        if g < 0 then
            entryFactor := 1/2 -- for proper eta-functions
            g := 0
        -- If cusp=a/c=lambda/(mu*epsilon), then we must have the
        -- condition: gcd(lambda,nn)=gcd(lambda,mu)=gcd(mu,nn)=1. So
        -- we try to find an equivalent cusp with this property.
        -- See function normalize in CongruenceSubgroupGamma1.
        c: Z := denom cusp
        l: Z := numer cusp -- \lambda
        e: Z := gcd(c, nn) -- \epsilon: divisor of nn (will not change)
        -- Note that nn/e = width(nn, c) (at least if (nn,c)~=(4,2)).
        -- Find a coprime (to nn) cofactor m such that m*e = c (mod nn).
        m: Z := (c exquo e)::Z
        n: Z := (nn exquo e)::Z
        while not one? gcd(m, nn) repeat m := m + n
        -- Find a coprime numerator l such that l/(m*e) is Gamma1(nn)
        -- equivalent to a/c.
        while not one? gcd(l, m) or not one? gcd(nn, l) repeat
            l := l + e
            if l >= nn then -- safety check -- should actually not happen
               tracePrint("[nn, numer cusp, denom cusp, c, m, e]",
                           [nn, numer cusp, denom cusp, c, m, e]$List(Z))
               error "matrixEtaOrder: lambda too big"

        h: Z := gcd(delta, e)
        z: Q := entryFactor * (nn*h^2/(2*delta*e)) * fractionalBernoulli2(l*g/h)
        nn = 4 and e = 2 => 1/2*z
        z

    matrixEtaOrder(nn: P, spitzen: List Q): MQ ==
        nndivs: List P := DIVISORS nn
        n: Z := # nndivs
        -- number of the r_d and r_{d,g} variables
        numOfVars: N := lengthOfGeneralizedEtaQuotientSpecification nn
        numrows: N := # spitzen
        mat: MQ := new(numrows, numOfVars, 0)
        for cusp in spitzen for i in 1..numrows repeat
            jj := 0
            for d in nndivs for j in 1..n repeat
                qsetelt!(mat, i, j, matrixEtaOrder(nn, cusp, d, -1))
                for g in 1..ceiling(d/2)-1 repeat
                    jj := jj + 1
                    qsetelt!(mat, i, n + jj, matrixEtaOrder(nn, cusp, d, g))
        return mat

    matrixEtaOrder(nn: P): MQ ==
        matrixEtaOrder(nn, cusps(nn)$CongruenceSubgroupGamma1)

    matrixEtaOrderModularGamma1(nn: P, spitzen: List Q): MQ ==
        matmod1 := matrixModularGamma1(nn)
        matord := matrixEtaOrder(nn, spitzen)
        mat: MQ := new(#spitzen+3, ncols matmod1, 0)
        --assert(ncols matord + 2 = ncols matmod1)
        n := # spitzen
        for i in 1..n repeat
            for j in 1..ncols matord repeat
                qsetelt!(mat, i, j, matord(i, j))
        for i in 1..3 repeat
            for j in 1..ncols matmod1 repeat
                qsetelt!(mat, n+i, j, matmod1(i, j))
        return mat

    kappaSchoeneberg(nn: P, g: Z, h: Z, a: Z, b: Z, c: Z, d: Z): Q ==
        --assert(not zero? c)
        zero? c => error "kappaSchoeneberg: works only for c~=0"
        gprime: Z := a*g + c*h
        x := a/(2*c)*fractionalBernoulli2(g/nn) _
             + d/(2*c)*fractionalBernoulli2(gprime/nn)
        gds := generalizedDedekindSum(nn, g, h, a, c)
        c < 0 => fractionalPart(x + gds)
        fractionalPart(x - gds)

    kappaYang(nn: P, g: Z, h: Z, a: Z, b: Z, c: Z, d: Z): Q ==
        --assert(not zero? c) -- That's a formula for the c~=0 case.
        r: Q := 1/2* ((g^2*a*b + 2*g*h*b*c + h^2*c*d)/nn^2 _
           - (g*b + h*(d-1))/nn) -- corresponds to delta/2 in Yang's paper
        u: Z := c*(a+d-3)+b*d*(1-c^2)
        odd? c => fractionalPart(u/12 + r)
        even? d => error "kappaYang: d is even"
        v: Z := a*c*(1-d^2)+d*(b-c+3)
        minusI: Q := -1/4
        fractionalPart(minusI + v/12 + r)

    kappaSchoeneberg(nn: P, g: Z, h: Z, mat: MZ): Q ==
        kappaSchoeneberg(nn, g, h, mat(1,1), mat(1,2), mat(2,1), mat(2,2))

    kappaYang(nn: P, g: Z, h: Z, mat: MZ): Q ==
        kappaYang(nn, g, h, mat(1,1), mat(1,2), mat(2,1), mat(2,2))

































)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Unused Package QAuxiliaryModularPackage: Annihilate
leading coefficients}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Add $p$-multiples of original generators in order to reduce the
order of the series. Return the respective (adjustment) polynomial.

)endif

)if UNUSED

--)abbrev package QAUXMOD QAuxiliaryModularPackage
QAuxiliaryModularPackage(L): Exports == Implementation where
  L: QEtaLaurentSeriesCategory Z
  ZX ==> Polynomial Z
  VZ ==> Vector Z
  term x ==> monomial(1, degree x)$ZX
  lc x ==> leadingCoefficient x
  Exports ==> with
    annihilateCoefficients: (P, List ZX, ZX -> L) -> ZX -> ZX
    annihilateLeadingCoefficients: (P, ZX -> L) -> ZX -> ZX
      ++ annihilateLeadingCoefficients(p, ev)(pol) adds a p-multiple
      ++ to any monomial of pol and returns a polynomial z such that
      ++ the evaluation order ev(z) >= order ev(pol) and the order
      ++ of ev(z) is as big as it can be made by varying each of the
      ++ monomials, i.e. we expect
      ++ order(ev z) = order(ev pol) + #monomials(pol) - 1.
      ++ The polynomial pol is assumed to be nonzero.
  Implementation ==> add
    annihilateCoefficients(p: P, mons: List ZX, ev: ZX -> L): ZX -> ZX ==
      (pol: ZX): ZX +->
        --assert(not zero? pol)
        ll: L := ev pol
        zero? ll => primitivePart pol
        ls: List L := [ev term x for x in mons]
        ords: List Z := [order(l, 1) for l in ls]
        o: Z := min ords
        nmons: N := # mons      -- number of variables
        for neqs in nmons..1 by -1 repeat
            mat: MZ := new(neqs, nmons, 0)
            v: VZ := new(neqs, 0)
            for i in 1..neqs repeat -- number of equations
                v.i := - coefficient(ll, o+i-1)
                for j in 1..nmons for l in ls repeat -- number of coefficients
                    mat(i, j) := p*coefficient(l, o+i-1)
            sol := diophantineSystem(mat, v)$SmithNormalForm(Z, VZ, VZ, MZ)
            if sol.particular case VZ then
                s := (sol.particular) :: VZ
                adjust := [p*c*term(x) for c in members s for x in mons]
                z := pol + reduce(_+, adjust, 0)
                ll := ev z
                c: Z := coefficient(ll, 0) quo p
                z := z - p*c*1$ZX
                zero? ev z => return primitivePart z
                -- divide by primes not in p
                c := content z
                primesp := [x.factor for x in factorList factor p]
                for x in primesp repeat
                    while zero? positiveRemainder(c, x) repeat
                        c := (c exquo x)::Z
                return (z exquo c)::ZX
        tracePrint("annihilateLeadingCoefficients", "nothing annihilated"::Symbol)
        return primitivePart pol

    annihilateLeadingCoefficients(p: P, ev: ZX -> L): ZX -> ZX ==
      (pol: ZX): ZX +->
        --assert(not zero? pol)
        mons: List ZX := monomials pol
        tracePrint("mons", [term(x) for x in mons])
        annihilateCoefficients(p, mons, ev)(pol)

)endif


)if LiterateDoc
%$
\bibliography{qeta}
\end{document}
)endif
