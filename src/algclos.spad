-------------------------------------------------------------------
---
--- DynamicAlgebraicClosureField
--- Copyright (C) 2019-2020,  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------


)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\DeclareUrlCommand\code{\urlstyle{tt}}
\begin{document}
\title{Dynamic Algebraic Closure Field}
\author{Ralf Hemmecke}
\date{22-Oct-2019}
\maketitle
\begin{abstract}
  The domain \code{DynamicAlgebraicClosureField} implements ideas
  similar to those in \cite{Steel:AlgebraicallyClosedFields:2002} and
  \cite{Steel:AlgebraicallyClosedFields:2010}.
\end{abstract}

\tableofcontents

\section{Overview}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

OF==>OutputForm
dbgPrint(x,y) ==> print(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF))

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
SI ==> SingleInteger
SY ==> Symbol

asN x ==> x pretend N
asP x ==> x pretend P
asZ x ==> x pretend Z

)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Dynamic Algebraic Closure Field}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The constructor \code{DynamicAlgebraicClosureField} takes as input a
field $K$ and returns the algebraic closure of $K$ in the sense of
\cite{Steel:AlgebraicallyClosedFields:2010}.

)endif


)abbrev domain DACF DynamicAlgebraicClosureField
++ Author: Ralf Hemmecke
++ Description:
++ Implement an ACF according to \cite{Steel:AlgebraicallyClosedFields:2010}.
DynamicAlgebraicClosureField(): Exports == Implementation where
  K ==> Q
  V ==> IndexedVariable("r")
  EX ==> IndexedExponents V
  R ==> NewSparseMultivariatePolynomial(K, V)
  TS ==> RegularTriangularSet(K, EX, V, R)
  NUP ==> NewSparseUnivariatePolynomial
  SUP ==> SparseUnivariatePolynomial

  PSU ==> PolynomialSetUtilitiesPackage(Q, EX, V, R)
  RREC ==> Record(ee: E, rr: %)

  Exports ==> Join(_
      AlgebraicallyClosedField,_
      PolynomialFactorizationExplicit,_
      RetractableTo Q) _
   with
    rank: () -> Z
    show: () -> Void
    primitiveNthRootOfUnity: Z -> %
      +++ primitiveNthRootOfUnity(n) returns a number x such that
      ++ x^n=1 and x^k is not 1 for every 1<k<n.
    extensionPolynomial: P -> SUP %
    getRoot: P -> %
    -- if f = extensionPolynomial n and r = getRoot n then zero? f(r)

    -- The following functions are only exported for debugging purposes.
    extendBy!: SUP % -> % -- yields a root (lifted variable)
      ++ extendBy!(f) is only exported for debugging purposes.
      ++ If used then zero?(f(r)) should not hold for any of the known
      ++ roots stored internally (including xroots).

  Implementation ==> R add
    -- Since the triangular set does not necessarily consist of irreducible
    -- polynomials (over the respective lower ranked field),
    -- we cannot  assume that all elements are always reduced wrt. the
    -- triangular set ts.
    Rep ==> R
    import from Rep
    xx ==> rep x
    yy ==> rep y

    -- modular evaluation field E
    maxSI2 ==> shift(max()$SI, -1)
    p: P := asP(prevPrime(maxSI2::Z)$IntegerPrimesPackage(Z))
    E ==> DynamicAlgebraicClosureFiniteField PrimeField p
    EZ ==> SUP E -- corr. to $E[z]$

    RZ ==> SUP R
    G1 ==> Record(gcd: NUP %, coef1: NUP %) -- for "inv" computation

    FUNION ==> Union("nil", "sqfr", "irred", "prime")

    FREC ==> Record(flag: FUNION, factor: SUP %, exponent: N)
    FL ==> List FREC

    univar(r, v) ==> (univariate(r, v)$R) pretend SUP % -- (%, V) -> SUP %
    nunivar(r, v) ==> (univariate(r, v)$R) pretend NUP % -- (%, V) -> NUP %
    multivar(s, v) ==> per(multivariate(s pretend RZ, v)$R) -- (NUP %, V) -> %

    -- We want extension polynomials to be at least square-free.
    STATE ==> Record(
        -- rnk: is the number of elements in ts, vars, roots
        -- elements: of ts are sorted by main variable (decreasing)
        -- ts: is a triangular system sorted like the variables, i.e.,
        --  higest variable first (like in vars).
        -- vars: internally used vars, sorted decreasingly r4,r3,r2,r1
        -- roots the values corresponding to the elements in vars
        --   together with a gamma value (root of the projected minimal
        --   polynomial)
        -- xroots: is a list of distict known roots of one of the polynomials
        --   of ts or negations of them. These elements need actually not be
        --   roots, but they should have already occured during root finding
        --   so that those elements can be tested before doing a real
        --   via extendBy!. In fact, extendBy! relies upon the fact that
        --   known elements have been tested.
        vars: List V,_
        ts: TS,_
        roots: List RREC,_
        xroots: List RREC,_
        nthRootsOfUnity: XHashTable(Z, %),_
        rnk: Z)

    -- The domain state is changed destructively.
    state: STATE := [_
        empty()$List(V),_
        empty()$TS,_
        empty()$List(RREC),_
        empty()$List(RREC),_
        empty()$XHashTable(Z, %),_
        0]

    mon: SUP % := monomial(1, 1)$SUP(%)
    dummysy: Symbol := new()$SY

    rank(): Z == state.rnk

    getRec(n: P): RREC ==
        --assert(not zero? state.rnk)
        rts: List RREC := state.roots
        rts(state.rnk - asZ(n) + 1)

    getGamma(n: P): E == getRec(n).ee
    getRoot(n: P): % == getRec(n).rr

    getRelations(): TS == state.ts

    getRelation(n: P): R ==
        --assert(not zero? state.rnk)
        triset: List R := getRelations()::List(R)
        triset(state.rnk - asZ(n) + 1)

    extensionPolynomial(n: P): SUP % ==
        f: R := getRelation n
        univar(f, mvar f)

    show(): Void ==
        print([univar(r, mvar r) for r in getRelations()::List(R)]::OF)$OF
        print((state.xroots)::OF)$OF
        show()$E

    -- applyPhi(c) projects an element c of the ground field to
    -- the finite field E.
    -- We assume that the input is such that this projection works,
    -- i.e., that the prime p does not divide the denominator of c.
    applyPhiK(c: K): E ==
        num := numer(c)::E
        den := denom(c)::E
        zero? den ==> error "cannot invert denominator"
        num * inv(den)

    applyPhiGamma(x: %): E ==
        ground? xx => applyPhiK ground xx
        --assert(not zero? x)
        v: V := mvar xx
        n: P := lookup v
        s: NUP % := nunivar(xx, v)
        g: E := getGamma n
        e: E := applyPhiGamma(leadingCoefficient s) * g^degree(s)
        while not zero?(s := reductum s) repeat
            e := e + applyPhiGamma(leadingCoefficient s) * g^degree(s)
        return e

    evalPolynomial(s: NUP %): EZ ==
        zero? s => 0$EZ
        e: E := applyPhiGamma leadingCoefficient s
        monomial(e, degree s)$EZ + evalPolynomial reductum s

    --assert(zero? state.rnk or (state.rnk = #(state.ts)))
    --assert(zero? state.rnk or (state.rnk = #(stete.vars)))
    --assert(zero? state.rnk or (state.rnk = lookup first state.vars))
    extendBy!(f: SUP %): % ==
        --assert(not ground? f)
        -- Make polynomial monic.
        c: % := leadingCoefficient f
        if not one? c then f := inv(c)*f
        e: E := rootOf(evalPolynomial(f pretend NUP %))$E
        v: V := new()
        minpoly: R := rep multivar(f, v)
        -- We set the state destructively.
        state.vars := cons(v, state.vars)$List(V)
        r: % := multivar(mon, v)
        rrec: RREC := [e, r]
        state.roots := cons(rrec, state.roots)$List(RREC)
        -- All negations of previous roots are already in xroots, thus
        -- the new root and its negation are not equal to one of the
        -- xroots already existing and we can add the negation
        -- of the new root to xroots.
        -- Note that extendBy! is only called by rootOfSquareFreePolynomial.
        -- To keep consistency of xroots, extendBy! should NOT be exported.
        state.xroots := cons([-rrec.ee, -rrec.rr], state.xroots)$List(RREC)
        state.xroots := cons(rrec, state.xroots)$List(RREC)
        state.ts := _extend(state.ts, minpoly)$TS
        state.rnk := state.rnk + 1
        r

    reduce(r: Rep): % ==
        z: Record(rnum: K, polnum: R, den: K) := remainder(r, getRelations())$TS
        per((z.rnum/z.den) * z.polnum)

    retractIfCan(x: %): Union(Q, "failed") ==
        x := reduce xx
        not ground? xx => "failed"
        ground(xx)::Union(Q, "failed")

    retract(x: %): Q ==
        x := reduce xx
        not ground? xx => error "retract: not a rational number"
        ground xx

    -- gcd $ SUP(%) is implemented by calling gcdPolynomial $ %.
    -- If we do not override it here, it is inherited from Rep.
    -- Our Rep is a multivariate polynomial domain, but we must implement
    -- a gcd algorithm of univariate polynomials over the field %.
    gcdPolynomial(p1: SUP %, p2: SUP %): SUP % ==
        zero? p1 => p2  -- subResultantGcd can't handle 0
        zero? p2 => p1
        subResultantGcd(p1, p2)$PseudoRemainderSequence(%, SUP %)

    _-(x: %): % == reduce(- xx)
    ((x: %) + (y: %)): % == reduce(xx + yy)
    ((x: %) - (y: %)): % == reduce(xx - yy)
    ((x: %) * (y: %)): % == reduce(xx * yy)

    ((x: %) ^ (n: P)): % == expt(x, n)$RepeatedSquaring(%)
    ((x: %) ^ (n: N)): % ==
        zero? n => 1
        x^asP(n)
    ((x: %) ^ (n: Z)): % ==
        n < 0 => inv(x) ^ asP(-n)
        x^asN(n)

    -- zeroTest uses the algorithm ZeroTest from
    -- \cite{Steel:AlgebraicClosure:2002} in order to adjust
    -- the ideal I (which in our case is given by the triangular
    -- set state.ts. ts might get updated by zeroTest!.
    -- zeroTest! returns false if x can definitely not be zero
    zeroTest!(x: R): Boolean ==
        -- Step number (i) according to
        -- \cite[ZeroTest]{Steel:AlgebraicClosure:2002}.
        --assert(not ground? x)a
        --assert(x = rep reduce x)
        -- Step (3)
        v: V := mvar x
        n: P := lookup v
        f: NUP % := nunivar(x, v)
        gn: R := getRelation n
        g: NUP % := nunivar(gn, v)
        -- Step (4)
        fbar: EZ := evalPolynomial f
        gbar: EZ := evalPolynomial g
        hbar := gcd(fbar, gbar)
        one? hbar => return false
        -- Step (5)
        c: NUP % := gcd(f, g) -- This might destructively change ts!!!
        --ASSUME that c is the *monic* gcd!!!
        -- Step (6)
        one? c => return false
        --assume(getRelation n = reduce gn)
        --assume(multvar(c, v) = reduce multvar(c, v))
        x: % := multivar(c, v)
        getRelation n = xx => return error "zeroTest!: true"
        -- Step (7)
        e: E := applyPhiGamma x
        h: NUP % := if zero? e then c else (g exquo c)::NUP(%)
        -- make h monic
        lc: % := leadingCoefficient h
        if not one? lc then h := inv(lc)*h
        -- Step (8)
        s: R := rep multivar(h, v) -- that's the new n-th poly of ts.
        -- update the triangular set by reducing all bigger polynomials
        triset: TS := getRelations()
        trilst: List R := cons(s, triset::List(R))
        state.ts := construct(interReduce(trilst)$PSU)
        return true

    zero?(x: %): Boolean ==
        x := reduce xx
        ground? xx => zero?(ground xx)$K
        not zeroTest! xx => false -- might modify x destructively
        x := reduce xx
        ground? xx and zero?(ground xx)$K

    ((x: %) = (y: %)): Boolean == zero?(x-y)
    ((x: %) / (y: %)): % == x * inv y
    ((x: %) exquo (y: %)): Union(%, "failed") ==
        zero? y => "failed"
        x / y

    inv(x: %): % ==
        -- Step number (i) according to
        -- \cite[ZeroTest]{Steel:AlgebraicClosure:2002}.
        zero? x => error "cannot invert zero element"
        --assert(not zero? x)
        ground? xx => per((inv(ground xx)$K)::R)
        -- Step (3)
        v: V := mvar xx
        f: NUP % := nunivar(xx, v)
        n: P := lookup v
        gn: R := getRelation n
        g: NUP % := nunivar(gn, v)
        -- Step (4)
        cu: G1 := halfExtendedSubResultantGcd1(f, g)
        -- Step (5)
        c: NUP % := cu.gcd
        import from N
        not zero? degree c => error "ffalgclos: inv: gcd is not a constant"
        lcc: % := leadingCoefficient c
        inv(lcc) * multivar(cu.coef1, v)

    recip(x: %): Union(%, "failed") ==
        zero? x => "failed"
        inv(x)::Union(%, "failed")

    squareFreePolynomial(poly: SUP %): Factored SUP % ==
        squareFree(poly)$UnivariatePolynomialSquareFree(%, SUP %)

    imaginaryI(): % == -- sqrt(-1)
        t: XHashTable(Z, %) := state.nthRootsOfUnity
        key?(4, t) => return t.4
        -- Is ther a extension polynomial of the form x^2+1?
        triset: List R := getRelations()::List(R)
        for f in triset for rrec in state.roots repeat
            ff := univar(f, mvar f)
            --assert(not zero? reductum ff)
            if degree ff = 2 then
                g := reductum ff
                zero? degree g and one? leadingCoefficient g =>
                    t.4 := rrec.rr
                    return rrec.rr

        -- Note that we should store the positive I first in xroots.
        for rrec in state.xroots repeat -- already among xroots
            zero?((rrec.ee)^2+1) and zero?((r:=rrec.rr)^2+1) =>
                t.4 := r -- entry for 4th root of unity
                return r
        extendBy!(monomial(1, 2)$SUP(%) + monomial(1, 0)$SUP(%))

    sqrtOfSquareFreePositiveInteger(z: Z): % ==
        --assert(z>0)
        zx: % := (- z)::Q::%
        e := z::E
        for rrec in state.xroots repeat
            if (rrec.ee)^2=e and zero?((r := rrec.rr)^2 + zx) then return r
        extendBy!(monomial(1, 2)$SUP(%) + monomial(zx, 0)$SUP(%))

    sqrtOfRational(xq: Q): % ==
        i: % := 1
        dr: Z := 1; nr: Z := 1 -- root of denom and numer
        d: Z := denom xq -- assume that is positive
        n: Z := numer xq
        if n < 0 then
            n := -n
            i: % := imaginaryI()
            one? d and one? n => return i

        mxq: Q := - xq
        zx: % := mxq :: %
        e := applyPhiK mxq
        for rrec in state.xroots repeat -- check existing roots
            zero?((rrec.ee)^2+e) and zero?((r:=rrec.rr)^2+zx) => return i*r

        not(d < max()$SI and n < max()$SI) =>
            extendBy!(monomial(1, 2)$SUP(%) + monomial(zx, 0)$SUP(%))

        -- xq is sufficiently small
        z: % := 1
        fl := factorList factor n
        for f in fl repeat
            a := f.factor
            if odd?(f.exponent) then z := z * sqrtOfSquareFreePositiveInteger a
            nr := nr * a^shift(f.exponent, -1)
        fl := factorList factor d
        for f in fl repeat
            a: Z := f.factor
            dr := dr * a^shift(f.exponent, -1)
            if odd?(f.exponent) then
                dr := dr * a
                z := z * sqrtOfSquareFreePositiveInteger a -- numerator
        (nr/dr)*i*z

    retractToQIfCan(poly: SUP %): Union(SUP Q, "failed") ==
        result: SUP Q := 0
        while not zero? poly repeat
            lc: % := leadingCoefficient poly
            not ground? rep lc => return "failed"
            result := result + monomial(ground rep lc, degree poly)$SUP(Q)
            poly := reductum poly
        result :: Union(SUP Q, "failed")

    rootOfSquareFreePolynomial(f: SUP %, sy: Symbol): % ==
        -- Check whether one of the existing roots (or their negation)
        -- is a result.
        fbar: EZ := evalPolynomial(f pretend NUP %)
        for rrec in state.xroots repeat
            if zero? fbar(rrec.ee) and zero? f(r := rrec.rr) then return r

        -- If poly has only small rational coefficients, we try to
        -- factor over Q, otherwise we just extend by f
        fq := retractToQIfCan f
        fq case "failed" => extendBy! f

        fl := factorList factor(fq::SUP(Q))
        g: SUP Q := first(fl).factor
        d: N := degree g
        one? d => return (-coefficient(g, 0))::%
        for frec in rest fl repeat
            if degree(frec.factor) < d then
                g := frec.factor
                d := degree g
                one? d => return (-coefficient(g, 0))::%

        d > 2 =>
            f := map(coerce, g)$SparseUnivariatePolynomialFunctions2(Q, %)
            extendBy! f

        -- use formula for quadratic equations (f is monoic)
        b: Q := (1/2)*coefficient(g, 1)
        c: Q := coefficient(g, 0)
        sqrtOfRational(b^2-c) - b::%

    rootOf(poly: SUP %, sy: Symbol): % ==
        -- First determine a minimal degree squarefree factor
        fl: FL := factorList(squareFreePolynomial poly)$Factored(SUP %)
        f: SUP % := first(fl).factor
        d: N := degree f
        one? d => return -coefficient(f, 0)
        for frec in rest fl repeat
            if degree(frec.factor) < d then
                f := frec.factor
                d := degree f
                one? d => return -coefficient(f, 0)
        -- now f is squarefee and of min degree in the squarefree decomposition
        return rootOfSquareFreePolynomial(f, sy)

    addRoots(e: E, r: %, roots: List RREC): List RREC ==
        for rrec in roots repeat
            if e = rrec.ee then
                if r = rrec.rr then return roots -- nothing to add
        return cons([-e, -r]$RREC, cons([e, r]$RREC, roots))

    addToRoots(r: %, n: Z, primNthRootOfUnity: %, xr: List RREC): List RREC ==
        e: E := applyPhiGamma r
        pe: E := applyPhiGamma primNthRootOfUnity
        for i in 1..n-1 repeat
            r := r * primNthRootOfUnity
            e := e * pe
            xr := addRoots(e, r, xr)
        reverse! xr

    internalPrimitiveNthRootOfUnity(n: Z): % ==
        n < 2 => 1
        n = 2 => -1
        cyclo: SUP Z := (cyclotomic(n)$CyclotomicPolynomialPackage)
        f := map(coerce, cyclo)$SparseUnivariatePolynomialFunctions2(Z, %)
        rootOfSquareFreePolynomial(f, dummysy)

    primitiveNthRootOfUnity(n: Z): % ==
        t: XHashTable(Z, %) := state.nthRootsOfUnity
        key?(n, t) => return t.n
        r: % := internalPrimitiveNthRootOfUnity n
        t.n := r -- remember that we know an nth root of unity
        xr := reverse(state.xroots)
        state.xroots := addToRoots(1$%, n, r, xr)
        return r

    ((x: %) ^ (q: Q)): % ==
        one? x => x
        n: Z := numer q
        n < 0 => inv(x)^(-n/denom(q))
        zero? x => x
        denom q = 2 => (sqrt x)^n
        d: N := asN denom q
        f: SUP % := monomial(1, d)$SUP(%) - monomial(x, 0)$SUP(%)
        r: % := rootOf f
        xr := reverse(state.xroots)
        state.xroots := addToRoots(r, d, primitiveNthRootOfUnity d, xr)
        return r^n

    sqrt(x: %): % ==
        zero? x => 0
        ground? xx => sqrtOfRational ground xx
        f: SUP % := monomial(1, 2)$SUP(%) - monomial(x, 0)$SUP(%)
        rootOf f

    -- auxiliary factorSquareFreePolynomial
    fsfp(f: SUP %, n: N): Factored(SUP %) ==
        --assert(squareFree? f)
        --assert(one? leadingCoefficient(f))
        roots: List % := rootsOf f -- if squarefree then all roots distinct!
        fl: FL := [["prime", mon - r::SUP(%), n] for r in roots]
        for rrec in state.xroots repeat roots := remove!(rrec.rr, roots)
        rroots: List RREC := [[applyPhiGamma r, r] for r in roots]
        state.xroots := concat!(state.xroots, rroots)
        makeFR(1, fl)

    factorSquareFreePolynomial(poly: SUP %): Factored(SUP %) == fsfp(poly, 1)

    factorPolynomial(poly: SUP %): Factored(SUP %) ==
        sqfr: Factored SUP % := squareFree poly
        u: SUP % := unit sqfr
        fl: FL := factorList sqfr
        fac := first fl
        res: Factored SUP % := fsfp(fac.factor, fac.exponent)
        for fac in rest fl repeat
            res := mergeFactors(res, fsfp(fac.factor, fac.exponent))
        makeFR(u*unit res, factorList res)




)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
