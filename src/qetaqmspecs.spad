-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Monoid basis for (generalized) eta-quotients}
\author{Ralf Hemmecke}
\date{10-Dec-2015}
\maketitle
\begin{abstract}
  We compute a monoid basis for the set of eta-quotients of level $N$
  that are modular functions for $\Gamma_0(N)$ or generalized
  eta-quotients that are modular function for $\Gamma_1(N)$.

  We compute specifications for (generalized) eta-quotients having
  poles at any cusp as well as those having a (multiple) pole, if any,
  at infinity only.

  The code build a integer-linear problem, see
  \cite{HemmeckeRadu_EtaRelations_2019}, \ie, it builds the
  respective matrices of an integer problem and then lets the program
  \algo{4ti2}\footnote{4ti2~1.6.7~\cite{FourTITwo_X4ti2_2018}} solve
  that system. A Similar algorithms for generalized eta-quotients is
  used, see \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

First of all for debugging.
)endif
OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))
errorPrint(x,y) ==> tracePrint(x,y)

)if LiterateDoc
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
SQ ==> Matrix Q -- SquareMatrix(n, Q)
MZ ==> Matrix Z
MQ ==> Matrix Q
VZ ==> Vector Z
VQ ==> Vector Q
LVZ ==> List VZ
RELS ==> VZ -- only entries from {-1, 0, 1} are allowed with meaning {<=,=,>=}
QINPUT ==> Record(qmat: MQ, zrels: RELS, qrhs: VQ)
ZRESULT ==> Record(zinhom: LVZ, zhom: LVZ, zfree: LVZ)
SPEC ==> QEtaSpecification
SPECS ==> List SPEC
CUSPS ==> List Cusp
LLZ ==> List List Z
INDICES ==> LLZ
QETAAUX ==> QEtaAuxiliaryPackage


)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Collection of auxiliary functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif

)abbrev package QEVAUX QEtaQuotientExponentVectorsAux
++ QEtaQuotientExponentVectorsAux provides a number of
++ auxiliary functions for the use in the variants to compute
++ etaQuotientExponentVectors.
QEtaQuotientExponentVectorsAux: with
    smallerGrade?: (LLZ, LLZ) -> Boolean
      ++ smallerGrade?(l1, l2) takes two lists as input and sorts them
      ++ (basically) lexicographically. It is supposed that li is a
      ++ list of the form [[[g1,i1], [g2,i2], ..., [gn,in]] where gk
      ++ is the grade of a powerseries and ik the index of that
      ++ powerseries in a vector. Furthermore, we assume that l1 and
      ++ l2 have equal lengths and are themselves sorted descendingly.
    sortByComponentGrade: (P, List VZ) -> LLZ
      ++ rs := sortByComponentGrade(m, gens) sorts gens such that if
      ++ ri:=vector(rs.i), rj:=vector(rs.j), and i<j then
      ++ smallerGrade?(toG(ri, t).sgi, toG(rj, t).sgi) holds where
      ++ t:=transpose(matrixLigozat(m)$QCONDM0) and toG computes
      ++ the respective sorted grades.
      ++ Informally, since the gens correspond to exponent vectors of
      ++ eta-quotients and t to the transpose of the Ligozat matrix,
      ++ v*t corresponds to the orders of the q-expansions at the
      ++ respective cusps. This function orders the gens in such a way
      ++ that the vector whose maximum grade (maximum taken over all
      ++ cusps) is minimal comes first.
  == add
    G ==> Record(sgi: LLZ, rvec: VZ)
        -- sgi = sorted grade and index list

    smallerGrade?(l1: LLZ, l2: LLZ): Boolean ==
        --assert(#(g1.sgi = #g2.sgi)
        for x1 in l1 for x2 in l2 repeat
           first x1 < first x2 => return true
           first x1 > first x2 => return false
           first rest x1 < first rest x2 => return true
           first rest x1 > first rest x2 => return false
        -- arriving here says that l1 = l2
        false
    toG(v: VZ, t: MZ): G ==
        o: VZ := v*t
        sgilist: LLZ := sort(_>, [[-o.i, i] for i in 1..#o])
        [sgilist, v]

    smallerGradeG?(g1: G, g2: G): Boolean == smallerGrade?(g1.sgi, g2.sgi)

    sortByComponentGrade(m: P, gens: List VZ): LLZ ==
        empty? gens => empty()
        t: MZ := transpose(matrixLigozat(m)$QEtaConditionsModularGamma0)
        ggens: List G := [toG(v, t) for v in gens]
        z := [members(g.rvec) for g in sort!(smallerGradeG?, ggens)]


)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Monoid of eta-quotients with poles only at infinity using
  4ti2}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev package QES4TI2 QEtaQuotientSpecifications4ti2
++ QEtaQuotientSpecificationss4ti2 computes a monoid basis of
++ (specifications for) (generalized) eta-quotients with a pole at
++ most at infinity.
QEtaQuotientSpecifications4ti2(MOD): Exports == Implementation where
  MOD: QEtaConditionsModularCategory
  Exports ==> with
    etaQuotientMonoidInfinitySpecifications: (P, INDICES) -> SPECS
      ++ etaQuotientMonoidInfinitySpecifications(nn,idxs) returns
      ++ etaQuotientMonoidSpecifications(nn,[infinity()],idxs).
    etaQuotientMonoidSolutions: (P, CUSPS, INDICES) -> ZRESULT
      ++ etaQuotientMonoidSolutions(nn,polesat,idxs) returns
      ++ zsolve(etaQuotientMonoidSystem(nn,polesat,idxs)).
    etaQuotientMonoidSpecifications: (P, CUSPS, INDICES) -> SPECS
      ++ etaQuotientMonoidSpecifications(nn,polesat,idxs) returns
      ++ specifications of (generalized) eta-quotients that (together
      ++ with 1) generate the (multiplicative) monoid of all
      ++ (generalized) eta-quotients (corresponding to the indices
      ++ given by idxs) that are modular functions wrt. MOD and have
      ++ at most poles at the cuspe given by polesat. Specifications s
      ++ that are known to represent constant modular function, are
      ++ included in the result as s and inv(s).
    freeSpecifications: (P, INDICES, ZRESULT) -> SPECS
      ++ freeSpecifications(nn,idxs,zres) extracts from zres the zfree
      ++ part sorted with smallest poleorder(s) first.
    homogeneousSpecifications: (P, INDICES, ZRESULT) -> SPECS
      ++ homogeneousSpecifications(nn,idxs,zres) extracts from
      ++ zres the zhom part sorted with smallest poleorder(s) first.
    nonConstantEtaQuotientMonoidInfinitySpecifications: (P, INDICES) -> SPECS
      ++ nonConstantEtaQuotientMonoidInfinitySpecifications(nn,idxs)
      ++ returns
      ++ nonConstantEtaQuotientMonoidSpecifications(nn,[infinity()],idxs).
    nonConstantEtaQuotientMonoidSpecifications: (P, CUSPS, INDICES) -> SPECS
      ++ nonConstantEtaQuotientMonoidSpecifications(nn,polesat,idxs)
      ++ returns those elements from
      ++ etaQuotientMonoidSpecifications(nn,polesat,idxs) that do not
      ++ represent a constant modular functions.
    etaQuotientSpecifications: (P, INDICES, Z) -> SPECS
      ++ etaQuotientSpecifications(nn,idxs,grd) returns
      ++ specifications for generatilzed eta-quotients with a pole of
      ++ pole-order grd>0 at infinity and no pole at any other cusp.

  Implementation ==> add

    G ==> Record(sgi: LLZ, rvec: VZ)
        -- sgi = sorted grade and index list

    -- local
    smallerGrade?(l1: LLZ, l2: LLZ): Boolean ==
        --assert(#(g1.sgi = #g2.sgi)
        for x1 in l1 for x2 in l2 repeat
           first x1 < first x2 => return true
           first x1 > first x2 => return false
           first rest x1 < first rest x2 => return true
           first rest x1 > first rest x2 => return false
        -- arriving here says that l1 = l2
        false

    -- local
    toG(t: MQ, v: VZ): G ==
        grds: VZ := new(nrows t, 0)
        for i in 1..nrows t repeat
            q: Q := 0
            for j in 1..ncols t repeat q := q + v.j*t(i, j)
            not one? denom q => error "toG: non-vanishing denominator"
            grds.i := - numer q
        sgilist: LLZ := sort(_>, [[grds.i, i] for i in 1..#grds])
        [sgilist, v]

    -- local
    smallerGradeG?(g1: G, g2: G): Boolean == smallerGrade?(g1.sgi, g2.sgi)

    -- local
    -- assertTrue(modular?(b)) for b in bspecs
    sortByComponentGrade(nn: P, idxs: INDICES, gens: List VZ): LLZ ==
        empty? gens => empty()
        spitzen: CUSPS := cusps(nn)$MOD
        t: MQ := matrixEtaOrder(nn, spitzen, idxs)$MOD
        ggens: List G := [toG(t, v) for v in gens]
        [members(g.rvec) for g in sort!(smallerGradeG?, ggens)]

    -- local
    sortedSpecifications(nn: P, idxs: INDICES, sols: LVZ): SPECS ==
        -- We sort the resulting specifications for the homogeneous
        -- system by the pole-order of the respective (generalized)
        -- eta-quotient (smallest poleorder first). Let
        -- qin:QINPUT:=etaQuotientMonoidSystem(nn,polesat,idxs). We
        -- assume that sols=zsolve(qin).zhom. or zsolve(qin).zfree.
        empty? sols => empty()$SPECS
        n: Z := # idxs
        lvz: LVZ := [g(1..n) for g in sols]
        lle: LLZ := sortByComponentGrade(nn, idxs, lvz)
        [etaQuotientSpecification(nn, idxs, le) for le in lle]

    -- local
    rowPos(row: VQ, matmod: MQ): Z ==
        cord: N := #row
        for i in 1..nrows matmod repeat
            equalRow?: Boolean := true
            for j in 1..cord repeat
                if row.j ~= matmod(i, j) then
                    equalRow? := false
                    break
            if equalRow? then return i -- return the row index
        return 0

    ---------------------------------------------------------------
    -- exported functions
    ---------------------------------------------------------------

    etaQuotientMonoidSolutions(nn: P, polesat: CUSPS, idxs: INDICES): ZRESULT ==
        zsolve(etaQuotientMonoidSystem(nn, polesat, idxs)$MOD)$X4ti2

    homogeneousSpecifications(nn: P, idxs: INDICES, zres: ZRESULT): SPECS ==
        sortedSpecifications(nn, idxs, zres.zhom)
    freeSpecifications(nn: P, idxs: INDICES, zres: ZRESULT): SPECS ==
        sortedSpecifications(nn, idxs, zres.zfree)

    nonConstantEtaQuotientMonoidSpecifications(_
      nn: P, polesat: CUSPS, idxs: INDICES): SPECS ==
        zres: ZRESULT := etaQuotientMonoidSolutions(nn, polesat, idxs)
        homogeneousSpecifications(nn, idxs, zres)

    etaQuotientMonoidSpecifications(_
      nn: P, polesat: CUSPS, idxs: INDICES): SPECS ==
        zres: ZRESULT := etaQuotientMonoidSolutions(nn, polesat, idxs)
        fspecs0: SPECS := freeSpecifications(nn, idxs, zres)
        fspecs: SPECS := concat [[s, inv s] for s in fspecs0]
        hspecs: SPECS := homogeneousSpecifications(nn, idxs, zres)
        concat(fspecs, hspecs)

    etaQuotientMonoidInfinitySpecifications(nn: P, idxs: INDICES): SPECS ==
        etaQuotientMonoidSpecifications(nn,[infinity()],idxs)

    nonConstantEtaQuotientMonoidInfinitySpecifications(_
      nn: P, idxs: INDICES): SPECS ==
        nonConstantEtaQuotientMonoidSpecifications(nn,[infinity()],idxs)

    -- Below we try to compute eta-quotients that have only a pole at
    -- infinity of order poleorder>0.
    etaQuotientSpecifications(nn: P, idxs: INDICES, poleorder: Z): SPECS ==
        -- At the cusp infinity (=1/nn) the order must be an integer.
        -- Since, however, we require the result to be an explicit
        -- integer poleorder, the row in matrixModular that has the
        -- same entries as the one for infinity in matrixEtaOrder can
        -- be removed from matmod. Of course, we can then also remove
        -- the respective zero column.
        spitzen: CUSPS := reverse!(cusps(nn)$MOD) -- first is infinity

        matmod: MQ := matrixModular(nn, idxs)$MOD
        matord: MQ := matrixEtaOrder(nn, spitzen, idxs)$MOD
        -- Find a row of matmod that is equal to the first row in matord.
        p: Z := rowPos(row(matord, 1), matmod)

        cord: N := ncols matord
        if not zero? p then -- remove p-th row and c-th col with mathmod(p,c)=1
            rs: List Z := [i for i in 1..nrows matmod | i ~= p]
            cs: List Z := [j for j in 1..ncols matmod | j<=cord or matmod(p,j)=1]
            matmod := matmod(rs, cs)
        mat: MQ := verticalConcat(matord, matmod)$QETAAUX
        m: N := nrows mat
        b: VQ := new(m, 0) -- the right hand side vector
        --assert(first(spitzen)=infinity()$Cusp)
        b.1 := (- poleorder)::Q -- we clear denominators in matrix later

        rels: VZ := new(m, 0) -- all equations
        for i in 2..nrows(matord) repeat rels.i := 1 -- non-negative order
        qin: QINPUT := [mat, rels, b]
        res: ZRESULT := zsolve(qin)$X4ti2;
        n: N := #idxs
        lle: LLZ := [members g(1..n) for g in res.zinhom]
        [etaQuotientSpecification(nn, idxs, le) for le in lle]



)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Compute a basis for $R^*(N)$}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

A description of which data has to be fed to the program
\textsf{4ti2}\footnote{4ti2~1.6.7~\cite{FourTITwo_X4ti2_2018}} is
described in \cite{HemmeckeRadu_EtaRelations_2019}, in particular in
Section~6 and Section~8.

In the following, we compute just a basis for $R^*(N)$ (not
$R^\infty(N)$). In fact, it is sufficient to compute a basis for the
nullspace for the matrix $B_N$ (see
\cite[Section~6]{HemmeckeRadu_EtaRelations_2019}).

)endif

)abbrev package QMEVSTAR QEtaQuotientMonoidExponentVectorsStar
++ QEtaQuotientMonoidExponentVectorsStar helps to do computations with
++ eta-functions and quotients of eta-functions expressed in terms of
++ the q-series.
QEtaQuotientMonoidExponentVectorsStar: with
    etaQuotientMonoidExponentVectors: P -> LLZ
    etaQuotientMonoidExponentVectorsX: P -> LLZ
      ++ etaQuotientMonoidExponentVectors(m) returns Z-vectors $r$ (of
      ++ dimension n, where n=#(divisors m)). These vectors form a
      ++ Z-basis of $R^*(N)$ as defined in
      ++ \cite{HemmeckeRadu_EtaRelations_2019}).
      ++ The version with X at the end tries to make the resulting
      ++ vector of the orders of the series small in absolute value.
    basisReduction: (List VZ, Vector Z) -> List VZ
      ++ basisReduction(basis, ix) assumes that for each
      ++ vector b in basis and each i in 1..#ix:
      ++ If ix.i > 0, then b.i > 0, if ix.i < 0, then b.i <= 0,
      ++ if ix.i = 0, then this entry is ignored.
      ++ It returns another basis bas such that with the same property
      ++ as the input basis and additionally, for each i in 1..ix,
      ++ length(bas.i)^2 <= length(basis.i).
    extendedBasisReduction: (List VZ, Vector Z) -> List VZ
      ++ extendedBasisRedcution(basis, ix) returns the same as
      ++ basisReduction(basis, ix) except that before calling
      ++ basisReduction, each vector from basis gets extended by the
      ++ respective unit vector.
  == add
    QEVAux ==> QEtaQuotientExponentVectorsAux
    MOD0 ==> QEtaConditionsModularGamma0
--    matrixModularGamma0: P -> MZ
--      ++ matrixModularGamma0(nn) returns a matrix mat such that if
--      ++ divs:=divisors(nn), n=#divisors(nn) and v is such that
--      ++ mat*v=0 then v(1..n) is in R^*(nn), in other words, the
--      ++ nullspace of mat "generates" R^*(nn). The first row of mat
--      ++ corresponds sum(r.i, i=1..n). The second row of mat
--      ++ corresponds to the sum(divs.i*r.i,i=1..n)+24*r(n+1). The
--      ++ third row of mat corresponds to the
--      ++ sum((nn/divs.i)*r.i,i=1..n)+24*r(n+2). The function computes
--      ++ matrix B_N (equation (8) from
--      ++ \cite{HemmeckeRadu_EtaRelations_2019}
--      ++ \url{http://www.risc.jku.at/publications/download/risc_5561/etarelations.pdf}
--      ++ (DOI:10.1016/j.jsc.2018.10.001). matrixModularGamma0(nn)
--      ++ returns a
--      ++ matrixModularGamma0(nn,idxs)$QEtaConditionsModularGamma0 for
--      ++ idxs:=etaFunctionIndices(nn).

    -- local
    matrixModularGamma0(nn: P): MZ ==
        matQ := matrixModular(nn, etaFunctionIndices(nn)$SPEC)$MOD0
        mat: MZ := new(nrows matQ, ncols matQ, 0)
        for i in 1..nrows matQ repeat for j in 1..ncols matQ repeat
            qsetelt!(mat, i, j, numer qelt(matQ, i, j))
        mat

    integerNullSpace(mat: MZ): List VZ ==
        v: VZ := new(nrows mat, 0)
        sol := diophantineSystem(mat, v)$SmithNormalForm(Z, VZ, VZ, MZ)
        sol.basis

    -- exported functions
    etaQuotientMonoidExponentVectors(m: P): LLZ ==
        matmod0: MZ := matrixModularGamma0(m)
        gens: List VZ := integerNullSpace matmod0
        mat: MZ := matrix [entries v for v in gens]
        lat: MZ := LLL(mat)$LLLReduction
        ll: LLZ := listOfLists lat
        ll2: LLZ := [[-x for x in l] for l in ll]
        sortByComponentGrade(m, [vector l for l in concat(ll, ll2)]) $ QEVAux

    etaQuotientMonoidExponentVectorsX(m: P): LLZ ==
        divs: List Z := divisors(m)$IntegerNumberTheoryFunctions
        matmod0: MZ := matrixModularGamma0(m)
        gens: List VZ := integerNullSpace matmod0
        mat: MZ := matrix [[x for x in entries v for d in divs] for v in gens]
        ligozat: MZ := matrixLigozat(m)$MOD0
        ligozat := transpose ligozat
        ords := mat * ligozat
        rec: Record(lll: MZ, trf: MZ) := extendedLLL(ords)$LLLReduction
        t: MZ := rec.trf
        lat: MZ := t*mat
        ll: LLZ := listOfLists lat
        ll2: LLZ := [[-x for x in l] for l in ll]
        sortByComponentGrade(m, [vector l for l in concat(ll, ll2)]) $ QEVAux

    good?(v: VZ, ix: VZ): Boolean ==
        for i in 1..#ix repeat if ix.i < 0 and v.i > 0 then return false
        true

    greater?(x: VZ, y: VZ, ix: VZ): Boolean ==
        for i in 1..#ix repeat
            if ix.i < 0 and x.i > y.i then return false
        true

    length2(v: VZ, ix: VZ): Z ==
        len := 0
        for i in 1..#ix repeat if ix.i > 0 and v.i > 0 then
            len := len + (v.i)^2
        len

    basisReduction(basis: List VZ, ix: VZ): List VZ ==
        for b in basis repeat if not good?(b, ix) then
            errorPrint("b", b)
            errorPrint("ix", ix)
            error "basis does not fulfil input condition"
        red? := true
        n: Z := #ix
        bas: Vector VZ := vector basis
        while zero? ix.n repeat n := n - 1
        while red? repeat
            red? := false
            for i in 1..#bas repeat
                b := bas.i
                lb := length2(b, ix)
                tracePrint("i,lb,b", [vector [i, lb], b]@List VZ)
                for k in 1..#bas | k ~= i repeat
                    v := bas.k
                    while greater?(b, v, ix) and
                          (r: VZ := b - v; lr: Z := length2(r, ix);  lr < lb)
                      repeat
                        b := r
                        lb := lr
                        red? := true -- one reduction happened
                bas.i := b
        return members bas

    extendedBasisReduction(basis: List VZ, ix: VZ): List VZ ==
        empty? basis => return empty()
        l: N := # first basis
        n: N := # basis
        e: N := l + n
        bas: List VZ := empty()
        for b in basis for i in l+1.. repeat
           v: VZ := new(e, 0)
           copyInto!(v, b, 1)
           qsetelt!(v, i, 1) -- construct attached unit matrix
           bas := cons(v, bas)
        bas := reverse!(bas)
        red := basisReduction(bas, ix)




)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
