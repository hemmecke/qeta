-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

OF==>OutputForm
dbgPrint(x,y) ==> print(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF))
--dbgPrint(x,y) ==> display(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF)::LinearOutputFormat, 770)
xdbgPrint(x,y) ==> rhx:="42"

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\usepackage{showlabels}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Expanding Dedekind Eta Functions into $q$-series}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}

  Find a cofactor to turn a function related to a $q$-series into a
  modular function.

\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Problem}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We try to find all missing parts to find a Ramanujan-Kolberg relation
as defined in \cite[p.~227]{Radu:RamanujanKolberg:2015}.

Assume that we are given a series
\begin{gather*}
  \sum_{n=0}^\infty a(n) q^n
  =
  \prod_{\delta|M}\prod_{n=0}^\infty(1-q^{\delta n})^{r_\delta}
\end{gather*}
and want to express $\sum_{n=0}^\infty a(mn+t) q^n$ where $m$ and $M$
are a positive integers with $m|M$, $r\in R(M)$, and
$t\in\Set{0,\ldots,m-1}$ as a $\setQ$-linear combination of
eta-quotients and (maybe) an appropriate power of
$q^{1/24}=\unityPower{\frac{\tau}{24}}$.






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
MZ ==> Matrix Integer
Rec ==> Record(red: MZ, triang: MZ, tg: Z)
EXGCD ==> Record(coef1: Z, coef2: Z, generator: Z)

)abbrev package QETAKOL QEtaKolberg
QEtaKolberg: Exports == Implementation where
  Exports ==> with
    kappa: P -> P
    chiExponent: (P, Z, List N) -> Z
    orbit: (Z, P, N) -> List N
    splitMatrix: (MZ, Z, Z, Z) -> Rec
      ++ splitMatrix(gamma, delta, m, t) returns a record rec that
      ++ contains two matrices rec.red=m1 and rec.triang=m2 such that
      ++ for gamma = matrix [[a, b], [c, d]] and
      ++ W=matrix [[delta(a+ct), delta(b+dt)],[cm, dn]] it holds
      ++ W=m1*m2 according to \cide[Lemma~4.8]{Radu:PhD:2010}, but
      ++ in a variation as described in qetafun.spad, i.e., such that
      ++ 0<=m2(1,2)<deltam where g = gcd(mat(1,1), mat(2,1)).

  Implementation ==> add
    chiExponent(m: P, sigmaInfty: Z, orb: List N): Z ==
        s: Z := 0
        for t in orb repeat s := s + 24*t
        s := s + sigmaInfty * #orb
        positiveRemainder((1-m^2)*((s exquo m)::Z), 24)

    kappa(m: P): P == -- gcd(1-m^2, 24) -- m = level
        (even? m => 1; 8) * (zero? positiveRemainder(m, 3) => 1; 3)

    circleBar(a2: Z, sigmaInfty: Z, m: P, t: N): N ==
        --assert(one? positiveRemainder(a2, 24))
        z: Z := positiveRemainder(t*a2+(((a2-1) exquo 24)::Z)*sigmaInfty, m)
        qcoerce(z)@N

    -- The following function computes P_{m,r}(t).
    orbit(sigmaInfty: Z, m: P, t: N): List N ==
        k: P := kappa m
        g := gcd(k*(24*t + sigmaInfty), 24*m)
        w: Z := qcoerce((24*m exquo g)::Z)@P
        sw: List Z := empty()
        for a in 0..w-1 | one? gcd(a, w) repeat
            a2 := positiveRemainder(a^2, w)
            if not member?(a2, sw) then sw := cons(a2, sw)
        s: List Z := empty()
        --assert(one? gcd(w, 24)) -- proof
        --choose a representative (mod w) that is divisible by 24
        for a2 in sw repeat
            u: Z := a2
            while not one? positiveRemainder(u, 24) repeat u := u + w
            s := cons(u, s)
        sort [circleBar(a2, sigmaInfty, m, t) for a2 in s]

    splitMatrix(gamma: MZ, delta: Z, m: Z, t: Z): Rec ==
        LZ ==> List Z
        LLZ ==> List LZ
        --assert(delta>0)
        --assert(m>0)
        --assert(one? determinat(gamma))
        --assert(zero? positiveRemainder(c*m, delta))

        a: Z := gamma(1,1);   b: Z := gamma(1,2)
        c: Z := gamma(2,1);   d: Z := gamma(2,2)

        act: Z := a + c*t;    bdt := b + d*t

        -- matrix W
        A: Z := delta * act;  B: Z := delta * bdt
        C: Z := c*m;          D: Z := d*m

        exgcd: EXGCD := extendedEuclidean(act, C)
        g: Z := exgcd.generator
        --assert(one? g) -- sanity check
        if not one? g then error "splitMatrix: gcd is not 1"

        a1: Z := act
        c1: Z := (C exquo delta) :: Z -- cm/delta

        d1i: Z    :=  exgcd.coef1 -- initial value for d1
        bstari: Z := -exgcd.coef2 -- initial value for bstar

        -- Now try to find s such that 0 <= bdt*d1 - D*b1 - s*d2 < d2.
        tgammai: Z := bdt*d1i - D*bstari -- initial value
        tgamma: Z := positiveRemainder(tgammai, m) -- = t_\gamma
        s: Z := ((tgammai - tgamma) exquo m) :: Z
        b1: Z := delta * (bstari + act * s)
        d1: Z := d1i + delta * s * c1

        m1: MZ := matrix([[a1, b1], [c1, d1]]$LLZ)
        m2: MZ := matrix([[delta, delta * tgamma], [0, m]]$LLZ)
        [m1, m2, tgamma]$Rec


)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif

)if false


    relationRamanujanKolberg(level: P, m: P, t: N, r: RVector):
--        Record(s: RVector, t: List(N), rhs: MonoidRing(C, MRVector))
        List N
      ==
        empty()

    -- See \cite[Thm.~45]{Radu:RamanujanKolberg:2015}.
    -- m = m, t=t, M=ilevel, N=level
    coFactorConditions(level: P, ilevel: P, m: P, t: Z, r: List Z): MZ ==
        --assert(#r=#divisors(ilevel))
        --assert(zero? postiveRemainder(level, ilevel))
        -- DeltaStar-Conditions
        -- \cite[Def.~34]{Radu:RamanujanKolberg:2015} must be fulfilled.
        p := orbit(level, sigmainfty, m, t, r)
        orbitSize := #p
        divs: List P := [qcoerce(d)@P for d in divisors(level)]
        k: P := kappa m
        c1 := orbitSize * reduce(_+, r)
        c2 := chiExponent(m, r, orb)
)endif
