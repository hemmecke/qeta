-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

OF==>OutputForm
dbgPrint(x,y) ==> print(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF))
--dbgPrint(x,y) ==> display(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF)::LinearOutputFormat, 770)
xdbgPrint(x,y) ==> rhx:="42"

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\usepackage{showlabels}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Expanding Dedekind Eta Functions into $q$-series}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
  The package \code{QEtaKolberg} implements functions to help turning
  a sifted eta quotient into a modular function by finding an
  appropriate cofactor.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Problem}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We try to find all missing parts to find a Ramanujan-Kolberg relation
as defined in \cite[p.~227]{Radu:RamanujanKolberg:2015}.

Assume that we are given a series
\begin{gather*}
  \sum_{n=0}^\infty a(n) q^n
  =
  \prod_{\delta|M}\prod_{n=0}^\infty(1-q^{\delta n})^{r_\delta}
\end{gather*}
and want to express $\sum_{n=0}^\infty a(mn+t) q^n$ where $m$ and $M$
are a positive integers with $m|M$, $r\in R(M)$, and
$t\in\Set{0,\ldots,m-1}$ as a $\setQ$-linear combination of
eta-quotients and (maybe) an appropriate power of
$q^{1/24}=\unityPower{\frac{\tau}{24}}$.

For mathematical background see \PathName{qetafun.spad}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
VZ ==> Vector Z
MZ ==> Matrix Z
Rec ==> Record(red: SL2Z, lg: N)
EXGCD ==> Record(coef1: Z, coef2: Z, generator: Z)
LP ==> List P
LZ ==> List Z
QAuxMEQ ==> QAuxiliaryModularEtaQuotientPackage

INTF ==> IntegerNumberTheoryFunctions
DIVISORS m ==>  [qcoerce(d)@P for d in divisors(m)$INTF]

-- Note that in the following correspondence between programming variables
-- and notation in the mathematical description in qetafun.spad.
-- Variable   <--> mathematical notation
-- m               m
-- mm              M
-- nn              N
-- sigmaInfty      \sumdelta{r}
-- kappa(m)        \kappa

)abbrev package QETAKOL QEtaKolberg
QEtaKolberg: Exports == Implementation where
  Exports ==> with
    modularInputConditions?: (P, P, LZ, P, N) -> Boolean
      ++ modularInputConditions?(nn, mm, s, m, t) returns true iff all
      ++ the conditions for the parameters are fulfilled.
      ++ This checks whether (nn, mm, s, m, t) is in \Delta^* as
      ++ defined in Definition~\ref{def:modular-input-conditions}.
    modularConditions?: (P, LZ, P, LZ, P, N) -> Boolean
      ++ modularConditions?(nn, r, mm, s, m, t) returns true iff all
      ++ the conditions of Theorem~\ref{thm:RaduConditions} are
      ++ fulfilled.
      ++ Compare with rStarConditions from QAuxiliaryModularEtaQuotientPackage.
    modularConditions?: (P, LZ) -> Boolean
      ++ modularConditions?(nn, r) returns true iff
      ++ the eta quotient corresponding to r is a modular function for
      ++ Gamma_0(nn).
      ++ It is equivalent to modularConditions?(nn, r, 1, [0], 1, 0).
      ++ Compare with rStarConditions from QAuxiliaryModularEtaQuotientPackage.
    orbitRadu: (Z, P, N) -> List N
    orbit: (Z, P, N) -> List N
      ++ orbit(sigmaInfty, m, t) computes the elements of
      ++ $\modularOrbit{s,m,t)$ as defined in qetafun.spad,
      ++ \cite[Def.~42]{Radu:RamanujanKolberg:2015} and
      ++ \cite[Lemma 4.35]{Radu:PhD:2010}.
      ++ We assume $sigmaInfty = \sum_{\delta|M} \delta s_\delta$.
    chiExponent: (Z, P, List N) -> Z
      ++ chiExponent(sigmaInfty, m, orb) computes e such that
      ++ $\exp(2\pi i e / 24) = \chi_{s,m,t)$.
      ++ We assume $sigmaInfty = \sum_{\delta|mm} \delta s_\delta$.
      ++ See Lemma \ref{thm:chi-exponent}.
      ++ Furthermore, we assume that orb = orbit(sigmaInfty, m, t).
    etaCoFactorSpace: (P, P, List Z, P, N) -> Record(particular: Union(VZ, "failed"), basis: List VZ) -- List Z
      ++ etaCoFactorSpace(nn, mm, s, m, t) returns a vector v and the
      ++ basis of a space such that #v=#divisors(nn) and
      ++ modularConditions?(nn, members r, mm, s, m, t) is true for any
      ++ r = v + reduce(_+, [z.i * basis.i for i in 1..#basis])
      ++ and any sufficiently long list z of integers.
      ++ The function fails, if there is no such solution.
)if TODO
    splitMatrix: (MZ, Z, Z, N) -> Rec
      ++ splitMatrix(gamma, delta, m, lambda) returns a record rec that
      ++ contains two matrices rec.red=m1 and rec.triang=m2 and a value lg
      ++ such that for gamma = matrix [[a, b], [c, d]] and
      ++ W=matrix [[delta(a+ct), delta(b+dt)],[cm, dm]] it holds
      ++ W=m1*m2 according to \cite[Lemma~4.8]{Radu:PhD:2010}, but
      ++ in a variation as described in qetafun.spad, i.e., such that
      ++ m1 is given by eq:W'_delta-m-lambda, m2 by eq:W''_delta-m-lambda
      ++ and lg by eq:lambda_gamma.
      ++ Furthermore, 0<=lg<m and m2(1,2)=delta*lg
    lambdaGamma: (P, SL2Z, N) -> N
      ++ lambdaGamma(m, gamma, lambda) returns the transformed lambda
      ++ according to gamma. See eq:lambda_gamma in qetafun.spad.
    sigmaInfinity: (N, List Z) -> Z
      ++ sigmaInfinity(mm, r) returns \sum_{delta|mm} delta*r_delta where
      ++ it is assumed that the entries of r correspond to the divisors
      ++ of mm.
      ++ It corresponds to \eqref{eq:sumdelta} in qetafun.spad.
    sigmaZero: (N, List Z) -> Z
      ++ sigmaZero(mm, r) returns \sum_{delta|mm} (mm/delta)*r_delta where
      ++ it is assumed that the entries of r correspond to the divisors
      ++ of mm.
)endif

  Implementation ==> add
    fUnion ==> Union("nil", "sqfr", "irred", "prime")
    FL ==> List Record(flag: fUnion, factor: Z, exponent: N)

    -- auxiliary (local) functions

    -- kappa: P -> P
    --   ++ kappa(m) computes gcd(1-m^2,24).
    kappa(m: P): P == -- gcd(1-m^2, 24)
        ++ \cite[Def.~35]{Radu:RamanujanKolberg:2015}
        (even? m => 1; 8) * (zero? positiveRemainder(m, 3) => 1; 3)

    odotBar(a2: Z, sigmaInfty: Z, m: P, t: N): N ==
        --assert(one? positiveRemainder(a2, 24))
        -- \cite[Def.~41]{Radu:RamanujanKolberg:2015}
        z: Z := positiveRemainder(t*a2+(((a2-1) exquo 24)::Z)*sigmaInfty, m)
        qcoerce(z)@N

    -- Return true iff \eqref{eq:Radu-productsquare} holds.
    checkSquare?(nn: P, mm: P, r: LZ, s: LZ, m: P, orbitSize: Z): Boolean ==
        nndivs: LP := DIVISORS nn
        mmdivs: LP := DIVISORS mm
        fl: FL := factorList factor nn
        -- By \eqref{eq:p|m=>p|N} and \eqref{eq:delta|M=>delta|mN}, it is
        -- enough to consider all prime divisors of N.
        for fe in fl repeat -- do for all primes dividing nn
            p: P := qcoerce(fe.factor)@P -- extract prime factor
            -- Determine whether an even power of p divides
            -- \prod_{\delta|N}\delta^rdelta.
            e1: Z := 0
            for delta in rest nndivs for rdelta in rest r|odd? rdelta repeat
                e1 := e1 + primePower(delta, p)$QAuxMEQ
            e2: Z := 0
            if odd? orbitSize then
                -- check 2nd prod in eq:Radu-productsquare
                em: N := primePower(m, p)
                -- for all divisors of mm > 1
                if odd? first s then e2 := em -- case: delta=1
                for d in rest mmdivs for sdelta in rest s | odd? sdelta repeat
                    -- mod 2, only odd sdelta is relevant.
                    e2 := e2 + em + primePower(d, p)
            if odd?(e1 + e2) then return false
        return true

    -- exported functions

    -- The following function computes \modularOrbit{s, m, t} with the
    -- optimization given by Radu in \cite[Lemma 4.35]{Radu:PhD:2010},
    -- i.e., we do not need to check all entries of \setS_{24m}, but
    -- only those that are not equivalent mod w.
    orbit(sigmaInfty: Z, m: P, t: N): List N ==
        m24: Z := 24*m
        g := gcd(kappa(m)*(24*t + sigmaInfty), m24)
        w: P := qcoerce((m24 exquo g)::Z)@P
        result: List N := empty()
        for a in 0..w-1 | one? gcd(a, w) repeat
            y := a
            while y < m24 and not one? gcd(y, m24) repeat y := y + w
            -- Note that m24=g*w and gcd(a + k*w, m24) =
            -- gcd(a+k*w,g*w) = 1 for k chosen to be the product of
            -- all prime divisors of g that do not divide a and do not
            -- divide w. In other words, the above while loop also
            -- terminates without the "y < m24" condition.
            e := odotBar(positiveRemainder(y^2, m24), sigmaInfty, m, t)
            if not member?(e, result) then result := cons(e, result)
        result

    orbitRadu(sigmaInfty: Z, m: P, t: N): List N ==
        g := gcd(kappa(m)*(24*t + sigmaInfty), 24*m)
        dbgPrint("g", g)
        w: P := qcoerce((24*m exquo g)::Z)@P
        dbgPrint("w", w)
        sw: List Z := empty()
        for a in 0..w-1 | one? gcd(a, w) repeat
            a2 := positiveRemainder(a^2, w)
            dbgPrint("a", a)
            dbgPrint("a2", a2)
            if not member?(a2, sw) then sw := cons(a2, sw)
        dbgPrint("sw", sw)
        s: List Z := empty()
        -- There exists k \in \setN such that a^2+k*w = 1 mod 24
        --choose a representative (mod w) that is divisible by 24
        for a2 in sw repeat
            u: Z := a2
            dbgPrint("u00000", u)
            while not one? positiveRemainder(u, 24) repeat
                u := u + w
                dbgPrint("u", u)
            s := cons(u, s)
        sort [odotBar(a2, sigmaInfty, m, t) for a2 in s]

    chiExponent(sigmaInfty: Z, m: P, orb: List N): Z ==
        x: Z := 24*reduce(_+, orb, 0) + sigmaInfty * #orb
        positiveRemainder((1-m^2)*((x exquo m)::Z), 24)

    etaCoFactorSpace(nn: P, mm: P, s: List Z, m: P, t: N): _
      Record(particular: Union(VZ, "failed"), basis: List VZ) ==
        -- Setup matrix. Then solve inhomogeneous system.
        mat: MZ := rStarConditionMatrix(nn)$QAuxMEQ
        nr: N := nrows mat
        divs: List Z := divisors(mm)$IntegerNumberTheoryFunctions
        d: VZ := vector divs
        n: N := # divs
        w: Z := 0
        sigmaInfty: Z := 0
        sigma0: Z := 0
        for j in 1..n for sdelta in s repeat
            w := w + sdelta
            sigmaInfty := sigmaInfty + d.j * sdelta
            sigma0 := sigma0 + d(n+1-j) * sdelta
        -- Compute \modularOrbit{s, m,t}.
        orb: List N := orbit(sigmaInfty, m, t)
        orbitSize: Z := # orb
        nu: Z := chiExponent(sigmaInfty, m, orb)
        v: Vector Z := new(nr, 0)
        v.1 := - orbitSize * w                   -- \ref{eq:Radu-sum=0}
        v.2 := - nu - orbitSize * m * sigmaInfty -- \ref{eq:Radu-sigmainfinity}
        x: Z := orbitSize * m * nn * sigma0
        v.3 := - ((x exquo mm)::Z)               -- \ref{eq:Radu-sigma0}
        fl: FL := factorList factor nn
        -- Determine the cofactor according to (37) of
        -- \cite{Radu:RamanujanKolberg:2015} for each prime separately.
        -- Or see \ref{eq:Radu-productsquare} in qetafun.spad.
        if even? orbitSize then
            for i in 1..#fl for fe in fl repeat qsetelt!(v, i+3, 0)
        else
            for i in 1..#fl for fe in fl repeat
                p: P := qcoerce(fe.factor)@P -- extract prime factor
                em: N := primePower(m, p)$QAuxMEQ
                -- for all divisors of mm > 1
                e: Z := if odd? first s then em else 0 -- case: delta=1
                for j in 2..n for sdelta in rest s | odd? sdelta repeat
                    -- Mod 2 only odd sdelta is relevant.
                    e := e + em + primePower(qcoerce(d.j)@P, p)$QAuxMEQ
                qsetelt!(v, i+3, positiveRemainder(e, 2))
        -- Now we have a matrix mat and a right-hand side v and need to
        -- solve mat*x=v for x.
        diophantineSystem(mat, v)$SmithNormalForm(Z, VZ, VZ, MZ)

    modularInputConditions?(nn: P, mm: P, s: LZ, m: P, t: N): Boolean ==
        import from FL
        DIVISIBLEBY?(k, z) ==> zero? positiveRemainder(z, k)

        t<0 or t>=m => false

        --\eqref{eq:p|m=>p|N}
        fm: Factored Z := factor m
        mfl: FL := factorList fm
        nnprimes := [f.factor for f in factorList factor nn]
        for f in mfl repeat
            not member?(f.factor, nnprimes) =>
                dbgPrint("eq:p|m=>p|N mfl", mfl)
                dbgPrint("eq:p|m=>p|N nnprimes", nnprimes)
                return false

        --\eqref{eq:delta|M=>delta|mN}
        mmdivs: LP := DIVISORS mm
        #mmdivs ~= #s =>
            dbgPrint("size of s: mmdivs", mmdivs)
            dbgPrint("size of s: s", s)
            false

        divs: LP := DIVISORS(m*nn)
        for delta in mmdivs for sdelta in s | not zero? sdelta repeat
            not member?(delta, divs) =>
                dbgPrint("eq:delta|M=>delta|mN", mmdivs)
                dbgPrint("eq:delta|M=>delta|mN", divs)
                return false

        --\eqref{eq:sv24}
        sv: Z := 0
        for mmdelta in reverse mmdivs for sdelta in s | not zero? sdelta repeat
            sv := sv + mmdelta * sdelta

        kappam: Z := kappa m -- gcd(m*m - 1, 24)
        x: Z := kappam*m*nn*nn*sv
        not DIVISIBLEBY?(24, (x exquo mm) :: Z) =>
            dbgPrint("eq:sv24 s", s)
            dbgPrint("eq:sv24 mmdivs", mmdivs)
            dbgPrint("eq:sv24 sv", sv)
            dbgPrint("eq:sv24 kappa", kappam)
            dbgPrint("eq:sv24 x", x exquo mm)
            return false

        --\eqref{eq:sum-s}
        ssum: Z := 0
        for sdelta in s repeat ssum := ssum + sdelta
        not zero? positiveRemainder(kappam*nn*ssum, 8) =>
            dbgPrint("eq:sum-s ssum", ssum)
            dbgPrint("eq:sum-s kappa", kappam)
            dbgPrint("eq:sum-s nn", nn)
            return false

        --\eqref{eq:w|N}
        shat: Z := 0 -- sigmaInfty
        for delta in divs for sdelta in s repeat shat := shat + delta * sdelta
        w: Z := ((24*m) exquo gcd(kappam*(24*t + shat), 24*m)) :: Z
        not zero? positiveRemainder(nn, w) =>
            dbgPrint("eq:w|N nn", nn)
            dbgPrint("eq:w|N w", w)
            dbgPrint("eq:w|N shat", shat)
            return false

        --\eqref{eq:even-m}
        odd? m => true
        u: Z := 1
        for delta in mmdivs for sdelta in s | not zero? sdelta repeat
            adelta: P := qcoerce(abs(sdelta))@P
            u := u * delta^adelta
        e: Z := 0
        while even? u repeat
            e := e + 1
            u := shift(u, -1)

        b1: Boolean := DIVISIBLEBY?(4, kappam*nn) and DIVISIBLEBY?(8, nn*e)
        b2: Boolean := even? e and DIVISIBLEBY?(8, nn*(u-1))
        if not (b1 or b2) then
            dbgPrint("eq:even-m m", m)
            dbgPrint("eq:even-m kappa", kappam)
            dbgPrint("eq:even-m nn", nn)
            dbgPrint("eq:even-m e", e)
            dbgPrint("eq:even-m e", u)
        return (b1 or b2)

    modularConditions?(nn: P, r: LZ, mm: P, s: LZ, m: P, t: N): Boolean ==
        not modularInputConditions?(nn, mm, s, m, t) => false

        nndivs: LP := DIVISORS nn
        #nndivs ~= #r =>
            dbgPrint("size of r: nndivs", nndivs)
            dbgPrint("size of r: r", r)
            false

        mmdivs: LP := DIVISORS mm
        shat: Z := 0 -- sigmaInfty
        for delta in mmdivs for sdelta in s repeat shat := shat + delta * sdelta
        orb: List N := orbit(shat, m, t)
        orbitSize: Z := # orb

        --\eqref{eq:Radu-sum=0}
        not zero?(reduce(_+, r, 0) + orbitSize * reduce(_+, s, 0)) =>
            dbgPrint("eq:Radu-sum=0 r", r)
            dbgPrint("eq:Radu-sum=0 s", s)
            dbgPrint("eq:Radu-sum=0 orbitSize", orbitSize)
            false

        --\eqref{eq:Radu-sigmainfinity}
        rhat: Z := 0
        for delta in nndivs for rdelta in r repeat rhat := rhat + delta * rdelta
        nu: Z := chiExponent(shat, m, orb)
        z: Z := rhat + orbitSize * m * shat + nu
        not zero? positiveRemainder(z, 24) =>
            dbgPrint("eq:Radu-sigmainfinity nndivs", nndivs)
            dbgPrint("eq:Radu-sigmainfinity r", r)
            dbgPrint("eq:Radu-sigmainfinity mmdivs", mmdivs)
            dbgPrint("eq:Radu-sigmainfinity s", s)
            dbgPrint("eq:Radu-sigmainfinity orbitSize", orbitSize)
            dbgPrint("eq:Radu-sigmainfinity nu", nu)
            false

        --\eqref{eq:Radu-sigma0}
        rv: Z := 0
        for delta in reverse nndivs for rdelta in r repeat
            rv := rv + delta * rdelta
        sv: Z := 0
        for delta in reverse mmdivs for sdelta in s repeat
            sv := sv + delta * sdelta
        f: Z := ((m * nn) exquo mm)::Z -- modularInputConditions \implies f \in Z
        not zero? positiveRemainder(rv + orbitSize * f * sv, 24) =>
            dbgPrint("eq:Radu-sigma0 nndivs", nndivs)
            dbgPrint("eq:Radu-sigma0 r", r)
            dbgPrint("eq:Radu-sigma0 mmdivs", mmdivs)
            dbgPrint("eq:Radu-sigma0 s", s)
            dbgPrint("eq:Radu-sigma0 orbitSize", orbitSize)
            false

        --\eqref{eq:Radu-productsquare}
        not checkSquare?(nn, mm, r, s, m, orbitSize) =>
            dbgPrint("eq:Radu-productsquare nn", nn)
            dbgPrint("eq:Radu-productsquare mm", mm)
            dbgPrint("eq:Radu-productsquare r", r)
            dbgPrint("eq:Radu-productsquare s", s)
            dbgPrint("eq:Radu-productsquare orbitSize", orbitSize)
            false

        true

    modularConditions?(nn: P, r: LZ): Boolean ==
        modularConditions?(nn, r, 1, [0], 1, 0)

)if TODO
     splitMatrix(gamma: MZ, delta: Z, m: Z, t: Z): Rec ==
        LLZ ==> List List Z
        --assert(delta>0)
        --assert(m>0)
        --assert(one? determinat(gamma))
        --assert(zero? positiveRemainder(c*m, delta))

        a: Z := gamma(1,1);   b: Z := gamma(1,2)
        c: Z := gamma(2,1);   d: Z := gamma(2,2)

        act: Z := a + c*t;    bdt := b + d*t

        -- matrix W
        A: Z := delta * act;  B: Z := delta * bdt
        C: Z := c*m;          D: Z := d*m

        exgcd: EXGCD := extendedEuclidean(act, C)
        g: Z := exgcd.generator
        --assert(one? g) -- sanity check
        if not one? g then error "splitMatrix: gcd is not 1"

        a1: Z := act
        c1: Z := (C exquo delta) :: Z -- cm/delta

        d1i: Z    :=  exgcd.coef1 -- initial value for d1
        bstari: Z := -exgcd.coef2 -- initial value for bstar

        -- Now try to find s such that 0 <= bdt*d1 - D*b1 - s*d2 < d2.
        tgammai: Z := bdt*d1i - D*bstari -- initial value
        tgamma: Z := positiveRemainder(tgammai, m) -- = t_\gamma
        s: Z := ((tgammai - tgamma) exquo m) :: Z
        b1: Z := delta * (bstari + act * s)
        d1: Z := d1i + delta * s * c1

        m1: MZ := matrix([[a1, b1], [c1, d1]]$LLZ)
        m2: MZ := matrix([[delta, delta * tgamma], [0, m]]$LLZ)
        [m1, m2, tgamma]$Rec

    lambdaGamma(m: P, gamma: SL2Z, lambda: N): N == 1
)endif

)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif

)if false


    relationRamanujanKolberg(level: P, m: P, t: N, r: RVector):
--        Record(s: RVector, t: List(N), rhs: MonoidRing(C, MRVector))
        List N
      ==
        empty()

    -- See \cite[Thm.~45]{Radu:RamanujanKolberg:2015}.
    -- m = m, t=t, M=ilevel, N=level
    coFactorConditions(level: P, ilevel: P, m: P, t: Z, r: List Z): MZ ==
        --assert(#r=#divisors(ilevel))
        --assert(zero? postiveRemainder(level, ilevel))
        -- DeltaStar-Conditions
        -- \cite[Def.~34]{Radu:RamanujanKolberg:2015} must be fulfilled.
        p := orbit(level, sigmainfty, m, t, r)
        orbitSize := #p
        divs: List P := [qcoerce(d)@P for d in divisors(level)]
        k: P := kappa m
        c1 := orbitSize * reduce(_+, r)
        c2 := chiExponent(m, r, orb)
)endif
