-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018-2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Finding co-factors for dissected Eta-Quotients with cusps only at infinity}
\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
  The package \qetatype{QEtaModularPackage}(QMOD) deals the
  computation of a cofactor to a dissected (generalized) eta-quotient
  such that the result is a modular function with a cusp at most at
  infinity.

  Furthermore it can compute the orders of the poles of such an
  eta-quotient at any given cusp.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

PP ==> PositiveInteger
NN ==> NonNegativeInteger
ZZ ==> Integer
QQ ==> Fraction ZZ
VZZ ==> Vector ZZ
MZZ ==> Matrix ZZ -- consider only 2x2 matricies
SL2Z ==> MZZ -- matrices with determinant = 1
LPP ==> List PP
LZZ ==> List ZZ
LLZZ ==> List LZZ
INDICES ==> LLZZ
QETAAUX ==> QEtaAuxiliaryPackage
SPEC ==> QEtaSpecification
SPECS ==> List SPEC
CUSPS ==> List Cusp

asPP x ==> x pretend PP

LVZZ ==> List VZZ
RELS ==> VZZ
ECS ==> Record(indices: INDICES, particular: Union(VZZ,"failed"), basis: LVZZ)
ZINPUT ==> Record(zmat: MZZ, zrels: RELS, zrhs: VZZ)
ZRESULT ==> Record(zinhom: LVZZ, zhom: LVZZ, zfree: LVZZ) -- zsolve$X4ti2


)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaModularPackage}
\label{sec:QEtaModularPackage}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Compute a vector that must be multiplied to the dissected eta-quotient
in order to make it a modular function for the respective congruence
subgroup having a pole only at infinity or to make the (positive)
orders at all cusps (\code{qetaGrades}) small in total sum.

)endif

)abbrev package QMODPKG QEtaModularPackage
QEtaModularPackage(QMOD): Exports == Implementation where
  QMOD: QEtaModularCategory
  YMEQ ==> SymbolicModularEtaQuotient
  Exports ==> with
    etaCofactorNoPolesSystem: (SPECS, LZZ, CUSPS) -> ZINPUT
      ++ etaCofactorNoPolesSystem(bspecs,ords,nopolesat) is used as a
      ++ second step to etaCofactorSpace from the default
      ++ implementation in QEtaModularCategory for the computation of
      ++ a cofactor that has no poles at the cusps nopolesat, for
      ++ example in etaCofactorInfinity or etaCofactorNoPoles.
      ++
      ++ The input bspecs (usually) represents the monoid generators
      ++ for the monoid of all eta-quotients that are modular
      ++ functions wrt. QMOD, i.e., they come from
      ++ ecs:=etaCofactorSpace(nn,rspec,m,t,idxs)$QMOD;
      ++ bspecs:=[etaQuotientSpecification(nn,idxs,x) for x in ecs.basis]
      ++ (see implementation of etaCofactorIninity).
      ++
      ++ It returns a r times c matrix A and a right-hand side v for a
      ++ system A*x>=v where r=#bspecs, c=#ords=#nopolesat and the
      ++ right-hand side is v=-ords (which is the expansion orders at
      ++ the cusps nopolesat of (sspec,rspec,m,t) where sspec comes
      ++ from the particular solution of ecs) and A is the expansion
      ++ orders of the basis elements given by bspecs. The rows are
      ++ indexed by the cusps nopolesat, which also means that ords
      ++ corresponds to order at nopolesat for each entry
      ++ respectively.
      ++
      ++ A solution to this system should give rise to an sspec such
      ++ that (sspec,rspec,m,t) specifies a modular function with no
      ++ poles at the cusps nopolesat.
    reduceSystem: ZINPUT -> ZINPUT
      ++ reduceSystem([A,v]) returns a matrix B and a right-hand side
      ++ w such that A*x >= v and B*x >= w have the same solutions, but
      ++ B has duplicate rows removed.
      ++ The order of distinct rows is kept.
    qetaGrades: YMEQ QMOD -> LZZ
      ++ qetaGrads(y) returns the poleorders of the modular function
      ++ corresponding to y. In the special case when e is the
      ++ expansion and qetaGrade(e.c) is less than 0 for every cusp c
      ++ in cusps(y), the function returns a value of -1 for each cusp
      ++ although this might not be the true poleorder of the
      ++ expansion, it rather is the value for the case that y
      ++ represents zero. This special treatment avoids running into
      ++ an infinite loop if y represents the zero function.
    qetaGrades: (SPEC, SPEC, PP, NN, CUSPS) -> LZZ
      ++ qetaGrades(sspec,rspec,m,t,spitzen) returns qetaGrades(y)
      ++ where y=etaQuotient(sspec,rspec,m,t,spitzen) from
      ++ SymbolicModularEtaQuotient(QMOD).
    qetaGrades: (SPEC, SPEC, PP, NN) -> LZZ
      ++ qetaGrades(sspec,rspec,m,t) returns qetaGrades(y) where
      ++ y=etaQuotient(sspec,rspec,m,t)$SymbolicModularEtaQuotient(QMOD).
    etaCofactorInfinity: (PP, SPEC, PP, NN, INDICES) -> SPEC
      ++ etaCofactorInfinity(nn,rspec,m,t,idxs) returns a
      ++ specification sspec such that sspec has only indices from
      ++ idxs, modular?(sspec,rspec,m,t)$QMOD and
      ++ etaQuotient(sspec,rspec,m,t)$SymbolicModularEtaQuotient(QMOD)
      ++ corresponds to a modular function with poles only at infinity
      ++ and with smallest pole order.
    etaCofactorInfinity: (PP, SPECS, INDICES) -> SPEC
      ++ etaCofactorInfinity(nn,rspecs,idxs) returns a specification
      ++ sspec such that sspec has only indices from idxs and for
      ++ every rspec from rspecs modular?(sspec,rspec,1,0)$QMOD is
      ++ true and
      ++ etaQuotient(sspec,rspec,1,0)$SymbolicModularEtaQuotient(QMOD)
      ++ corresponds to a modular function with poles only at infinity
      ++ and with smallest pole order. It is an error if all rspecs
      ++ cannot be made modular by a common cofactor, i.e., we require
      ++ that for every rspec in rspecs the specification
      ++ (rspec/rspecs.1) specifies a modular eta-quotient.
    etaCofactorNoPoles: (PP, SPEC, PP, NN, INDICES, CUSPS) -> SPEC
      ++ etaCofactorNoPoles(nn,rspec,m,t,idxs,nopolesat) returns a
      ++ specification sspec such that sspec has only indices from
      ++ idxs, modular?(sspec,rspec,m,t)$QMOD and
      ++ etaQuotient(sspec,rspec,m,t)$SymbolicModularEtaQuotient(QMOD)
      ++ corresponds to a modular function with no poles at the
      ++ cusps nopolesat.
  Implementation ==> add
    C ==> QQ
    lift2C x ==> map(coerce, x)$SparseUnivariatePolynomialFunctions2(ZZ, C)
    SUPC ==> SparseUnivariatePolynomial C
    CX ==> SimpleAlgebraicExtension(C, SUPC, supc)
    TX ==> QEtaTaylorSeries CX
    LX ==> QEtaLaurentSeries CX
    QLX ==> XHashTable(Cusp, LX)
    specMODA1 C ==> _
      modularEtaQuotientInfinity $ QEtaModularInfinityExpansion(C, QMOD)
    -- local
    -- We assume that sspec(y)=1, multiplier(basefactor y)=1, modular?(y).
    -- Then orderMin gives the true order of the expansion in terms of
    -- the canonical variables and the denominators are all 1.
    orderMod(y: YMEQ QMOD): LZZ ==
        ords: List QQ := ordersMin y
        not one? lcm [denom x for x in ords] =>
            error "orderMod: fractional order" -- should never happen
        [numer x for x in ords]

    etaCofactorNoPolesSystem(
      bspecs: SPECS, ords: LZZ, nopolesat: CUSPS): ZINPUT ==
        -- For bspecs (modular functions) we can use the
        -- matrixEtaOrder to compute the order vectors.
        nn: PP := level first bspecs
        ybas: List YMEQ QMOD := [etaQuotient(spec,nopolesat) for spec in bspecs]
        bas: LLZZ := [orderMod y for y in ybas]
        mat: MZZ := transpose matrix bas
        -- To achieve non-negative orders at each cusp, we must find a
        -- solution that is at least as big (in each component) as the
        -- negation of the current order vector.
        [mat, new(#ords, 1)$VZZ, - vector ords]

    reduceSystem(zin: ZINPUT): ZINPUT ==
        -- We have to solve zin.zmat * x >= zin.zrhs and are satisfied
        -- with a solution for "=" instead of ">=". The rows of
        -- zin.zmat and zin.zrhs are indexed by cusps. Since it might
        -- happen that some rows are identical, we remove them. From
        -- the rhs we collect the corresponding entries and take their
        -- maximum grade (pole order), see
        -- \eqref{eq:remove-non-infinity-poles}.
        mat: MZZ := zin.zmat
        u: VZZ := zin.zrhs
        -- The value in the hashtable denotes (1) the index where the
        -- row (hrow) first appeared, (2) the maximum righthand side
        -- value, (2) for hrow.
        hrows: XHashTable(VZZ, LZZ) := empty()
        for i in 1..nrows(mat) repeat
            hrow: VZZ := row(mat, i)
            iv: LZZ := elt(hrows, hrow, empty()$LZZ)
            empty? iv => hrows.hrow := [i, u.i]
            u.i > iv.2 => hrows.hrow := [iv.1, u.i]
        -- Get the data from the table and sort it.
        rows: LLZZ := [concat(hrows.r, members r) for r in keys hrows]
        -- The first entries is the row index. They are all different.
        sortedrows: LLZZ := sort((x:LZZ,y:LZZ):Boolean+->x.1<y.1, rows)
        mat: MZZ := matrix [rest rest x for x in sortedrows]
        v: VZZ := vector [x.2 for x in sortedrows]
        [mat, new(#v, 1)$VZZ, v]

    qetaGrades(y: YMEQ QMOD): LZZ ==
        xiord: PP := minimalRootOfUnity y
        supc: SUPC := lift2C(cyclotomic(xiord)$CyclotomicPolynomialPackage);
        xi := generator()$CX;
        xsym: Symbol := "x"::Symbol;
        e: QLX := laurentExpansions(y)$QEtaSeriesExpansion(C,xiord,CX,xi,QMOD)
        spitzen: CUSPS := cusps y -- = keys e
        -- The following leads to problems with the size of the direct
        -- product that is used. Using a non-domain parameter
        -- ("spitzen", here) does not necessarily create a new domain
        -- for different values of spitzen.
        -- qetaGrades(e :: ModularFunctionExpansionsAtCusps(CX, spitzen))
        -- We therefore do the computation directly.
        -- First we check that e does not correspond to zero?

        -- First check whether e is zero.
        -- zero? e => [-1$ZZ for c in spitzen]
        isZero?: Boolean := true
        for c in keys e repeat
            if order(e.c, 0) < 0 or not zero? coefficient(e.c, 0) then
                isZero? := false
                break
        isZero? => [-1 for c in spitzen]
        [- order(e.c) for c in spitzen]
    qetaGrades(sspec: SPEC, rspec: SPEC, m: PP, t: NN, spitzen: CUSPS): LZZ ==
        qetaGrades etaQuotient(sspec, rspec, m, t, spitzen)$YMEQ(QMOD)
    qetaGrades(sspec: SPEC, rspec: SPEC, m: PP, t: NN): LZZ ==
        qetaGrades etaQuotient(sspec, rspec, m, t)$YMEQ(QMOD)

    -- local
    totalOrder(sspec: SPEC, polesat: CUSPS): QQ ==
        nn: PP := level sspec
        tord: QQ := 0
        for c in polesat repeat
            gamma: SL2Z := cuspToMatrix(nn, c)$QMOD
            y: SymbolicEtaQuotientGamma := etaQuotient(sspec, gamma)
            w: PP := width(nn, c)$QMOD
            tord := tord + w * qExponentMin y
        tord

    -- local (avoid duplicating code)
    etaCofactorNoPolesAux(nn:PP, idxs:INDICES, hbasis: LVZZ,
      ords: LZZ, nopolesat: CUSPS, sinitial: VZZ): SPEC ==
        bspecs := [etaQuotientSpecification(nn, idxs, x) for x in hbasis]
        --- See \eqref{eq:remove-non-infinity-poles}.
        zin: ZINPUT := etaCofactorNoPolesSystem(bspecs, ords, nopolesat)
        -- Now we have a system (mat, v) and look for a solution x such
        -- that mat*x>=v, where >= means "in each component".
        zin := reduceSystem zin -- remove identical rows
        -- We first solve mat*x=v for x.
        v: VZZ := zin.zrhs
        z: ZRESULT := zsolve([zin.zmat, new(#v,0), v]$ZINPUT)$X4ti2
        hmat: MZZ := transpose matrix [members x for x in hbasis]
        not empty?(z.zinhom) =>
            s := sinitial + hmat * first(z.zinhom)
            sspec := etaQuotientSpecification(nn, idxs, s)
            return sspec

        -- If there is no solution, we try the more involved mat*x>=v.
        z := zsolve(zin)$X4ti2
        -- We are interested in the inhomogeneous solutions, since
        -- they yield an adjustment such that the resulting cofactor
        -- vector s leads to an element for the
        -- etaQuotient(sspec,rspec,m,t) which has no poles at the
        -- cusps nopolesat.
        adjustments := z.zinhom
        empty? adjustments => error "cannot find cofactor"

        -- There can be several inhomogeneous solutions. Any of them
        -- is fine, but we want the resulting series to be of a small
        -- total qetaGrade in the cusps different from nopolesat.
        --
        -- If nopolesat is only missing the cusp infinity, then we
        -- want qetaGrade (= small poleorder = big order) at infinity.
        --
        -- So we compute the series expansion at the complement of
        -- nopolesat for each of the inhomogeneous solutions and take
        -- the minimal total qetaGrade. In fact, explicitly computing
        -- the series expansion is too costly and also not necessary.
        -- By construction adding any of the solutions from z.zinhom
        -- to sinitial, we get a modular function with poles at most
        -- at the cusps polesat.
        polesat: CUSPS := setDifference(cusps(nn)$QMOD, nopolesat)

        s := sinitial + hmat * first(adjustments)
        sspec := etaQuotientSpecification(nn, idxs, s)
        -- Let us first look at the case where polesat=[infinity()].
        -- The order of the expansion at infinity of the modular
        -- function given by (sspec, rspec, m, t) can be approximated
        -- by alphaInfinity. See its definition in QEtaSpecification.
        -- Even though it might not be the correct order since
        -- a(m*n+t) can be zero for an initial segment of natural
        -- numbers n, alphaInfinity can be used to determine which of
        -- the possible inhomogeneous candidates gives a minimal
        -- grade. Note that grade = -order.
        -- Since in the computation of alphaInfinity (see
        -- QEtaSpecification) only the cofactor part changes, it is
        -- sufficient if we try to maximize rhoInfinity(sspec) where
        -- sspec is given through s via
        -- sspec:=etaQuotientSpecification(nn,idxs,s).
        --
        -- More generally, if polesat contains not just the infinity
        -- cusp, we must consider the orders at the cusps polesat.
        -- Also in this case it is sufficient, to consider the orders
        -- of sspec alone. We can even neglect the contribution of a
        -- possible (c\tau+d) factor since the (sspec,rspec,m,t)
        -- corresponds to a modular function where the exponent of
        -- that factor vanishes. So instead of rhoInfinity, we compute
        -- w:=width(nn,cusp)$QMOD;
        -- yc:=etaQuotient(sspec,cuspToMatrix(cusp)$QMOD);
        -- ord:=w*qExponentMin(yc) for every cusp of polesat and take
        -- that adjustment vector from adjustments that has the smallest
        -- total grade(=-order), i.e. the biggest order.
        -- Note that for polesat=[infinity()], ord=rhoInfinity(sspec).

        totalord: QQ := totalOrder(sspec, polesat)
        while not empty?(adjustments := rest adjustments) repeat
            s := sinitial + hmat * first(adjustments)
            tspec := etaQuotientSpecification(nn, idxs, s)
            tord: QQ := totalOrder(tspec, polesat)
            if tord > totalord then
                sspec := tspec
                totalord := tord
        return sspec

    etaCofactorInfinity(nn:PP, rspec:SPEC, m:PP, t:NN, idxs:INDICES): SPEC ==
        ecs: ECS := etaCofactorSpace(nn, rspec, m, t, idxs)$QMOD
        ecs.particular case "failed" =>
            error "etaCofactorInfinity: cannot make modular"
        idxs := ecs.indices -- because idxs can be empty initially
        hbasis: LVZZ := ecs.basis -- a basis for the homogeneous solutions
        rinitial: VZZ := (ecs.particular)::VZZ
        sinitial: VZZ := minimizeVector(rinitial, hbasis)$QETAAUX

        -- If it can be shown that multiplication with sspec leads
        -- to a constant series expansion (without computing this series),
        -- then we can return sspec.
        sspec: SPEC := etaQuotientSpecification(nn, idxs, sinitial)
        spitzen: CUSPS := cusps(nn)$QMOD
        yall: YMEQ QMOD := etaQuotient(sspec, rspec, m, t, spitzen)
        constant? yall => return sspec

        -- y can still represent a constant function.
        -- We only make an actual test at the cusp infinity for all others
        -- the poleorder estimate must suffice.
        nopolesat: CUSPS := remove!(infinity(), spitzen)
        y: YMEQ QMOD := etaQuotient(sspec, rspec, m, t, nopolesat)
        if constant? y then -- note that infinity is not involved
            -- Coming here, we definitely have no pole at non-infinity cusps.
            -- The implementation for order in A1(C) takes care of not
            -- running indefinityly if the series is zero.
            if (grd:=qetaGrade(specMODA1(C)(sspec, rspec, m, t)))<=0 then
                return sspec

        -- Coming here, it is still possible that (sspec, rspec, m, t)
        -- represents a constant function, since the "constant?"
        -- function above only estimates the grades/orders.

        -- Make sure that yall does not by chance have only a pole at
        -- infinity.
        ords: LZZ := [-g for g in qetaGrades y]
        hasPole?: Boolean := false
        for o in ords repeat hasPole? := hasPole? or o < 0
        if not hasPole? then
            return sspec -- only possible pole is at infinity
        -- There is a pole at a non-infinity cusp.
        etaCofactorNoPolesAux(nn, idxs, hbasis, ords, nopolesat, sinitial)

    etaCofactorInfinity(nn: PP, rspecs: SPECS, idxs: INDICES): SPEC ==
        empty? rspecs => error "no specifications given"
        -- make sure that we have specs with the same level nn.
        nspecs: SPECS := empty()
        for rspec in rspecs repeat
            not zero?(nn rem level rspec) =>
                error "specification level is not divide the given level"
            nspecs := cons(etaQuotientSpecification(nn, parts rspec), nspecs)
        spec := first nspecs
        for rspec in nspecs repeat
            not modular?(rspec/spec)$QMOD => error "cannot make result modular"

        ecs: ECS := etaCofactorSpace(nn, spec, 1, 0, idxs)$QMOD
        ecs.particular case "failed" =>
            error "etaCofactorInfinity: cannot make modular"
        idxs := ecs.indices -- because idxs can be empty initially
        hbasis: LVZZ := ecs.basis -- a basis for the homogeneous solutions
        rinitial: VZZ := (ecs.particular)::VZZ
        sinitial: VZZ := minimizeVector(rinitial, hbasis)$QETAAUX

        sspec: SPEC := etaQuotientSpecification(nn, idxs, sinitial)
        spitzen: CUSPS := cusps(nn)$QMOD
        nopolesat: CUSPS := remove!(infinity()$Cusp, spitzen)
        grds: VZZ := vector qetaGrades(sspec, spec, 1, 0, spitzen)
        for rspec in rest nspecs repeat
            for i in 1..#grds _
            for g in qetaGrades(sspec, rspec, 1, 0, spitzen) repeat
                grds.i := max(grds.i, g)
        ords: LZZ := [-g for g in members grds for c in spitzen|not infinity? c]
        etaCofactorNoPolesAux(nn, idxs, hbasis, ords, nopolesat, sinitial)



    etaCofactorNoPoles(nn:PP, rspec:SPEC, m:PP, t:NN, idxs:INDICES,
                       nopolesat: CUSPS): SPEC ==
        ecs: ECS := etaCofactorSpace(nn, rspec, m, t, idxs)$QMOD
        ecs.particular case "failed" =>
            error "etaCofactorNoPoles: cannot make modular"
        idxs := ecs.indices -- because idxs can be empty initially
        hbasis: LVZZ := ecs.basis -- a basis for the homogeneous solutions
        rinitial: VZZ := (ecs.particular)::VZZ
        sinitial: VZZ := minimizeVector(rinitial, hbasis)$QETAAUX

        -- If it can be shown that multiplication with sspec leads
        -- to a constant series expansion (without computing this series),
        -- then we can return sspec.
        sspec: SPEC := etaQuotientSpecification(nn, idxs, sinitial)
        spitzen: List Cusp := cusps(nn)$QMOD
        yall: YMEQ QMOD := etaQuotient(sspec, rspec, m, t, spitzen)
        constant? yall => return sspec

        -- y can still represent a constant function.

        hasPole?: Boolean := false
        y: YMEQ QMOD := etaQuotient(sspec, rspec, m, t, nopolesat)
        if constant? y then -- only the cusps nopolesat are involved
            -- Coming here, we definitely have no pole at the nopolesat cusps.
            -- However, we do not know whether the poles at the other
            -- cusps are minimal or if yall represents the zero
            -- modular function.
            -- We could now take the following code to really check
            -- whether yall is a constant.
            --: polesat: CUSPS := setDifference(spitzen, nopolesat)
            --: ypolesat: YMEQ QMOD := etaQuotient(sspec, rspec, m, t, polesat)
            --: grds: LZZ := qetaGrades ypolesat
            --: for g in grds repeat hasPole? := hasPole? or g>0
            --: if not hasPole? then return sspec -- yall represents a constant
            -- However, we are just satisfied and return
            return sspec

        -- Make sure that yall does not by chance has no poles at
        -- nopolesat.
        ords: LZZ := [-g for g in qetaGrades y]
        hasPole? := false
        for o in ords repeat hasPole? := hasPole? or o<0
        if not hasPole? then return sspec

        -- There is a pole at one of the cusps in nopolesat, so we
        -- must remove it.
        etaCofactorNoPolesAux(nn, idxs, hbasis, ords, nopolesat, sinitial)



)if LiterateDoc
\end{document}
)endif
