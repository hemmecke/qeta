-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2017  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Computation of polynomial relations among Dedekind Eta
Functions---Variant HemmeckeCached}
\author{Ralf Hemmecke}
\date{03-Aug-2017}
\maketitle
\begin{abstract}
  The packages \code{QEtaIdealHemmeckeCached} implements the variant
  of the computation of $\eta$-relations as described in
  \cite{Hemmecke+Radu:EtaRelations:2018}. In fact, it is identical to
  \code{QEtaIdealHemmecke} except that before the computation every
  element is embedded into a cached form.
\end{abstract}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This code is based on \cite{Radu:RamanujanKolberg:2015},
\cite{Hemmecke:DancingSambaRamanujan:2018}, and
\cite{Hemmecke+Radu:EtaRelations:2018}.

Here we implement the variant that is described in
\cite[Chapter~7]{Hemmecke+Radu:EtaRelations:2018} where only one
\GB{} computation is needed.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Variant HemmeckeCached}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Most things are generically implemented as a default package in the
category \code{QEtaIdealCategory}.

The function \code{relationsIdealGenerators} computes $J^{(M)}$ as
described in \cite[Chapter~7]{Hemmecke+Radu:EtaRelations:2018}.

Everything is as in variant Hemmecke, except that here we wrap the
domains with \code{QEtaAlgebaCachedPower}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.
)endif
OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
vPrint(x,y) ==> display77(hconcat(["-- "::Symbol::OF, x::Symbol::OF, _
                                   ":="::Symbol::OF, y::OF]$List(OF)))

)if LiterateDoc
% $
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
LSym ==> List Symbol

)abbrev package QETAIHC QEtaIdealHemmeckeCached
++ QEtaIdealHemmeckeCached works in exactly the same way as
++ QEtaIdealHemmecke with the difference that powers of elements are
++ cached.
QEtaIdealHemmeckeCached(C, L): Exports == Implementation where
  C: EuclideanDomain
  L: Join(QEtaLaurentSeriesCategory C, QEtaGradedAlgebra C)
  Pol ==> Polynomial C
  LPol ==> List Pol
  Exports ==> QEtaIdealCategory(C, L)
  Implementation ==> add
    relationsIdealGenerators(mgens: List L): LPol ==
        CL ==> QEtaAlgebraCachedPower(C, L)
        CPol ==> QEtaAlgebraCachedPower(C, Pol)
        import from CPol
        X ==> QEtaExtendedAlgebra(C, CL, CPol);
        AB ==> QEtaAlgebraBasis(C, X)
        RED ==> QEtaExtendedTopReduction(C, CL, X, AB)
        xembed(a, b) ==> embed(x::CL, m::Pol::CPol)$X
        lpol l ==> [second(x)::Pol for x in l]
        import from Pol

        Y ==> QEtaComputation(C, X, AB, RED)
        QSAMBA ==> QEtaSambaPackage(C, X, AB, Y)
        -- xreduce reduces only in the first component, since we always
        -- expect reduction to zero
        xreduce(x, ab) ==> reduce(x, ab)$QEtaTopReduction(C, X, AB)

        msyms: LSym := indexedSymbols("M", #mgens)$QAuxiliaryTools
        xmgens: List X := [xembed(x, m) for x in mgens for m in msyms]
        xt: X := first xmgens
        ab: AB := samba(xt, rest xmgens)$QSAMBA
        -- Now we have the algebra basis together with how it relates to the
        -- originally given elements.
        xzgens: List X := concat entries basisElements ab
        vPrint("xzgens", xzgens)
        -- Each of the original given elements must be representable in
        -- the algebra basis.
        xmpols: List X := [xreduce(xx, ab) for xx in xmgens]
        -- So this reduction should result in 0 in the first component
        -- and a relation among the initially given elements.
        vPrint("xmpols", xmpols)
        -- Safety check
        for x in xmpols | not zero? x repeat
            error "polynomialRelations: non-zero-reduction"

        -- Also the products of the elements in the algebra basis
        -- should be representable by a Q[t]-linear relation of the elements
        -- in the algebra basis where t = first(xt).
        -- We do the whole computation with the relations part attached and
        -- thus obtain another set of relations among the intitial
        -- elements.
        xpgens: List X := empty() -- generators of the product relations
        l: List X := xzgens -- don't modify xzgens
        while not empty? l repeat
            zi: X := first l
            for zj in l repeat
                p: X := xreduce(zi*zj, ab)
                --safety check
                --assert(zero?(first p))
                not zero? p =>
                    error "polynomialRelations: non-zero-product-reduction"
                xpgens := cons(p, xpgens)
            l := rest l

        vPrint("xpgens", xpgens)

        mpgens: LPol := lpol concat(xmpols, xpgens)
        -- Now we already have all the relations.
        -- To make them look nicer, we can compute a degrevlex
        -- Groebner basis. since we are actually not interested in a
        -- Groebner basis, but rather in a set of generators of the
        -- respective ideal, it is enough to return these generators.

        vPrint("mpgens", mpgens)

        -- We build in a safety check, ie., plug in the respective series
        -- and check whether the result is zero.
        fc(c: C): L == c::L
        PE ==> PolynomialEvaluation(C, L)
        vPrint("mysyms", msyms)
        evalmpgens: List L := [eval(x, fc, msyms, mgens)$PE for x in mpgens]
        vPrint("evalmpgens", evalmpgens)
        vPrint("zerompgens", [zero? x for x in evalmpgens])
        dim: P := qcoerce(#mgens)@P
        -- There is no need to compute a Groebner basis.
        -- mrels: LPol := groebner(dim, msyms, mpgens)
        mrels: LPol := [x for x in mpgens | not zero? x]
        vPrint("mrels", mrels)
        vPrint("lenmrels", #mrels)
        vPrint("totaldegmrels", [totalDegree x for x in mrels])
        return mrels

)if LiterateDoc
%$
\bibliography{qeta}
\end{document}
)endif
