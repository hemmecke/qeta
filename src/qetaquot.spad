-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018-2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------
OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))
warnPrint(x,y) ==> tracePrint(x,y)
errorPrint(x,y) ==> tracePrint(x,y)

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Expanding (generalized) Dedekind Eta Functions into $q$-series
  at various cusps}

\author{Ralf Hemmecke}
\date{26-Jan-2018}
\maketitle
\begin{abstract}
  The code in this file deals with expansions of (generalized)
  Dedekind eta-quotients that have been turned into a modular function
  by multiplication with a cofactor. Expansions into $q$-series of
  objects are considered at any cusp of $\Gamma_0(N)$ or
  $\Gamma_1(N)$.

  It is a generalisation of the code in \PathName{qetaquotinf.spad}.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

PP ==> PositiveInteger
NN ==> NonNegativeInteger
ZZ ==> Integer
QQ ==> Fraction ZZ
MZZ ==> Matrix ZZ -- consider only 2x2 matricies
SL2Z ==> MZZ -- matrices with determinant = 1
LZZ ==> List ZZ
LLZZ ==> List LZZ
SPEC ==> QEtaSpecification
QETAAUX ==> QEtaAuxiliaryPackage
asNN x ==> x pretend NN
asPP x ==> x pretend PP






)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We do the compuation in an extension of the coefficient field by a
root of unity. We determine the order of the root of unity that is
needed to represent the coefficients of the expansion at any cusp via
\emph{symbolic} domains. These domains hold all relevant data to be
able to turn them into an actual series expansion.

All these domains are marked with the prefix \code{Symbolic} and
implemented in \PathName{qetaquotsymb.spad}.

In this file we assume that \code{mx} holds the order of the minimal
root of unity needed and that \code{xi} is such a primitive root of
unity and \code{CX} is $C[\xi]$.

Eta-quotients are considered as modular functions for $\Gamma_0(N)$,
whereas generalized eta-quotients are considered as modular functions
for $\Gamma_1(N)$.






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaSeriesExpansion
  $p_{r,m,t}(\gamma\tau)$, $F_{s, r, m, t}(\gamma\tau)$}
\label{sec:QEtaSeriesExpansion}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The package \code{QEtaSeriesExpansion} turns an element of a
\emph{symbolic} domain into a Puiseux series or a Laurent series if
the respective width of the cusp is given.



)endif

-------------------------------------------------------------------
)abbrev package QESX QEtaSeriesExpansion
++ QEtaSeriesExpansion computes an eta quotient expansion of
++ $g_{r,m,\lambda}(\gamma \tau)$, $p_{r,m,t}(\gamma\tau)$,
++ $F_{s,r,m,t}(\gamma\tau)$. See \eqref{eq:g_r-m-lambda(gamma*tau)}
++ and \eqref{eq:F_s-r-m-t(gamma*tau)}.
QEtaSeriesExpansion(C, xiord, CX, xi, QMOD): Exports == Implementation where
  C: IntegralDomain -- basic coefficient domain
  xiord: PP -- xiord-th root of unity needed.
  CX: Algebra C
  xi: CX --primitive xiord-th root of unity.
  QMOD: QEtaConditionsModularCategory
  TX ==> QEtaTaylorSeries CX
  LX ==> QEtaLaurentSeries CX
  PX ==> QEtaPuiseuxSeries CX
  QLX ==> XHashTable(Cusp, LX)
  YEQLG ==> SymbolicEtaQuotientLambdaGamma
  YEQG  ==> SymbolicEtaQuotientGamma
  YMEQG ==> SymbolicModularEtaQuotientGamma
  YMEQ  ==> SymbolicModularEtaQuotient

  -- building block for series expansions
  Exports ==> CoercibleTo OutputForm with
    puiseuxExpansion: (YEQLG, QQ) -> PX
      ++ puiseuxExpansion(y, r) computes the Puiseux expansion of
      ++ $g_{r,m,\lambda(\gamma\tau)$ in terms of $q$ multiplied by
      ++ $\exp(2\pi i r)$. The $(c\tau+d)$ factor is missing.
      ++ See \eqref{eq:g_r-m-lambda(gamma*tau)}.
    puiseuxExpansion: YEQG -> PX
      ++ puiseuxExpansion(y) computes the Puiseux expansion of the
      ++ q-expansion of $p_{r,m,t}(\gamma \tau)$, see
      ++ \eqref{eq:p_r-m-t(gamma*tau)}. The $(c\tau+d)$ factor is
      ++ missing.
    puiseuxExpansion: YMEQG QMOD -> PX
      ++ puiseuxExpansion(y) represents the q-expansion of
      ++ $F_{s,r,m,t}(\gamma \tau)$, see
      ++ \eqref{eq:F_s-r-m-t(gamma*tau)}.

    laurent: (PX, PP) -> LX
      ++ If p(q)=s(z) is a Puiseux series p expressed as a Laurent
      ++ series s in the variable z=q^r, then laurent(x, w) returns
      ++ the laurent series l such that l(x)=s(z)=p(q) where x=q^(1/w)
      ++ in case r*w is an integer. It might happen that r*w is not an
      ++ integer. That is even to be expected since non-modular
      ++ eta-quotients involve a factor in terms of q^(1/24). If
      ++ r=s/t, then we take only every t-th term and check that the
      ++ intermediate terms come indeed with a zero coefficient.

    laurentExpansion: YMEQG QMOD -> LX
      ++ laurentExpansion(y) represents the q-expansion of
      ++ $F_{s,r,m,t}(\gamma\tau)$ given by y in the canonical
      ++ variables given by the width of the cusp wrt. QMOD.
    laurentExpansionInfinity: YMEQG QMOD -> LX
      ++ laurentExpansionInfinity(y) represents the q-expansion of
      ++ $F_{s,r,m,t}(\tau)$ given by y wrt. QMOD. See
      ++ \eqref{eq:F_s-r-m-t(tau)}.
    laurentExpansions: (YMEQ QMOD, List Cusp) -> QLX
      ++ laurentExpansions(y, cusps) represents the q-expansion of
      ++ $F_{s,r,m,t}(\gamma\tau)$ at the given cusps (which should be
      ++ a subset of the cusps given by y) in the canonical variables
      ++ given by the width of the cusp wrt. QMOD.
    laurentExpansions: YMEQ QMOD -> QLX
      ++ laurentExpansions y represents the q-expansion of
      ++ $F_{s,r,m,t}(\gamma\tau)$ at all cusps given by y in the
      ++ canonical variables given by the width of the cusp wrt. QMOD.

    --TODO: The following function should live somewhere else.
    substitute: (LX, QQ, NN) -> PX
      ++ If s(q) is a series in q, then substitute(s, u, v) returns a
      ++ series t(q) such that t(q)=s(q^u*xi^v).

  Implementation ==> PX add
    Rep ==> PX
    xx ==> rep x

    -- Cache for frequently used objects
    xic: CachedPower CX := xi :: CachedPower(CX)

-------------------------------------------------------------------
-- local functions
-------------------------------------------------------------------
    xipow(n: ZZ): CX ==
         -- Take care of the fact that xi^xiord = 1.
        e: ZZ := positiveRemainder(n, xiord)
        zero? e => 1$CX
        power!(xic, asPP e)$CachedPower(CX)

    xiPower(v: ZZ): (ZZ -> CX) == (e: ZZ): CX +-> xipow(v*e)

    -- In the series s(q) replace q by q^u*xi^v, i.e., return s(q^u*xi^v).
    substitute(s: LX, u: QQ, v: NN): PX ==
        puiseux(u, multiplyCoefficients(xiPower v, s))

    eulerFunctionPower(u: QQ, v: NN, rd: ZZ): PX ==
        zero? rd => 1$PX
        efp: LX := eulerFunctionPower(1, rd)$CachedQPochhammerPower(CX, LX)
        substitute(efp, u, v)

    -- We assume that CX has been chosen in such a way that the square
    -- root of the argument of squareRoot can be expressed in it.
    squareRoot(fq: QQ): CX ==
        rr: Record(rat: QQ, rootOf: PP) := rationalSquareRoot(fq)$QETAAUX
        sqrt: CX := squareRoot(rr.rootOf)$GaussRoot(CX, xi, xiord)
        C has Algebra QQ  => sqrt * ((rr.rat)::C::CX)
        CX has Algebra QQ => sqrt * ((rr.rat)::CX)
        -- Otherwise we can only continue if we have no denominators.
        one? denom(rr.rat) => numer(rr.rat)::CX * sqrt
        error "cannot take root in coefficient ring"

    -- local
    -- Note that according to
    -- \eqref{eq:eta_delta-g-m-lambda^[R](gamma*tau)-0} and
    -- \eqref{eq:eta_delta-g-m-lambda^[R](gamma*tau)} the respective
    -- $(1-\zeta_\delta^{-b'g})$ factor is taken care of in the
    -- jacobiFunction arguments if a'g is divisibly by \delta.
    -- So we only have the $exp(2\pi i \cdot 1/2*P_1(b'g/delta))$
    -- contribution, which we here encode.
    alphaSchoenebergContribution(y: YEQLG): CX ==
        cx: CX := 1
        for l in properGeneralizedParts definingSpecification y repeat
            delta := specDelta l; g := asPP specSubindex l; e := specExponent l
            ygeg := y[delta,g]
            g1 := gamma1 ygeg
            gd: QQ := fractionalPart(g1(1,1)*g/delta)$QETAAUX -- note that h=0
            hd: QQ := fractionalPart(g1(1,2)*g/delta)$QETAAUX
            if zero? numer gd and not zero? numer hd and not zero? e then
                -- Note that xi is a xiord-th root of unity so, we have
                -- to multiply the (rational) exponent of xi by xiord.
                uexp: QQ := (xiord/2)*fractionalBernoulli1(hd)$QETAAUX
                not one? denom uexp =>
                    errorPrint("xiord * Bernoulli1", uexp)
                    error "QEtaSeriesExpansion: alphaSchoenebergContribution"
                cx := cx * xipow(e * numer uexp)
        cx

    -- local
    -- Compute $\tilde{r}_\delta$ from $\tilde{r}$. See definition
    -- below \eqref{eq:p_rbar-m-lambda(gamma*tau)}, i.e.
    -- $\tilde{r}_\delta := \sum_{0 < g < \frac{\delta}{2}} r_{\delta,g}$.
    rTilde(delta: PP, y: YEQLG): ZZ ==
        rd: ZZ := 0
        ll: LLZZ := properGeneralizedParts definingSpecification y
        for l in ll | delta = specDelta l repeat rd := rd + specExponent l
        rd

-------------------------------------------------------------------
-- exported functions
-------------------------------------------------------------------
    laurent(x: PX, w: PP): LX ==
        x := multiplyExponents(x, w)
        r: QQ := rationalPower x
        -- Here we assume that the Puiseux series x is indeed a
        -- Laurent series in q^(1/w).
        d: PP := denom(r)::PP
        n: PP := numer(r)::PP
        lx: LX := qetaLaurentRep x
        -- if possible, get rid of some initial zeros up to degree 0
        lx := removeZeroes(-degree lx, lx)
        one? d => -- lucky case, no multisect needed
            one? n => return lx -- avoid needless "multiplyExponents"
            return multiplyExponents(lx, n)
        lx := choose(d, 0, lx)$LX
        one? n => return lx
        return multiplyExponents(lx, n)


)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
For $m, M\in\setN$, $\bar{r} \in \bar{R}(M)$, $t,\lambda \in
\Set{0,\ldots,m-1}$,
$\gamma=\left(\begin{smallmatrix}a&b\\c&d\end{smallmatrix}\right) \in
\SL2Z$, the following function represents the Puiseux expansion of
$g_{\bar{r},m,\lambda}(\gamma\tau)$, \ie, in terms of
$q^{1/w)}$, \ie, the series from
without the $(c\tau+d)$-part.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif


    -- local
    -- The q-Pochhammer part (last product) of
    -- \eqref{eq:p_rbar-m-t(gamma*tau)} for one specific lambda.
    -- It includes the pure and properGeneralized part, because we
    -- employ the jacobiProduct to compute it.
    --assert(CX has Field)
    qPochhammer(y: YEQLG): PX ==
        -- We first compute the first q-Pochhammer product (with
        -- exponent $r_\delta - \tilde{r}_\delta$, see
        -- \eqref{eq:p_rbar-m-lambda(gamma*tau)}.
        coefficientsCanBeInverted?: Boolean := false
        if CX has Field then coefficientsCanBeInverted? := true
        px: PX := 1
        mm: PP := level definingSpecification y
        divs: List ZZ := divisors(mm)$IntegerNumberTheoryFunctions
        r: LZZ := allPureExponents definingSpecification y
        gamma: SL2Z := transformationMatrix y
        m: PP := multiplier y
        lm: NN := lambda y
        rr: LZZ := [e - rTilde(asPP d, y) for d in divs for e in r]
        rspec: SPEC := etaQuotientSpecification(mm, rr)
        ypure: YEQLG := etaQuotient(rspec, m, lm, gamma)
        for l in pureParts rspec repeat
            d: PP := specDelta l; g: ZZ := specSubindex l
            etadelta: SymbolicEtaGamma := ypure[d,g]
            u: QQ := udelta etadelta
            v: QQ := xiord * vdelta etadelta
            not one? denom v or v<0 =>
                errorPrint("delta", d)
                errorPrint("vdelta", [vdelta etadelta, u]$List(QQ))
                error "QEtaSeriesExpansion: denominator does not vanish"
            px := px * eulerFunctionPower(u, asNN numer v, specExponent l)
        -- Now the jacobiFunction part.
        -- According to whether or not a'g/delta is an integer, we
        -- distinguish two cases.0
        -- \eqref{eq:eta_delta-g-m-lambda^[R](gamma*tau)-0} and
        -- \eqref{eq:eta_delta-g-m-lambda^[R](gamma*tau)}
        for l in properGeneralizedParts definingSpecification y repeat
            delta := specDelta l; g := asPP specSubindex l; e := specExponent l
            yeg: SymbolicEtaGamma := y[delta,g]
            g1 := gamma1 yeg
            alphabeta := fractionalPart(g1(1,1)*g/delta)$QETAAUX
            alpha: ZZ := numer alphabeta
            beta: ZZ  := denom alphabeta
            -- exponent for xiord-th root of unity
            h: QQ := xiord*g1(1,2)*g/delta -- is made smaller in xipow
            not one? denom h => -- xiord should be such that h is integral
                errorPrint("xiord*h'/delta", h)
                error "QEtaSeriesExpansion: denom for xi does not vanish"
             -- eq:eta_delta-g-m-lambda^[R](gamma*tau)
            nh: ZZ := numer h
            jac ==> jacobiFunction $ QFunctions(CX, LX)
            lx: LX := if zero? alpha then jac(xiPower(-nh), beta::PP, 0)
                                     else jac(xiPower nh, beta::PP, alpha::NN)
            -- Here we need that CX is a field, since e can be negative.
            -- Note that e is not zero.
            if e>0 then
                lx := lx^asPP(e)
              else if coefficientsCanBeInverted? then
                lx := lx^e
              else
                error "QEtaSeriesExpansion: cannot raise to negative power"
            u: QQ := udelta(yeg)
            v: QQ := vdelta(yeg)
            vbeta: QQ := xiord * v * (1/beta)
            not one? denom vbeta =>
                errorPrint("vbeta", vbeta)
                error "QEtaSeriesExpansion: denom for xi does not vanish"
            px := px * substitute(lx, (1/beta)*u, asPP numer vbeta)
        return px

    -- $g_{r,m,\lambda}(\gamma\tau)$
    puiseuxExpansion(y: YEQLG, ue: QQ): PX ==
        uexp: QQ := xiord * (lambda(y)*ue + unityExponent y)
        not one? denom uexp =>
            errorPrint("xiord * unityExponent y", uexp)
            error "QEtaSeriesExpansion: denominator for xi does not vanish"
        -- leading coefficient
        cx: CX := xipow numer uexp * squareRoot rationalPrefactor y
          -- Take \eqref{eq:eta_g-h^[S](tau)-prefactor} into account (in cx).
        cx := cx * alphaSchoenebergContribution y
        monomial(cx, qExponent y) * qPochhammer y


)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
For $m, M\in\setN$, $r \in R(M)$, $t \in \Set{0,\ldots,m-1}$,
$\gamma=\left(\begin{smallmatrix}a&b\\c&d\end{smallmatrix}\right) \in
\SL2Z$, the following function computes
\begin{gather*}
  p_{r,m,t}(\gamma\tau)
  =\frac{1}{m} \sum_{\lambda=0}^{m-1} g_{r,m,\lambda}(\gamma\tau)
\end{gather*}
without the $(c\tau+d)$ part in \eqref{eq:g_r-m-t(gamma*tau)}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif

    -- $p_{\bar{r},m,t}(\gamma\tau)$
    -- $p_{r,m,t}(\gamma\tau)$
    puiseuxExpansion(y: YEQG): PX ==
        ue: QQ := unityExponent y
        px: PX := puiseuxExpansion(y.0, ue) -- $g_{r,m,\lambda}$ for lambda=0
        m: PP := multiplier y
        one? m => px
        m1: PP := asPP(m::ZZ - 1)
        for lambda in 1..m1 repeat px := px + puiseuxExpansion(y.lambda, ue)
        -- Summation possibly produces zero leading coefficients.
        -- We try to remove at most 100 leading coefficients.
        --TODO: Make 100 dependent on some parameters.
        -- "lx: LX := removeZeroes(lx)$LX" would be nice the following
        -- gives the zero series and thus wouldn't terminate.
        -- "findIdentity(4,1,[8],4,3)$QEtaRamanujanKolberg(QQ)"
        C has Algebra QQ => ((1/m)$QQ)::C::CX * px
        CX has Algebra QQ => ((1/m)$QQ)::CX * px
        error "cannot invert m in coefficient ring"

    -- $F_{\bar{s},\bar{r},m,t}(\gamma\tau)$ -- for specific gamma
    puiseuxExpansion(y: YMEQG QMOD): PX ==
--        dbgPrint("puiseuxExpansion YMEQG", "enter"::Symbol)
        p: PX := puiseuxExpansion cofactor y
        for yb in basefactor y repeat p := p * puiseuxExpansion yb
        p

    -- $F_{\bar{s},\bar{r},m,t}(\gamma\tau)$ -- for specific gamma
    laurentExpansion(y: YMEQG QMOD): LX ==
        yc: YEQG := cofactor y
        nn: PP := level definingSpecification yc
        w: PP := width(nn, transformationMatrix yc)$QMOD
        laurent(puiseuxExpansion y, w)

    laurentExpansionInfinity(y: YMEQG QMOD): LX ==
        import from QEtaModularInfinity(CX, QMOD)
        sspec: SPEC := definingSpecification cofactor y
        yb := first basefactor y
        rspec: SPEC := definingSpecification yb
        laurentExpansionInfinity(sspec, rspec, multiplier yb, offset yb)

    laurentExpansions(y: YMEQ QMOD, spitzen: List Cusp): QLX ==
        hser: QLX := empty()
        for cusp in spitzen repeat
            if infinity? cusp then
                hser.cusp := laurentExpansionInfinity(y.cusp)
              else
                hser.cusp := laurentExpansion(y.cusp)
        hser

    -- $g_{\bar{r}}(\gamma\tau)$ for all cusps of y
    -- $F_{\bar{s}, \bar{r},m,t}(\gamma\tau)$ for all cusps of y
    laurentExpansions(y: YMEQ QMOD): QLX == laurentExpansions(y, cusps y)



)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
For $m, M\in\setN$, $\bar{r} \in \bar{R}(M)$, $t,\lambda \in
\Set{0,\ldots,m-1}$,
$\gamma=\left(\begin{smallmatrix}a&b\\c&d\end{smallmatrix}\right) \in
\SL2Z$, the following function represents the Puiseux expansion of
$g_{\tilde{r},m,\lambda}(\gamma\tau)$, \ie, in terms of
$q^{1/w)}$, \ie, the series from
\eqref{eq:g_rtilde-m-lambda(gamma*tau)}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif











)if LiterateDoc
\bibliography{qeta}
\printindex
\end{document}
)endif
