-------------------------------------------------------------------
---
--- FriCAS 4ti2
--- Copyright (C) 2019-2021  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\begin{document}
\title{Interface to 4ti2}
\author{Ralf Hemmecke}
\date{21-Feb-2014}
\maketitle
\begin{abstract}
  The package \code{X4ti2} implements a way to call the \code{zsolve}
  function of 4ti2.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The software 4ti2, \cite{FourTITwo_X4ti2_2018}, is a package that solve
algebraic, geometric and combinatorial problems on linear spaces. We
take advantage of the efficiency of 4ti2 by providing an interface to
the (already installed) \code{zsolve} function.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Example}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

First of all, you have to compile the package.
\begin{verbatim}
)comile 4ti2.spad
\end{verbatim}

Then load it into a session.
\begin{verbatim}
)lib X4ti2
\end{verbatim}

Suppose you want to solve the following system of linear inequalities.
\begin{align*}
    x - y &\le 2\\
  -3x + y &\le 1\\
    x + y &\ge 1\\
        y &\ge 0
\end{align*}
Then setup your session (or \code{.spad} file) as follows.

\begin{verbatim}
Z ==> Integer
VZ ==> Vector Z
MZ ==> Matrix Z
LVZ ==> List VZ
ZRESULT ==> Record(zinhom: LVZ, zhom: LVZ, zfree: LVZ)
mat: MZ := matrix [[1, -1], [-3, 1], [1, 1], [0, 1]]
rels: VZ := vector [-1, -1, 1, 1]
b: VZ := vector [2, 1, 1, 0]
zresult: ZRESULT := zsolve(mat, rels, b)$X4ti2
\end{verbatim}

As result we obtain
\begin{verbatim}
[zinhom = [[1, 1], [1, 0], [0, 1], [2, 0]],
 zhom   = [[1, 2], [1, 1], [1, 3]],
 zfree  = []]
\end{verbatim}
that must be interpreted as follows. If $z=(x,y)$ is a solution of the
system above, and $I$, $H$, $F$ represent the sets/lists
\code{zinhom}, \code{zhom}, \code{zfree}, respectively, then there
exists $i\in I$ and non-negative integers $\alpha_h$ and integers
$\beta_f$ such that
\begin{align*}
  z = i + \sum_{h\in H} \alpha_h h + \sum_{f\in F} \beta_f f.
\end{align*}
See \url{https://4ti2.github.io/4ti2_manual.pdf} for more detail.

The default location where \code{X4ti2} looks for the \code{zsolve}
function on your file system is tailored to the Debian/Ubuntu package
for 4ti2, namely, it is \code{/usr/bin/4ti2-zsolve}.

So if you install 4ti2 via
\begin{verbatim}
sudo apt install 4ti2
\end{verbatim}
everything should be fine.

If you have installed 4ti2 in another location or called it
differently, you can set the executable via
\begin{verbatim}
setExecutable("/home/hemmecke/bin/zsolve")$X4ti2
\end{verbatim}

The function \code{zsolve} creates random files in the current
directory. These files start with the prefix
\code{FourTITwo_X4ti2_2018} and are removed after a successful
computation.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

S ==> String
P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
MZ ==> Matrix Z
VZ ==> Vector Z
RELS ==> VZ -- only entries from {-1, 0, 1} are allowed with meaning {<=,=,>=}
LVZ ==> List VZ
ZINPUT ==> Record(zmat: MZ, zrels: RELS, zrhs: VZ)
ZRESULT ==> Record(zinhom: LVZ, zhom: LVZ, zfree: LVZ)

)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Package X4ti2}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev package X4TI2 X4ti2
++ X4ti2 provides an interface to the program zsolve from the
++ 4ti2 software package (http://4ti2.de, https://4ti2.github.io/).
X4ti2: with
    zsolve:  (MZ, RELS, VZ) -> ZRESULT
      ++ If A is a (m,n)-matrix,
      ++ r an m-dimensional vector with entries from {-1, 0, 1},
      ++ b an m-dimensional vector, then
      ++ zsolve(A, r, b) returns 3 lists I, H, F such that for any
      ++ vector i in inhom and any N-linear combination h of vectors
      ++ from hom H and any Z-linear combination f of vectors from F,
      ++ the vector x=i+h+f solves the given system Ax r b where here
      ++ the vector r has to be interpreted rowwise, such that -1
      ++ means <=, 0 means =, and 1 means >=.

      ++ The function creates some random files to transmit data to
      ++ and from 4ti2. These files will be written to the current
      ++ directory and start with the prefix "4ti2-" followed by a
      ++ random number. They will be removed after the computation.
    zsolve: ZINPUT -> ZRESULT
      ++ zsolve(z) returns zsolve(z.zmat, z.zrels, z.zrhs).
    setExecutable: S -> S
      ++ setExecutable(path) sets a path for an executable that is
      ++ called during the zsolve function call.
      ++ It returns the old path. The default path is "/usr/bin/4ti2-zsolve".
    setOptions: S -> S
      ++ setOptions(options) sets a options for an executable that is
      ++ called during the zsolve function call.
      ++ It returns the old options. The default option is "-q".
  == add
    rep x ==> (x@%) pretend Rep
    per x ==> (x@Rep) pretend %

    zsolvepath: Reference S := ref "/usr/bin/4ti2-zsolve"
    zsolveoptions: Reference S := ref "-q"

    setExecutable(path: S): S ==
         s: S := deref zsolvepath
         setref(zsolvepath, path)
         return s

    setOptions(options: S): S ==
         s: S := deref zsolveoptions
         setref(zsolveoptions, options)
         return s

    writeMatrix(fn: FileName, mat: MZ): Void ==
        -- create .mat
        tf: TextFile := open(fn, "output")$TextFile
        rows := nrows mat
        cols := ncols mat -- must be > 0
        writeLine!(tf, concat [string rows, " ", string cols])
        for i in 1..rows repeat
            s: String := string qelt(mat, i, 1)
            for j in 2..cols repeat
                s := concat(concat(s, " "), string qelt(mat, i, j))
            writeLine!(tf, s)
        close! tf
        void()

    readFile(fn: FileName): List VZ ==
        not exists? fn => empty()
        f: File Z := open(fn, "input")
        rows: N := (read! f)::N
        cols: P := (read! f)::P
        result: List(VZ) := empty()$List(VZ)
        for i in 1..rows repeat
            v: VZ := new(cols, 0)
            for j in 1..cols repeat v.j := read! f
            result := cons(v, result)
        close! f
        return result

    localzsolve(mat: MZ, rels: RELS, b: VZ, dir: S, basename: S): ZRESULT ==
        import from FileName
        writeMatrix(filename(dir, basename, "rel"), transpose(rels)$MZ)
        writeMatrix(filename(dir, basename, "rhs"), transpose(b)$MZ)
        writeMatrix(filename(dir, basename, "mat"), mat)
        cmd: S := concat ["system ",
            deref zsolvepath, " ", deref zsolveoptions, " ", basename]
        systemCommand(cmd)$MoreSystemCommands
        I: LVZ := readFile filename(dir, basename, "zinhom")
        H: LVZ := readFile filename(dir, basename, "zhom")
        F: LVZ := readFile filename(dir, basename, "zfree")
        fn: S := concat(filename(dir, basename, "") :: S, ".*")
        systemCommand(concat("system /bin/rm ", fn))$MoreSystemCommands
        [I, H, F]

    zsolve(mat: MZ, rels: RELS, b: VZ): ZRESULT ==
        h: HashState := new()
        v: Z := value hashUpdate!(hashUpdate!(hashUpdate!(h, mat), rels), b)
        r: Z := random(2^32) -- that is enough randomness
        dir: S := ""
        basename: String := concat ["4ti2-", string v, "-", string r]
        for i in 0..100 repeat -- return for non-existing file
            base: String := concat(basename, string i)
            fn: FileName := filename(dir, base, "rel")
            not exists? fn => return localzsolve(mat, rels, b, dir, base)
        -- We should never come here.
        error "zsolve: could not create temporary filename"

    zsolve(z: ZINPUT): ZRESULT == zsolve(z.zmat, z.zrels, z.zrhs)

)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
