-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2018-2021  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Square roots of radical integers}
\author{Ralf Hemmecke}
\date{19-Apr-2018}
\maketitle
\begin{abstract}
  The package \qetatype{GaussRoot}(R, r, n) computes representations
  of square roots of (radical) integers in terms of $r$, which is
  supposed to be a primitive $n$-th root of unity in $R$.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Representing square roots by roots of unity}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
According to \cite[Section~IV.3]{Lang_AlgebraicNumberTheory_1986} we
have
\begin{gather}
  \sum_{k=0}^{b-1} \unityPower{\frac{k^2}{m}}
  =
  \begin{cases}
    (1+i)\sqrt{b} & \text{if $b \equiv 0 \pmod{4}$},\\
    \sqrt{b}      & \text{if $b \equiv 1 \pmod{4}$},\\
    0             & \text{if $b \equiv 2 \pmod{4}$},\\
    i\sqrt{b}     & \text{if $b \equiv 3 \pmod{4}$},
  \end{cases}
  \label{eq:GaussSum}
\end{gather}
where $\unityPower{x} := \exp(2\pi i x)$.
%
Note that
$2=\left(\unityPower{\frac{1}{8}}+\unityPower{-\frac{1}{8}}\right)^2$.

If $b\equiv 2 \pmod{4}$, then $b'=4b$ with $b'\equiv 0 \pmod{4}$.
Then, we can compute $\sqrt{b}$ by computing $\sqrt{b'}$ and
dividing by $\sqrt{2}$.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

First of all for debugging.
)endif

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

)if LiterateDoc
%$
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

PP ==> PositiveInteger
NN ==> NonNegativeInteger
ZZ ==> Integer
QQ ==> Fraction ZZ

asNN x ==> x pretend NN
asPP x ==> x pretend PP

)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Package GaussRoot}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif


)abbrev package MINSQRT MinimalSquareRoot
++ MinimalSquareRoot provides (helper) functions to express a square
++ root of an integer or rational number in terms of a n-th root of
++ unity.
MinimalSquareRoot: with
    rationalSquareRoot: QQ -> Record(rat: QQ, radical: ZZ)
      ++ if z = rationalSquareRoot(x) then x = (z.rat)^2 * z.radical
      ++ and z.radical has no square of a prime as a divisor, i.e. it
      ++ is a radical integer. z.radical can be negative.
    minimalRootOfUnityForSquareRootOfRadicalInteger: ZZ -> PP
      ++ minimalRootOfUnityForSquareRootOfRadicalInteger(z) returns an
      ++ integer n such that in ZZ(x) (where x is a primitive n-th
      ++ root of unity) there exists an element y such that y^2=z. We
      ++ assume that z is a radical integer, i.e., no square of a
      ++ prime is a factor of z.
    minimalRootOfUnityForSquareRootOf: QQ -> PP
      ++ minimalRootOfUnityForSquareRootOf(z) returns an integer n
      ++ such that in QQ(x) (where x is a primitive n-th root of
      ++ unity) there exists an element y such that y^2=z.
  == add
    fUnion ==> Union("nil", "sqfr", "irred", "prime")
    FL ==> List Record(flag: fUnion, factor: ZZ, exponent: NN)

    -- local
    squarePart(fl: FL): ZZ ==
        -- if fl = factorList factor x and z=squarePart(fl) then
        -- z^2*r=expand(fl) for some squarefree r.
        z: ZZ := 1
        for x in fl repeat
            e: NN := asNN shift(x.exponent, -1)
            z := (x.factor)^e * z
        return z

    rationalSquareRoot(x: QQ): Record(rat: QQ, radical: ZZ) ==
        import from FL
        fden: Factored ZZ := factor denom x
        fnum: Factored ZZ := factor numer x
        fl: FL := factorList fden
        for f in fl | odd?(f.exponent) repeat
            fnum := f.factor * fnum
            fden := f.factor * fden
        fl := factorList fnum
        r: ZZ := 1
        for f in fl | odd? (f.exponent) repeat r := f.factor * r
        -- Note that the odd bit will be shifted away in squarePart.
        if x < 0 then r := -r
        return [squarePart(fl)/squarePart(factorList fden), r]

    -- local
    minimalRootOfUnityForSquareRootOfPositiveRadicalInteger(x: PP): PP ==
        -- x is a radical integer (squarefree)
        -- See \cite[Section~IV.3]{Lang_AlgebraicNumberTheory_1986}.
        x = 2 => 8
        one? positiveRemainder(x, 4) => x
        4*x

    minimalRootOfUnityForSquareRootOfRadicalInteger(x: ZZ): PP ==
        -- It x was negative, we make sure that the result is a
        -- number that is divisible by 4.
        zero? x => 1
        z: PP := asPP abs x
        m: PP := minimalRootOfUnityForSquareRootOfPositiveRadicalInteger z
        x < 0 => -- make sure the return value is divisible by 4
            odd? m => 4*m
            odd? shift(m, -1) => 2*m
            m
        m

    minimalRootOfUnityForSquareRootOf(x: QQ): PP ==
        -- We first multiply numerator and denominator such that the
        -- denominator becomes a perfect square. Then we only consider
        -- the primes of the numerator appearing with an odd exponent.
        -- It x was negative, we make sure that the result is
        -- number that is divisible by 4.
        zero? x => 1
        rad: ZZ := rationalSquareRoot(x).radical
        minimalRootOfUnityForSquareRootOfRadicalInteger rad


)if LiterateDoc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Package GaussRoot}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif


)abbrev package GAUSSRT GaussRoot
++ GaussRoot(R, r, n) provides functions to express a square root
++ of a positive radical integer in terms of r (a n-th root of unity).
++ A radical integer is an integer that is not divisible by a square
++ of a prime.
GaussRoot(R: Ring, xi: R, xiord: PP): with
    squareRootOfRadicalInteger: ZZ -> R
      ++ squareRootOfRadicalInteger(x) returns an element z in R such
      ++ that z^2=x. It returns 0, if such an element z cannot be
      ++ found in R. The function assumes that x is a radical integer
      ++ and different from zero, i.e. x does not contain a square of
      ++ a prime as a factor.
    squareRoot: QQ -> R
      ++ squareRoot(x) returns an element z in R such that z^2=x. It
      ++ returns 0, if such an element z cannot be found in R. The
      ++ function assumes that x is different from zero.
  == add

    -- gaussSumm corresponds to G(1, b) in
    -- \cite[Section~IV.3]{Lang_AlgebraicNumberTheory_1986}.
    -- We can achieve G(a, b) by calling gaussSum(g^a, b).
    gaussSum(g: R, b: PP): R ==
        z: R := 1
        for k in 1 .. asNN(b-1) repeat z := z + g^(k^2)
        return z

    squareRootOfPositiveRadicalInteger(x: PP): R ==
        -- x>0 is a radical integer (contains no square of a prime)
        one? x => 1$R
        import from MinimalSquareRoot
        b: PP := minimalRootOfUnityForSquareRootOfRadicalInteger x
        -- need a b-th primitive root of unity for sqrt(x)
        s: Union(ZZ, "failed") := xiord exquo b
        s case "failed" => 0$R -- no b-th root of unity available
        k: PP := asPP(s::ZZ)
        g: R := xi^k -- g is a primitive b-th root of unity
        x = 2 => return g-g^3 -- g is a primitive 8-th root of unity
        m: ZZ := positiveRemainder(x, 4)
        m=1 => return gaussSum(g, x)
        m=3 => return - g^x * gaussSum(g^4, x) -- G(4, x)/i = -i*G(4, x)
        --assert(even? x)
        --assert(b = 4*x)
        y: PP := asPP(shift(x, -1)) -- y := x/2
        -- now we compute sqrt(y) and multiply with sqrt(2).
        sqrt2: R := squareRootOfPositiveRadicalInteger 2
        return squareRootOfRadicalInteger(y) * sqrt2

    squareRootOfRadicalInteger(x: ZZ): R ==
        -- x is different from 0 and is a radical integer (contains no
        -- square of a prime)
        r: R := squareRootOfPositiveRadicalInteger asPP abs x
        x > 0 => r
        not zero?(xiord rem 4) => return 0 -- error i with i^2=-1 not existing
        i := xi^(asPP shift(xiord, -2)) -- i^2=-1
        i*r

    -- We assume that R has been chosen in such a way that the square
    -- root of the argument of squareRoot can be expressed in it.
    squareRoot(fq: QQ): R ==
        RQZ ==> Record(rat: QQ, radical: ZZ)
        rr: RQZ := rationalSquareRoot(fq)$MinimalSquareRoot
        sqrt: R := squareRootOfRadicalInteger(rr.radical)
        R has Algebra QQ => sqrt * ((rr.rat)::R)
        -- Otherwise we can only continue if we have no denominators.
        one? denom(rr.rat) => numer(rr.rat)::R * sqrt
        error "cannot take root in given ring"


)if LiterateDoc
%$
\end{document}
)endif
