-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2020  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Monoid basis of $R^*(N)$ and $R^\infty(N)$}
\author{Ralf Hemmecke}
\date{10-Dec-2015}
\maketitle
\begin{abstract}
  We compute a monoid basis for the set of $\eta$-quotients of level
  $N$ that are modular functions and have a (multiple) pole, if any,
  at infinity only. In fact, we only compute the exponent vectors of
  the respective generators, \ie, a basis for $R^\infty(N)$.

  The code implements both,
  \begin{itemize}
  \item an algorithm due to Radu \cite{Radu:RamanujanKolberg:2015}.
  \item another version as described in
    \cite{Hemmecke+Radu:EtaRelations:2018}, \ie, it builds the
    respective matrices of an integer problem and then lets the
    program \algo{4ti2}\footnote{4ti2~1.6.7~\cite{4ti2}} solve that
    system.
  \end{itemize}

  Furthermore, another algorithm is employed to compute a basis for
  $R^*(N)$.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Indroduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let $N$ be a positive natural number and define a $\Gamma_0(N)$ as a
subgroup of the special linear group $SL_2(\setZ)$ as follows.
\begin{gather*}
\Gamma_0(N) := \SetDef{  \begin{pmatrix}
    a & b\\
    c & d
  \end{pmatrix} \in SL_2(\setZ)}{N|c}
\end{gather*}
As in \cite{Radu:RamanujanKolberg:2015}, let $K(N)$ denote the set of
modular functions for $\Gamma_0(N)$ and $K^\infty(N)$ the set of
modular functions have a (multiple) pole, if any, at infinity only.
Furthermore, let $E(N)$ be the set of $\eta$-quotients that are
modular functions, and let $E^\infty(N) := E(N)\cap K^\infty(N)$.
%
Note that $E^\infty(N)=\SetDef{g_r}{r\in R^\infty(N)}$ where
$R^\infty(N)$ and $g_r$ are defined in
\cite{Hemmecke+Radu:EtaRelations:2018}.

This file contains code to compute a $\setN$-module basis for
$R^\infty(N)$ in two variants, one naive way done in pure FriCAS and
another version using an external program
\textsf{4ti2}\footnote{4ti2~1.6.7~\cite{4ti2}}.

Furthermore, we compute a $\setN$-module basis for $R^*(N)$.
%
Note that $E(N)=\SetDef{g_r}{r\in R^*(N)}$.




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let us start with a few common macros.

First of all for debugging.
)endif
OF==>OutputForm
dbgPrint(x,y) ==> print(([":> "::Symbol::OF, x::Symbol::OF, y::OF]$List(OF)::OF))
display77(x) ==> display((x::OF)::LinearOutputFormat, 77)
vPrint(x,y) ==> display77(hconcat(["-- "::Symbol::OF, x::Symbol::OF, ":="::Symbol::OF, y::OF]$List(OF)))

)if LiterateDoc
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
SQ ==> Matrix Q -- SquareMatrix(n, Q)
MZ ==> Matrix Z
VZ ==> Vector Z
VQ ==> Vector Q
LVZ ==> List VZ
ZRESULT ==> Record(zinhom: LVZ, zhom: LVZ, zfree: LVZ)

QAuxMEQ ==> QAuxiliaryModularEtaQuotientPackage

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Collection of auxiliary functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif

)abbrev package QEVAUX QEtaQuotientExponentVectorsAux
++ QEtaQuotientExponentVectorsAux provides a number of
++ auxiliary functions for the use in the variants to compute
++ etaQuotientExponentVectors.
QEtaQuotientExponentVectorsAux: with
    smallerGrade?: (List List Z, List List Z) -> Boolean
      ++ smallerGrade?(l1, l2) takes two lists as input and sorts them
      ++ (basically) lexicographically. It is supposed that li is a
      ++ list of the form [[[g1,i1], [g2,i2], ..., [gn,in]] where gk
      ++ is the grade of a powerseries and ik the index of that
      ++ powerseries in a vector. Furthermore, we assume that l1 and
      ++ l2 have equal lengths and are themselves sorted descendingly.
    sortByComponentGrade: (P, List VZ) -> List List Z
      ++ rs := sortByComponentGrade(m, gens) sorts gens such that if
      ++ ri:=vector(rs.i), rj:=vector(rs.j), and i<j then
      ++ smallerGrade?(toG(ri, t).sgi, toG(rj, t).sgi) holds where
      ++ t:=transpose(matrixLigozat(m)$QAuxMEQ) and toG computes
      ++ the respective sorted grades.
      ++ Informally, since the gens correspond to exponent vectors of
      ++ eta-quotients and t to the transpose of the Ligozat matrix,
      ++ v*t corresponds to the orders of the q-expansions at the
      ++ respective cusps. This function orders the gens in such a way
      ++ that the vector whose maximum grade (maximum taken over all
      ++ cusps) is minimal comes first.
  == add
    G ==> Record(sgi: List List Z, rvec: VZ)
        -- sgi = sorted grade and index list

    smallerGrade?(l1: List List Z, l2: List List Z): Boolean ==
        --assert(#(g1.sgi = #g2.sgi)
        for x1 in l1 for x2 in l2 repeat
           first x1 < first x2 => return true
           first x1 > first x2 => return false
           first rest x1 < first rest x2 => return true
           first rest x1 > first rest x2 => return false
        -- arriving here says that l1 = l2
        false
    toG(v: VZ, t: MZ): G ==
        o: VZ := v*t
        sgilist: List List Z := sort(_>, [[-o.i, i] for i in 1..#o])
        [sgilist, v]

    smallerGradeG?(g1: G, g2: G): Boolean == smallerGrade?(g1.sgi, g2.sgi)

    sortByComponentGrade(m: P, gens: List VZ): List List Z ==
        empty? gens => empty()
        t: MZ := transpose(matrixLigozat(m)$QAuxMEQ)
        ggens: List G := [toG(v, t) for v in gens]
        z := [members(g.rvec) for g in sort!(smallerGradeG?, ggens)]

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Monoid generators for $R^\infty(N)$ by Radu's algorithm}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

From the proof of Lemma~25 of the article
\cite{Radu:RamanujanKolberg:2015} we can extract a simple algorithm to
compute a $\setN$-module basis for $R^\infty(N)$.

As in \cite{Radu:RamanujanKolberg:2015}, we first determine $\kappa_1,
\ldots, \kappa_n$ where $n+1$ is the number of divisors of $N$. We are
left with testing a finite number of elements $x \in \setN^{n}$
(namely $\prod_{k=1}^n (\kappa_k -1)$) whether they fulfil certain
properties. In order to keep the set of generators small, we dismiss
generators that are combinations of other generators, \ie, we only
keep ``irreducible'' elements.


The domain \texttt{NModuleBasis(n)} is only an auxiliary domain
that represents the generators of a submodule of $\setN^n$.
%
The use of \texttt{VZ} instead of \texttt{Vector(N)} has only be done
for convenience. Negative vector entries are not allowed.
)endif

)abbrev domain NMODBAS NModuleBasis
++ NModuleBasis(n) represents the generators of an N-submodule of N^n.
NModuleBasis(n: N): with
    empty: () -> %
      ++ empty() represents the empty module basis.
    members: % -> List VZ
      ++ members(x) returns a basis of the (sub-)module such that no element
      ++ is a N-linear combination of the other elements.
    insert: (VZ, %) -> %
      ++ insert(v, x) returns a new basis z such that z=x if v is already
      ++ a N-linear combination of the elements of x. Otherwise, z is the
      ++ union of v with all elements from x that are not an N-multiple of v.
      ++ assert(v.i>0 for i in 1..n)
    reducible?: (VZ, %) -> Boolean
      ++ reducible?(v, x) returns true if the vector v is N-linear
      ++ combination of elements in x where N is the ring of natural
      ++ numbers.
    reduce: (VZ, %) -> VZ
      ++ reduce(v, x) returns a vector z such that reducible?(z,x) is
      ++ false and v-z is a N-linear combination of elements from x.
    sup: % -> VZ
      ++ sup(x) returns a minimal (w.r.t reducibility) element that
      ++ is reducible by every element of x.
      ++ If x is empty, it returns the zero vector.
      ++ sup(x) is the supremum (w.r.t. reducibility) of all elements in x.
    supSum: % -> Z
      ++ supSum(x) returns the sum of the entries of sup(x).
  == add
    Rep ==> List VZ
    -- local functions
    -- We do not expect big differences between a and b so a dumb loop
    -- will do.
    reducibleBy?(a: VZ, b: VZ): Boolean ==
        for i in 1..n repeat if qelt(a, i) < qelt(b, i) then return false
        true
    reduceBy!(a: VZ, b: VZ): VZ ==
        while reducibleBy?(a, b) repeat
            for i in 1..n repeat qsetelt!(a, i, qelt(a, i) - qelt(b, i))
        return a

    -- exported functions
    empty(): % == per(empty()$Rep)
    construct(l: List VZ): % == per l
    members(x: %): List VZ == rep x
    insert(vz: VZ, x: %): % ==
        --assert(not reducible?(vz, x))
        per cons(vz, [f for f in rep x | not reducibleBy?(f, vz)])
    reducible?(vz: VZ, x: %): Boolean ==
        for f in rep x repeat if reducibleBy?(vz, f) then return true
        false
    reduce(vz: VZ, x: %): VZ ==
        cz: VZ := copy vz
        for f in rep x repeat cz := reduceBy!(cz, f)
        cz
    sup(x: %): VZ ==
        r: VZ := new(n, 0)$VZ
        for f in rep x repeat for i in 1..n repeat r.i := max(r.i, f.i)
        r
    supSum(x: %): Z ==
       s: Z := 0
       for i in 1..n repeat
           r: Z := 0
           for f in rep x repeat r := max(r, f.i)
           s := s + r
       return s


)abbrev package QETAQMEV QEtaQuotientMonoidExponentVectors
++ QEtaQuotientMonoidExponentVectors helps to do computations with eta
++ functions and quotients of eta functions expressed in terms of the
++ q-series.
++ An alternative version can be found as
++ \spadtype{QEtaQuotientExponentVectors4ti2}.
QEtaQuotientMonoidExponentVectors: with
    etaQuotientMonoidExponentVectors: P -> List List Z
      ++ etaQuotientMonoidExponentVectors(m) returns Z-vectors $r$ (of
      ++ dimension n+1, where #(divisors m)=n+1) that correspond to
      ++ the formula (16) from \cite{Radu:RamanujanKolberg:2015}, i.e.
      ++ (together with the zero vector) they describe the monoid
      ++ E^\infty(m) and the N-module R^\infty(N), respectively.
  == add
    QEVAux ==> QEtaQuotientExponentVectorsAux

    -- domain constant vdivs for "determineKappas"
    vdivs24: VZ := vector(divisors(24)$IntegerNumberTheoryFunctions)

    -- These are the conditions given on page 2 of
    -- \cite{Radu:RamanujanKolberg:2015}.
    -- Note that the given r does not have an entry corresponding to the
    -- divisor 1. This entry will be computed on the fly (r0) via the
    -- relation that w(r)=0.
    -- Furthermore, if an r with non-integer entries is given, it
    -- automatically means that the conditions are not fulfilled.
    -- This implementation is a specialized form of
    -- rStarConditions $ QAuxiliaryModularEtaQuotientPackage.
    -- We keep it as it was programmed first and is probably faster
    -- for the purpose it is used for. Furthermore, since
    -- etaQuotientMonoidExponentVectors$QEtaQuotientExponentVectors4ti2
    -- is much more efficient. There is no reason to refactor.
    rConditions?(n: N, vdivs: VZ, rtilde: VQ): Boolean ==
        --assert(divs1=delete!(divisors(m)$IntegerNumberTheoryFunctions, 1)
        --assert(n+1 = #divs)
        --assert(n = #r)
        n1: P := qcoerce(n + 1)@P
        r0: Z := 0
        for i in 1..n repeat
            if not one? denom(rtilde.i) then return false
            r0 := r0 - numer(rtilde.i)
        -- Compute numbers for conditions 2, 3, 4.
        a: Z := r0
        b: Z := r0 * vdivs.n1
        c: Factored Z := 1
        for i in 1..n repeat
            ri: Z := numer(rtilde.i)
            d := vdivs(i+1)
            a := a + ri * d           -- sigma_\infty
            b := b + ri * vdivs(n1-i) -- sigma_0
            c := c * factor(d)^(qcoerce(abs(ri))@N)
        -- Check conditions 2, 3, 4.
        not zero? positiveRemainder(a, 24) => false
        not zero? positiveRemainder(b, 24) => false
        for fe in factors c repeat if odd?(fe.exponent) then return false
        return true

    -- Compute the inverse of A_N as given in Lemma 25 on page 235 of
    -- \cite{Radu:RamanujanKolberg:2015}, but in a variant.
    -- Difference is:
    -- Radu:RamanujanKolberg:2015: for j in 2..n+1
    -- used here:                  for j in 1..n
    -- and the definition of the function a.
    a(m: Z, di: Z, dj: Z): Q == -- di==c, dj==delta
       diprime: Z := (m exquo di)::Z
       diprime/dj * ((gcd(di, dj)^2 - dj) / (24*gcd(diprime, di)))
    inverseAMatrix(m: P, n: N, d: VZ): SQ ==
        amat: SQ := matrix [[a(m, d.i, d.j) for j in 2..n+1] for i in 1..n]
        -- Signature is inverse: SQ -> Union(SQ, "failed"), but we know
        -- that this matrix is regular.
        inverse(amat)::SQ
    determineKappas(n: N, vdivs: VZ, ainv: SQ): VZ ==
        -- Determine the kappa_j (vkappas.j) in such a way that
        -- ainv * kappa.j * unitVector(j)
        -- is an integer vector.
        vkappas: VZ := new(n, 0)
        rkappaj: VQ := new(n, 0)
        rtilde: VQ := new(n, 0)
        for j in 1..n repeat
            -- denominator over the j-th column
            kappa: Z := lcm([denom qelt(ainv, i, j) for i in 1..n]$(List Z))
            -- We multiply the columns of ainv with the respective
            -- denominator of the row, so that the result will be an
            -- integer matrix linv.
            for i in 1..n repeat rkappaj.i := kappa * qelt(ainv, i, j)
            -- Determine the kappa_i in such a way that
            -- ainv * kappa.i * unitVector(i) fulfils the relations.
            -- We do this by checking all relevant multiples up to 24.
            -- The kappas are the factors that make everything denominator free
            -- and let the (extension of the) images of the unitvectors
            -- fulfil all conditions from R^*(m) given on page 2 of
            -- \cite{Radu:RamanujanKolberg:2015}. Compare also with Lemma 25
            -- on page 12.
            for d in 1..8 repeat -- 8=#divisors(24) -- 1, 2, 3, 4, 6, 8, 12, 24
                delta: Z := vdivs24.d
                for i in 1..n repeat qsetelt!(rtilde, i, delta * rkappaj.i)
                if rConditions?(n, vdivs, rtilde) then
                    qsetelt!(vkappas, j, delta * kappa)
                    break -- out of 'for d' loop
        vkappas

    -- an auxiliary function to compute ainv*vz but get the types right
    mult(n: N, ainv: SQ, vz: VZ): VQ ==
        vq: VQ := new(n, 0)
        for i in 1..n repeat -- row index
            ri: Q := vz.1 * ainv(i, 1)
            for j in 2..n repeat ri := ri + vz.j * qelt(ainv, i, j)
            qsetelt!(vq, i, ri)
        return vq

    -- Recursively distribute deg over the entries 1..i of vz
    -- such that each entry is smaller than the respective kappa entry.
    vectorsAux(deg: Z, i: Z, kappa: VZ, vz: VZ): List VZ ==
        --assert(i>=1)
        --assert(i<=#vz)
        --assert(i<=#kappa)
        --assert(deg>=0)
        --assert(kappa.i>0 for i in 1..i)
        zero? deg => return cons(copy vz, empty()) -- nothing more to distribute
        z: List VZ := empty()
        one? i => -- base case of the recursion
            deg < kappa.1 =>
                vz.1 := deg
                return cons(copy vz, z)
            return z
        --assert(i>1)
        i = 2 => -- we know the base case and can do faster, no recurse
            for e in max(0, deg - kappa.1 + 1) .. min(deg, kappa.2 - 1) repeat
                e2: Z := deg - e
                v: VZ := copy vz
                qsetelt!(v, 2, e)
                qsetelt!(v, 1, e2)
                z := cons(v, z)
            return z

        for e in 0..min(deg, kappa.i - 1) repeat
            s: List VZ := vectorsAux(deg-e, i-1, kappa, vz)
            while not empty? s repeat
                v := first s
                s := rest s
                qsetelt!(v, i, e)
                z := cons(v, z)
        return z

    vectors(deg: Z, n: N, kappa: VZ): List VZ ==
        -- Distribute deg over the entries from 1 to n.
        vectorsAux(deg, n, kappa, new(n, 0)$VZ)

    monoidGenerators(n: N, vdivs: VZ, ainv: SQ, vkappas: VZ): List VZ ==
        -- We can form a Groebner basis (consider the vectors
        -- as exponent vectors of polynomials). We only need to consider
        -- elements that are not yet in this Groebner basis.
        mgb: NModuleBasis(n) := empty()
        for i in 1..n repeat
            v: VZ := new(n, 0)
            v.i := vkappas.i
            mgb := insert(v, mgb)
        dg: Z := 1 -- We go by increasing degree to fill up mgb.
        -- generate all elements of "degree" dg

        while dg < supSum mgb repeat
            vs: List VZ := vectors(dg, n, vkappas)
            for v in vs | not reducible?(v, mgb) repeat
                rtilde: VQ := mult(n, ainv, v)
                if rConditions?(n, vdivs, rtilde) then mgb := insert(v, mgb)
            dg := dg + 1
        members mgb

    rvec(n: N, v: VZ, ainv: SQ): VZ ==
        rr: VQ := mult(n, ainv, v)
        r: VZ := new(n+1, 0)
        r0: Z := 0
        for i in 1..n repeat
            if not one? denom qelt(rr, i) then error "not integer vector"
            rri: Z := numer qelt(rr, i)
            qsetelt!(r, i+1, rri)
            r0 := r0 - rri
        qsetelt!(r, 1, r0)
        r

    -- exported functions
    etaQuotientMonoidExponentVectors(m: P): List List Z ==
        divs: List Z := divisors(m)$IntegerNumberTheoryFunctions
        n: N := # rest divs
        vdivs: VZ := vector divs
        --assert(m>1)
        --assert(divs = sort(<, divs))
        -- We first set up the nxn-matrix A_d according to Lemma 25 of
        -- Radu \cite{Radu:RamanujanKolberg:2015}.
        ainv: SQ := inverseAMatrix(m, n, vdivs)
        vkappas: VZ := determineKappas(n, vdivs, ainv)
        monoidgens: List VZ := monoidGenerators(n, vdivs, ainv, vkappas)
        eqgens: List VZ := [rvec(n, v, ainv) for v in monoidgens]
        sortByComponentGrade(m, eqgens) $ QEVAux

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Monoid generators for $R^\infty(N)$ by using 4ti2}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

A description of which data has to be fed to the program
\textsf{4ti2}\footnote{4ti2~1.6.7~\cite{4ti2}} is described in
\cite{Hemmecke+Radu:EtaRelations:2018}, in particular in Section~6 and
Section~8.

)endif

)abbrev package QEV4TI2 QEtaQuotientExponentVectors4ti2
++ QEtaQuotientExponentVectors4ti2 helps to do computations with
++ eta functions and quotients of eta functions expressed in terms of
++ the q-series.
++ An alternative version can be found as
++ \spadtype{QEtaQuotientMonoidExponentVectors}.
QEtaQuotientExponentVectors4ti2: with
    etaQuotientMonoidExponentVectors: P -> List List Z
      ++ etaQuotientMonoidExponentVectors(m) returns Z-vectors $r$ (of
      ++ dimension n, where n=#(divisors m)) that correspond to
      ++ the formula (16) from \cite{Radu:RamanujanKolberg:2015}, i.e.
      ++ (together with the zero vector) they describe the monoid
      ++ E^\infty(m).
      ++ Same as etaQuotientsMonoidExponentVectors(m, [1..n-1]) where
      ++ n is the number of divisors of n.
    etaQuotientMonoidExponentVectors: (P, List Z) -> List List Z
      ++ etaQuotientMonoidExponentVectors(m, idivs) computes the
      ++ matrixLigozatRStar(m, idivs)$QAuxiliaryModularEtaQuotientPackage
      ++ and finds a basis of the solution space.
      ++ It computes the sam as etaQuotientExponentVectors(m, idivs, 0).
    etaQuotientExponentVectors: (P, List Z, Z) -> List List Z
      ++ etaQuotientExponentVectors(m, idivs, weight) computes
      ++ etaQuotientExponentVectors(m, idivs, rhs, weight) for
      ++ rhs := [0 for i in idivs].
    etaQuotientExponentVectors: (P, List Z, List Z, Z) -> List List Z
      ++ etaQuotientExponentVectors(m, idivs, rhs, weight) computes
      ++ zsolve4ti2(m, idivs, concat(rhs, [weight]) and chooses one
      ++ particular solution and adds it to all homogeneous and free
      ++ solution vectors. The opposite vectors of the free solutions
      ++ are also taken into account.
    zsolve4ti2: (P, List Z, List Z) -> ZRESULT
      ++ zsolve4ti2(m, idivs, rhs) computes n:=#idivs,
      ++ mat:=matrixLigozatRStar(m,idivs)$QAuxiliaryModularEtaQuotientPackage
      ++ and the column vector b whose first entries are given by rhs.
      ++ Note that the (n+1)-th entry corresponds to the weight.
      ++ See in the specification of matrixLigozatRStar about the meaning
      ++ of the other rows of the matrix.
  == add
    QEVAux ==> QEtaQuotientExponentVectorsAux

    -- monoidGenerators(nn, idivs) takes the level nn and a list of
    -- indices idivs (subset of 1..n, which corresponds to the cusps
    -- a/d.i for i in idivs).
    -- For matrix A_N^\infty of formula (9) in
    -- \cite{Hemmecke+Radu:EtaRelations:2018}, the variable idivs
    -- should be [i for i in 1..n-1].
    -- In general this function computes the (vertical) concatenation
    -- of B_m and a submatrix M of A_N corresponding to the indices idivs.
    -- Then monoidGenerators computes vectors z such that
    -- B_m*z=b(1..nrows(B_m)) and M*z>=0 where the vector b has the weight
    -- in its first entry and zeros everywhere else.
    zsolve4ti2(m: P, idivs: List Z, rhs: List Z): ZRESULT ==
        mat: MZ := matrixLigozatRStar(m, idivs)$QAuxMEQ
        rows := nrows mat
        nidivs: N := #idivs
        --assert(#rhs=nidivs)
        b: VZ := new(rows, 0) -- the right hand side vector
        rels: VZ := new(rows, 0) -- all equations
        -- However the first nidivs entries are inequations A x >= b.
        for i in 1..nidivs repeat rels.i := 1
        for bi in rhs for i in 1..min(#rhs, rows) repeat b.i := bi
        zsolve(mat, rels, b)$X4ti2

    generatorsWithWeight(m: P, idivs: List Z, weight: Z): List VZ ==
        rhs: List Z := concat([0 for i in idivs], weight)
        res: ZRESULT := zsolve4ti2(m, idivs, rhs)
        result: List VZ := res.zhom
        for x in res.zfree repeat result := cons(x, cons(-x, result))
        -- We only need the zhom and zfree part, since the zinhom part
        -- should contain only zeros if weight = 0.
        zero? weight => result
        -- Otherwise, we have to add the vector that comes from the *one*
        -- inhomogeneous solution.
        -- Sort by the entry in position #idivs+1.
        n: Z := numberOfDivisors(m)$IntegerNumberTheoryFunctions
        -- Sort according to the order of the expansion at infinity.
        dbgPrint("number of inhomogeneous solutions", #(res.zinhom))
        --TODO: Could improve by using smallerG?
        --TODO: Why not using an inhomagenous vector v such that
        --      there is a smallerG? minimum over all possible res.zinhom
        --      elements?
        -- Note that then (n+1)th entry corresponds to the pole order
        -- at infinity (first slack variable).
        zi := sort((x:VZ,y:VZ):Boolean +-> (x(n+1) < y(n+1)), res.zinhom)
        dbgPrint("inhomogeneous solutions", zi)
        v := first(zi) -- only choose one inhomogeneous solution
        [v+x for x in result]

    monoidGenerators(m: P, idivs: List Z): List VZ ==
        generatorsWithWeight(m, idivs, 0)

    -- exported functions
    etaQuotientExponentVectors(m: P, idivs: List Z, w: Z): List List Z ==
        gens: List VZ := generatorsWithWeight(m, idivs, w)
        n: Z := numberOfDivisors(m)$IntegerNumberTheoryFunctions
        gens := [g(1..n) for g in gens]
        -- The resulting vectors correspond to the exponents of
        -- eta-quotients. We sort these generators by the corresponding
        -- orders of their expansions. This is done by means
        -- of the Ligozat matrix.
        -- Negative orders are considered first, tie breaking is done
        -- by positive orders (which we actually don't care about)
        sortByComponentGrade(m, gens) $ QEVAux

    etaQuotientMonoidExponentVectors(m: P, idivs: List Z): List List Z ==
        etaQuotientExponentVectors(m, idivs, 0)

    etaQuotientMonoidExponentVectors(m: P): List List Z ==
        -- generators for R^\infty(m)
        n: Z := numberOfDivisors(m)$IntegerNumberTheoryFunctions
        idivs: List Z := [i for i in 1..n-1]
        etaQuotientMonoidExponentVectors(m, idivs)



)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Compute a basis for $R^*(N)$}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

A description of which data has to be fed to the program
\textsf{4ti2}\footnote{4ti2~1.6.7~\cite{4ti2}} is described in
\cite{Hemmecke+Radu:EtaRelations:2018}, in particular in Section~6 and
Section~8.

In the following, we compute just a basis for $R^*(N)$ (not
$R^\infty(N)$). In fact, it is sufficient to compute a basis for the
nullspace for the matrix $B_N$ (see
\cite[Section~6]{Hemmecke+Radu:EtaRelations:2018}).

)endif

)abbrev package QMEVSTAR QEtaQuotientMonoidExponentVectorsStar
++ QEtaQuotientMonoidExponentVectorsStar helps to do computations with
++ eta functions and quotients of eta functions expressed in terms of
++ the q-series.
QEtaQuotientMonoidExponentVectorsStar: with
    etaQuotientMonoidExponentVectors: P -> List List Z
    etaQuotientMonoidExponentVectorsX: P -> List List Z
      ++ etaQuotientMonoidExponentVectors(m) returns Z-vectors $r$ (of
      ++ dimension n, where n=#(divisors m)). These vectors form a
      ++ Z-basis of $R^*(N)$ as defined in
      ++ \cite{Hemmecke+Radu:EtaRelations:2018}).
      ++ The version with X at the end tries to make the resulting
      ++ vector of the orders of the series small in absolute value.
    basisReduction: (List VZ, Vector Z) -> List VZ
      ++ basisReduction(basis, ix) assumes that for each
      ++ vector b in basis and each i in 1..#ix:
      ++ If ix.i > 0, then b.i > 0, if ix.i < 0, then b.i <= 0,
      ++ if ix.i = 0, then this entry is ignored.
      ++ It returns another basis bas such that with the same property
      ++ as the input basis and additionally, for each i in 1..ix,
      ++ length(bas.i)^2 <= length(basis.i).
    extendedBasisReduction: (List VZ, Vector Z) -> List VZ
      ++ extendedBasisRedcution(basis, ix) returns the same as
      ++ basisReduction(basis, ix) except that before calling
      ++ basisReduction, each vector from basis gets extended by the
      ++ respective unit vector.
  == add
    QEVAux ==> QEtaQuotientExponentVectorsAux

    integerNullSpace(mat: MZ): List VZ ==
        v: VZ := new(nrows mat, 0)
        sol := diophantineSystem(mat, v)$SmithNormalForm(Z, VZ, VZ, MZ)
        sol.basis

    -- exported functions
    etaQuotientMonoidExponentVectors(m: P): List List Z ==
        rStar: MZ := rStarConditionMatrix(m)$QAuxMEQ
        gens: List VZ := integerNullSpace rStar
        mat: MZ := matrix [entries v for v in gens]
        lat: MZ := LLL(mat)$LLLReduction
        ll: List List Z := listOfLists lat
        ll2: List List Z := [[-x for x in l] for l in ll]
        sortByComponentGrade(m, [vector l for l in concat(ll, ll2)]) $ QEVAux

    etaQuotientMonoidExponentVectorsX(m: P): List List Z ==
        divs: List Z := divisors(m)$IntegerNumberTheoryFunctions
        rStar: MZ := rStarConditionMatrix(m)$QAuxMEQ
        gens: List VZ := integerNullSpace rStar
        mat: MZ := matrix [[x for x in entries v for d in divs] for v in gens]
        ligozat: MZ := matrixLigozat(m)$QAuxMEQ
        ligozat := transpose ligozat
        ords := mat * ligozat
        rec: Record(lll: MZ, trf: MZ) := extendedLLL(ords)$LLLReduction
        t: MZ := rec.trf
        lat: MZ := t*mat
        ll: List List Z := listOfLists lat
        ll2: List List Z := [[-x for x in l] for l in ll]
        sortByComponentGrade(m, [vector l for l in concat(ll, ll2)]) $ QEVAux

    good?(v: VZ, ix: VZ): Boolean ==
        for i in 1..#ix repeat if ix.i < 0 and v.i > 0 then return false
        true

    greater?(x: VZ, y: VZ, ix: VZ): Boolean ==
        for i in 1..#ix repeat
            if ix.i < 0 and x.i > y.i then return false
        true

    length2(v: VZ, ix: VZ): Z ==
        len := 0
        for i in 1..#ix repeat if ix.i > 0 and v.i > 0 then
            len := len + (v.i)^2
        len

    basisReduction(basis: List VZ, ix: VZ): List VZ ==
        for b in basis repeat if not good?(b, ix) then
            vPrint("b", b)
            vPrint("ix", ix)
            error "basis does not fulfil input condition"
        red? := true
        n: Z := #ix
        bas: Vector VZ := vector basis
        while zero? ix.n repeat n := n - 1
        while red? repeat
            red? := false
            for i in 1..#bas repeat
                b := bas.i
                lb := length2(b, ix)
                vPrint("i,lb,b", [vector [i, lb], b]@List VZ)
                for k in 1..#bas | k ~= i repeat
                    v := bas.k
                    while greater?(b, v, ix) and
                          (r: VZ := b - v; lr: Z := length2(r, ix);  lr < lb)
                      repeat
                        b := r
                        lb := lr
                        red? := true -- one reduction happened
                bas.i := b
        return members bas

    extendedBasisReduction(basis: List VZ, ix: VZ): List VZ ==
        empty? basis => return empty()
        l: N := # first basis
        n: N := # basis
        e: N := l + n
        bas: List VZ := empty()
        for b in basis for i in l+1.. repeat
           v: VZ := new(e, 0)
           copyInto!(v, b, 1)
           qsetelt!(v, i, 1) -- construct attached unit matrix
           bas := cons(v, bas)
        bas := reverse!(bas)
        red := basisReduction(bas, ix)

)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
