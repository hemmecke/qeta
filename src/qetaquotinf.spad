-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Computing with (generalized) Dedekind Eta Functions as $q$-series}
\author{Ralf Hemmecke}
\date{10-Dec-2015}
\maketitle
\begin{abstract}
  The domain \qetatype{EtaQuotientInfinity} provides Dedekind
  eta-quotients and generalized Dedekind eta-quotient and their
  $q$-expansions whereas the package
  \qetatype{QEtaModularInfinityExpansion}(C,QMOD) deals with the
  modular case and constructs elements of type
  \qetatype{QEtaGradedAlgebra}(C).
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This code was initially based on the article
\cite{Radu_RamanujanKolberg_2015} by Silviu Radu, but was extended in
2020 to the generalization from
\cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.

It implements prerequisite domains for the computation of relations
among eta-functions.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

PP ==> PositiveInteger
NN ==> NonNegativeInteger
ZZ ==> Integer
QQ ==> Fraction ZZ
OF ==> OutputForm
LZZ ==> List ZZ
LLZZ ==> List LZZ
QMOD0 ==> QEtaModularGamma0
SPEC ==> QEtaSpecification
eqSPEC ==> etaQuotientSpecification $ SPEC

asPP x ==> x pretend PP

)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Domain EtaQuotientInfinity: Eta quotient expansions at infity}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The domain \texttt{EtaQuotientInfinity} implements a representation for
(generalized) eta-functions (in terms of $q$) and products and
quotients of eta-functions.

)endif


)abbrev domain EQI EtaQuotientInfinity
++ EtaQuotientInfinity implements the (multiplicative) group of
++ (generalized) eta-functions in their expansion at infinity.
++ Elements can be represented as Laurent series in q with a prefactor
++ of q^r where r is a rational number (and in case of eta-quotient
++ (non-generalized) r has a denominator that is a divisor of 24).
++ Note that this domain keeps the "fractional part" always separate
++ from the "series part" even when the fractional part is an integer.
EtaQuotientInfinity(C): Exports == Implementation where
  C: Ring
  T1 C ==> QEtaTaylorSeries C
  L1 C ==> QEtaLaurentSeries C
  Exports ==> Join(Monoid, CoercibleTo OutputForm) with
    if C has IntegralDomain then Group
    -- Note that e = \prod_{k=1}^\infty (1-q^{kn}) has integer coefficients
    -- and that the inverse of this series has integer coefficients, as well.
    -- Therefore, it is not a lie that we assert "Group".
    prefactor: % -> QQ
      ++ prefactor(x) returns the fractional part of the fractional of
      ++ the fractional q-power prefactor of x where q is the variable
      ++ of L. The returned value is in the range 0<=prefactor(x)<1,
      ++ because integer powers of q are moved to the series part.
    seriesPart: % -> L1 C
      ++ seriesPart(x) returns the Laurent series part of x.
      ++ x = q^r*seriesPart(x) where r=prefactor(x).
    eulerExponent: % -> QQ
      ++ If x is a (generalized) eta-quotient, then eulerExponent(x)
      ++ is the fractional exponent e of q such that
      ++ q^e*eulerExpansion(x) is equal to the Puiseux series
      ++ expansion of x.
    eulerExpansion: % -> L1 C
      ++ eulerExpansion(x) returns the power series (with constant
      ++ coefficient 1) that results from just considering the product
      ++ of Euler function powers (q-Pochhammer symbols) connected to
      ++ the creation the (generalized) eta-quotient.
    expansion: % -> L1 C
      ++ expansion(x) aborts with error if eulerExponent(x) is not am
      ++ integer. Otherwise it returns q^r*seriesPart(x) where
      ++ r=prefactor(x) and q is the variable of the series domain. It
      ++ is the same as q^e*eulerExpansion(x) where
      ++ e=eulerExponent(x).
    eta: PP -> %
      ++ eta(n) returns q^(n/24)*\prod_{k=1}^\infty (1-q^{kn}).
    eulerFunctionPower: (PP, ZZ) -> L1 C
      ++ eulerFunctionPower(n, e) computes
      ++ (\prod_{k=1}^\infty(1-q^{kn}))^e.
    etaPower: (PP, ZZ) -> %
      ++ etaPower(d, e) returns eta(d)^e.
    generalizedEtaPower: (PP, PP, QQ) -> %
      ++ generalizedEtaPower(d,g,e) returns the generalized
      ++ eta-quotient given by \eqref{eq:generalized-eta-quotient} and
      ++ formula (1.11) in
      ++ \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}
      ++ raised to the power e.
      ++ generalizedEtaPower(d,g,e) returns
      ++ etaPower(d, numer(2*e)), if g=0;
      ++ etaQuotient([g, d],[numer(2*e),-numer(2*e)]), if g=d/2; and
      ++ returns $\eta_{d,g}(\tau)^e$ if e is an integer.
      ++ Note that only for g=0 and g=d/2 the exponent e can be a
      ++ half-integer. Otherwise, it must come with denominator =1.
--      ++ Since $\eta_{\delta,0}(\tau)=\eta(\delta\tau)^2$ and
--      ++ $\eta_{\delta,\delta/2}(\tau) =
--      ++ \frac{\eta(\frac{\delta}{2}\tau)^2}{\eta(\delta\tau)^2}$ are
--      ++ squares, we define
--      ++ generalizedEtaQuotient(delta,0,e):=$\eta(\delta\tau)^e$ and
--      ++ generalizedEtaQuotient(delta,g,e):=
--      ++ $\frac{\eta(g\tau)^e}{\eta(2g\tau)^e}}$ if $g=\delta/2$.
    etaQuotientInfinity: SPEC -> %
      ++ etaQuotientInfinity(rspec) returns the product (generalized)
      ++ eta-powers for each list l in rspec. See generalizedEtaPower
      ++ for the format of the parameter l.

    -- The following function (polynomialToEta) is for checking and
    -- actually does not necessarily yield an element of %. For
    -- example, E2 + E3 would mean to add Laurent series with
    -- different prefactors which is not supported by our "+" function
    -- and also not by the chosen representation of the domain. We
    -- expect the polynomial p to have the property that each monomial
    -- leads to Laurent series with the same prefactor. In this sense
    -- the function is only partial. However, we intend only to use it
    -- to check whether zero?(seriesPart polynomialToEta p).
    -- Furthermore, polynomialToEta(p) aborts with error if Laurent
    -- series with different prefactor are about to be added, since
    -- that cannot be represented in %.
    polynomialToEta: Polynomial C -> %
      ++ polynomialToEta(p) assumes that all variables are of the form
      ++ Ei with the letter E and a positive number i. In the
      ++ polynomial p the powers Ei^ni will be replaced by eta(i)^ni.
      ++ If l is the leading monomial p, then it is assumed that
      ++ prefactor(toEta(l))=prefactor(polynomialToEta(m)) for every
      ++ monomial m of p.
  Implementation ==> add
    -- The series part is always a power series with constant 1, in
    -- fact, it is a product/quotient of Euler functions. The
    -- eulerexpo must be divided by 24 to get the correct fractional
    -- exponent of q.
    Rep ==> Record(eulerexpo: QQ, eulerquot: L1 C)
    jacobiFunctionPow ==> jacobiFunctionPower $ CachedQPochhammerPower(C, L1 C)

    new(e: QQ, s: L1 C): % == per [e, s]
    eulerExponent(x: %): QQ == rep(x).eulerexpo
    eulerExpansion(x: %): L1 C == rep(x).eulerquot

    1: % == new(0, 1$L1(C))
    ((x: %) * (y: %)): % == new(eulerExponent x + eulerExponent y,
                                eulerExpansion x * eulerExpansion y)
    inv(x: %): % == new(- eulerExponent x, recip(eulerExpansion x)::L1(C))
    hashUpdate!(h: HashState, x: %): HashState ==
        hashUpdate!(hashUpdate!(h, eulerExponent x), eulerExpansion x)
    coerce(x: %): OutputForm ==
        q: OutputForm := (variable(0$L1(C))$L1(C))::OutputForm
        r: QQ := eulerExponent x
        zero? r => (eulerExpansion x)::OutputForm
        e: OutputForm := r::OutputForm
        q^e * (eulerExpansion x)::OutputForm

-------------------------------------------------------------------

    prefactor(x: %): QQ ==
        e: QQ := eulerExponent x
        e - floor(e)::QQ
    seriesPart(x: %): L1 C ==
        laurent(floor eulerExponent x, qetaTaylorRep eulerExpansion x)

    expansion(x: %): L1 C ==
        e: QQ := eulerExponent x
        not one? denom e =>  error "eta-quotient has fractional expansion"
        laurent(numer eulerExponent x, qetaTaylorRep eulerExpansion x)

    eta(n: PP): % == new(n/24, eulerFunctionPower(n, 1))
    eulerFunctionPower(d: PP, rd: ZZ): L1 C ==
        eulerFunctionPower(d, rd)$CachedQPochhammerPower(C, L1 C)
    etaPower(n: PP, e: ZZ): % == new(n*e/24, eulerFunctionPower(n, e))

    -- local
    generalizedEulerFunctionPower(d: PP, g: PP, e: ZZ): L1 C ==
        eulerFunctionPower(d, -e) * jacobiFunctionPow(d, g, e)

    generalizedEtaPower(d: PP, g: PP, e: QQ): % ==
        zero? e => 1
        zero? g =>
            e := 2*e
            one? denom e => etaPower(d, numer e)
            error "generalizedEtaQuotient: only accepting half-integer powers"

        2*g = d =>
            e := 2*e
            one? denom e =>
                etaQuotientInfinity eqSPEC([g, d], [numer e, - numer e])
            error "generalizedEtaQuotient: only accepting half-integer powers"

        not one? denom e =>
            error "generalizedEtaQuotient: only accepting integer powers"

        l: L1 C := generalizedEulerFunctionPower(d, g, numer e)
        -- Since 0<g<d, g/d is already the fractional part.
        q: QQ := g^2/(2*d) - g/2 + d/12 --=d/2*((g/d)^2-g/d+1/6)
        new(e*q, l)

    etaQuotientInfinity(rspec: SPEC): % ==
        rspec := purify rspec
        -- see \eqref{eq:eta_delta-g^[R](tau)} and \eqref{eq:g_rbar(tau)}
        rpure: XHashTable(PP, ZZ) := empty()
        for l in pureParts rspec repeat rpure(specDelta l) := specExponent l
        -- We want to avoid multiple recip computations, so we compute
        -- numerator and denominator separately and invert at the end.
        -- While walking through, we collect the respective powers of
        -- eta-quotients that adjust the Jacobi triple product to
        -- become a generalized eta-quotient.
        num?: Boolean := den? := false
        num: L1 C := den := 1
        for l in properGeneralizedParts rspec repeat
            d: PP := specDelta l
            g: PP := asPP(specSubindex l) -- g is positive in purified rspec
            e: ZZ := specExponent l
            rpure.d := elt(rpure, d, 0) - e
            e > 0 =>
                z: L1 C := jacobiFunctionPow(d, g, e)
                if num? then num := num * z else (num := z; num? := true)
            e < 0 =>
                z: L1 C := jacobiFunctionPow(d, g, - e)
                if den? then den := den * z else (den := z; den? := true)

        -- Now we can compute the pure part.
        zpure: L1 C := 1
        nonTrivialPurePart? := false
        for d in keys rpure | not zero? rpure.d repeat
            zpure := zpure * eulerFunctionPower(d, rpure.d)
            nonTrivialPurePart? := true

        -- If the denominator is set, we must invert it.
        -- The following if-construction computes zpure*num/den but avoids
        -- multiplication with 1.
        if nonTrivialPurePart? then -- pure part is non-trivial
            z := zpure
            if den? then z := z * recip(den)::L1(C)
            if num? then z := z * num
          else
            if den? then
                z := recip(den)::L1(C)
                if num? then z := z * num
              else z := num
        return new(rhoInfinity rspec, z)


)if LiterateDoc

\begin{Hemmecke}
Since in general eta-functions can be expressed as Laurent series in
$q^{\frac1{24}}$, they also can be added.
However, for efficiency reasons (and since it is enough for our purpose),
we express an eta-quotient as a Laurent series in $q$ with a prefactor
that is a power of $q^{\frac1{24}}$, we only can add eta-quotient
that have the same prefactor. So, we implement only a partial addition.
This partial addition is completely sufficient in our context, since we
know in advance that summands have the same prefactor.
\end{Hemmecke}

)endif

-------------------------------------------------------------------
    -- The following functions are convenience functions and not really used.
    --:TODO: Move the functions below into a separate package.
    -- These functions should not be used otherwise. In fact,
    -- toEta: Polynomial(C) -> % should not be exported, but rather live
    -- in a separate package.

    -- Given a symbol of the form Ei, delete the letter E and parse i
    -- as a positive integer.
    idx(x: Symbol): PP ==
        s: String := delete(string x, 1)
        asPP(integer(parse(s)@InputForm)$InputForm)

    -- toEtaMonomial. polynomialToEta amd addition are only service
    -- functions and should actually live somewhere else, because they
    -- break the assumption that the series part is a Taylor series
    -- with constant coefficient 1.
    toEtaMonomial(m: Polynomial C): % ==
        --assert(not zero? m)
        --assert(zero? reductum m)
        syms: List Symbol := variables m
        l: List NN := degree(m, syms)
        e: % := 1
        for s in syms for x in l repeat e := e*etaPower(idx s, x)
        new(eulerExponent e, leadingCoefficient(m) * eulerExpansion(e))
    ((x: %) + (y: %)): % == -- This is a partial function!!!
        prefactor x ~= prefactor y => error "Cannot add. Unequal prefactor."
        new(prefactor x, seriesPart x + seriesPart y)
    polynomialToEta(p: Polynomial C): % ==
        --assert(all variables are of the form En where n is some integer)
        zero? p => new(0, 0$L1(C))
        -- To get the correct prefactor we cannot start with r:=0.
        r: % := toEtaMonomial leadingMonomial p
        while not zero?(p := reductum p) repeat
            r := r + toEtaMonomial leadingMonomial p
        return r

















)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{P QEtaModularInfinityExpansion}
\label{sec:QEtaModularInfinityExpansion}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif

)abbrev package QMODINFX QEtaModularInfinityExpansion
QEtaModularInfinityExpansion(C, QMOD): Exports == Implementation where
  C: Ring
  QMOD: QEtaModularCategory
  T1 C ==> QEtaTaylorSeries C
  L1 C ==> QEtaLaurentSeries C
  A1 C ==> Finite0Series C
  EQI C  ==> EtaQuotientInfinity C
  Exports ==> with
    laurentExpansionInfinity: SPEC -> L1 C
    laurentExpansionInfinity: (SPEC, SPEC, PP, NN) -> L1 C

    if C has CommutativeRing then
        modularEtaQuotientInfinity: SPEC -> A1 C
          ++ modularEtaQuotientInfinity(rspec) checks whether rspec
          ++ specifices modular eta-quotient wrt. QMOD and returns
          ++ (expansion(etaQuotient(rspec)$EQI(C))$EQI(C))::A1(C).
        modularEtaQuotientInfinity: (SPEC, SPEC, PP, NN) -> A1 C
          ++ modularEtaQuotientInfinity(sspec, rspec, m, t) returns
          ++ the series expansion of
          ++ etaQuotient(sspec,rspec,m,t)$SymbolicModularEtaQuotientGamma(QMOD)
          ++ at the cusp infinity.

  Implementation ==> add

    laurentExpansionInfinity(rspec: SPEC): L1 C ==
        eqi: EQI C := etaQuotientInfinity rspec
        expansion eqi

    -- generating series for a(m*n+t) with cofactor eta-quotient and
    -- the fractional q power where \sum_{k=0}^\infty a(k)q^k is
    -- defined by an eta-quotient with exponent vector r.

    laurentExpansionInfinity(sspec:SPEC, rspec:SPEC, m:PP, t:NN): L1 C ==
        -- We only consider the Taylor part and take care of the
        -- correct q-order through alphaInfinity.
        import from EQI C
        specT1 x ==> qetaTaylorRep eulerExpansion etaQuotientInfinity x
        eulerquo: T1 C := specT1 rspec
        cofact:   T1 C := specT1 sspec

        -- We must take care of the m-dissection and take a possible
        -- orbit on the shift t into account.
        orb: List NN := modularOrbit(rspec, m, t)$QMOD
        tt := first orb
        p: T1 C := multisect(m-tt, tt, eulerquo)
        -- Now multiply the series selecting sum_{n=0}^\infty a(m*n+k)q^n.
        for k in rest orb repeat p := p * multisect(m-k, k, eulerquo)

        -- We multiply both things together to get (nearly) a modular
        -- function.
        tf: T1 C := cofact * p

        -- We have to multiply by some q-power to get the expansion of
        -- a modular function f.
        alpha: ZZ := alphaInfinity(sspec, rspec, m, orb)
        laurent(alpha, tf)$L1(C)

    if C has CommutativeRing then
        modularEtaQuotientInfinity(rspec: SPEC): A1 C ==
            laurentExpansionInfinity(rspec) :: A1(C)

        modularEtaQuotientInfinity(sspec:SPEC, rspec:SPEC, m:PP, t:NN): A1 C ==
            laurentExpansionInfinity(sspec, rspec, m, t) :: A1(C)




)if LiterateDoc
\end{document}
)endif
