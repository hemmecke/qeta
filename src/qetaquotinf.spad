-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2021  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Computing with (generalized) Dedekind Eta Functions as $q$-series}
\author{Ralf Hemmecke}
\date{10-Dec-2015}
\maketitle
\begin{abstract}
  We implement functionality to compute with Dedekind
  eta-functions and generalized Dedekind eta-functions.

  The code below deals with a expansions of eta-quotients at
  infinity in terms of $q$-series. These (generalized)
  eta-quotients generate an algebra over some ring $C$
  (\code{QEtaGradedAlgebra(C)}).

\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This code was initially based on the article
\cite{Radu:RamanujanKolberg:2015} by Silviu Radu, but was extended in
2020 to the generalization from
\cite{Chen+Du+Zhao:FindingModularFunctionsRamanujan:2019}.

It implements prerequisite domains for the computation of relations
among eta-functions.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
OF ==> OutputForm

asN x ==> x pretend N
asP x ==> x pretend P
asZ x ==> x pretend Z

)if LiterateDoc
%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Domain EtaQuotientInfinity: Eta quotient expansions at infity}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The domain \texttt{EtaQuotientInfinity} implements a representation for
(generalized) eta-functions (in terms of $q$) and products and
quotients of eta-functions.

)endif


)abbrev domain EQI EtaQuotientInfinity
++ EtaQuotientInfinity implements the (multiplicative) group of
++ (generalized) eta-functions in their expansion at infinity.
++ Elements can be represented as Laurent series in q with a prefactor
++ of q^r where r is a rational number (and in case of eta-quotient
++ (non-generalized) r has a denominator that is a divisor of 24).
++ Note that this domain keeps the "fractional part" always separate
++ from the "series part" even when the fractional part is an integer.
EtaQuotientInfinity(C): Exports == Implementation where
  C: IntegralDomain
  T ==> QEtaTaylorSeries C
  L ==> QEtaLaurentSeries C
  Exports ==> Join(Group, CoercibleTo OutputForm) with
    -- Note that e = \prod_{k=1}^\infty (1-q^{kn}) has integer coefficients
    -- and that the inverse of this series has integer coefficients, as well.
    -- Therefore, it is not a lie that we assert "Group".
    prefactor: % -> Q
      ++ prefactor(x) returns the fractional part of the fractional of
      ++ the fractional q-power prefactor of x where q is the variable
      ++ of L. The returned value is in the range 0<=prefactor(x)<1,
      ++ because integer powers of q are moved to the series part.
    seriesPart: % -> L
      ++ seriesPart(x) returns the Laurent series part of x.
      ++ x = q^r*seriesPart(x) where r=prefactor(x).
    eulerExponent: % -> Q
      ++ If x is a (generalized) eta-quotient, then eulerExponent(x)
      ++ is the fractional exponent e of q such that
      ++ q^e*eulerExpansion(x) is equal to the Puiseux series
      ++ expansion of x.
    eulerExpansion: % -> L
      ++ eulerExpansion(x) returns the power series (with constant
      ++ coefficient 1) that results from just considering the product
      ++ of Euler function powers (q-Pochhammer symbols) connected to
      ++ the creation the (generalized) eta-quotient.
    eulerExpansion: (List Z, List Z) -> L
      ++ eulerExpansion(divs, r) returns the product over all elements
      ++ d of divs of eulerFunction(d)^{rd} where rd is the respective
      ++ entry of r corresponding to d and eulerFunction is defined in
      ++ QFunctions in the file qfunct.spad. See also
      ++ https://en.wikipedia.org/wiki/Euler_function .
      ++ eulerExpansion(divs, r) == eulerExpansion etaQuotient(divs, r).
    eulerExpansion: (P, List Z) -> L
      ++ eulerExpansion(mm, r) returns eulerExpansion(divisors mm, r)
      ++ which is also the same as eulerExpansion(etaQuotient(mm, r)).
    expansion: % -> L
      ++ expansion(x) aborts with error if eulerExponent(x) is not am
      ++ integer. Otherwise it returns q^r*seriesPart(x) where
      ++ r=prefactor(x) and q is the variable of L. It is the same
      ++ as q^e*eulerExpansion(x) where e=eulerExponent(x).
    eta: P -> %
      ++ eta(n) returns q^(n/24)*\prod_{k=1}^\infty (1-q^{kn}).
    eulerFunctionPower: (P, Z) -> L
      ++ eulerFunctionPower(n, e) computes
      ++ (\prod_{k=1}^\infty(1-q^{kn}))^e.
    etaPower: (P, Z) -> %
      ++ etaPower(d, e) returns eta(d)^e.
    etaQuotient: (List Z, List Z) -> %
      ++ etaQuotient(divs, r) returns the eta-quotient
      ++ product(eta(divs.i)^(r.i),i=1..#divs).
      ++ It is assumed that the lengths of the input lists are equal.
    etaQuotient: (P, List Z) -> %
      ++ etaQuotient(mm, r) returns the eta-quotient
      ++ product(eta(divs.i)^(r.i),i=1..#divs) where divs=divisors(mm).
      ++ It returns etaQuotient(divisors mm, r).
      ++ It is assumed that #r = #divisors(mm).
    generalizedEtaPower: (P, P, Q) -> %
      ++ generalizedEtaPower(d,g,e) returns the generalized
      ++ eta-quotient given by \eqref{eq:generalized-eta-quotient} and
      ++ formula (1.11) in
      ++ \cite{Chen+Du+Zhao:FindingModularFunctionsRamanujan:2019}
      ++ raised to the power e.
      ++ generalizedEtaPower(d,g,e) returns
      ++ etaPower(d, numer(2*e)), if g=0;
      ++ etaQuotient([g, d],[numer(2*e),-numer(2*e)]), if g=d/2; and
      ++ returns $\eta_{d,g}(\tau)^e$ if e is an integer.
      ++ Note that only for g=0 and g=d/2 the exponent e can be a
      ++ half-integer. Otherwise, it must come with denominator =1.
--      ++ Since $\eta_{\delta,0}(\tau)=\eta(\delta\tau)^2$ and
--      ++ $\eta_{\delta,\delta/2}(\tau) =
--      ++ \frac{\eta(\frac{\delta}{2}\tau)^2}{\eta(\delta\tau)^2}$ are
--      ++ squares, we define
--      ++ generalizedEtaQuotient(delta,0,e):=$\eta(\delta\tau)^e$ and
--      ++ generalizedEtaQuotient(delta,g,e):=
--      ++ $\frac{\eta(g\tau)^e}{\eta(2g\tau)^e}}$ if $g=\delta/2$.
    generalizedEtaQuotient: (P, List P, List Q) -> %
      ++ generalizedEtaQuotient(d, gs, es) returns the product of
      ++ generalized eta-quotients for each g in gs and e in es.
      ++ Half-integer values are allowed for g=0 and g=d/2.
    generalizedEtaPower: List Z -> %
      ++ generalizedEtaPower(l) returns a (generalized) eta-power.
      ++ If l is either a list [d,e] then it returns etaPower(d, e),
      ++ if l=[d,g,e], then it returns generalizedEtaPower(d,g,e/1).
      ++ A one-element list l=[d] is equivalent to [d,1]. The empty
      ++ list returns 1. All other cases are errors. It is also an
      ++ error if the conditions 0<d and 0<g<d/2 do not hold.
    generalizedEtaQuotient: List List Z -> %
      ++ generalizedEtaQuotient(rr) returns the product (generalized)
      ++ eta-powers for each list l in rr.
      ++ See generalizedEtaPower for the format of the parameter l.

--    new: (Q, L) -> %
      ++ Only for internal use.

    -- This function (toEta) is for checking and actually does not
    -- necessarily yield an element of %.
    -- For example, E2 + E3 would mean to add Laurent series with different
    -- prefactors which is not supported by our "+" function and also not
    -- by the chosen representation of the domain. We expect the polynomial
    -- p to have the property that each monomial leads to Laurent series with
    -- the same prefactor.
    -- In this sense the function is only partial.
    -- However, we intend only to use it to check whether
    -- zero?(seriesPart toEta p).
    -- Furthermore, toEta(p) aborts with error if Laurent series with
    -- different prefactor are about to be added, since that cannot be
    -- represented in %.
    polynomialToEta: Polynomial C -> %
      ++ polynomialToEta(p) assumes that all variables are of the form
      ++ Ei with the letter E and a positive number i. In the
      ++ polynomial p the powers Ei^ni will be replaced by eta(i)^ni.
      ++ If l is the leading monomial p, then it is assumed that
      ++ prefactor(toEta(l))=prefactor(polynomialToEta(m)) for every
      ++ monomial m of p.
  Implementation ==> add
    -- The series part is always a power series with constant 1, in
    -- fact, it is a product/quotient of Euler functions. The
    -- eulerexpo must be divided by 24 to get the correct fractional
    -- exponent of q.
    Rep ==> Record(eulerexpo: Q, eulerquot: L)

    new(e: Q, s: L): % == per [e, s]
    eulerExponent(x: %): Q == rep(x).eulerexpo
    eulerExpansion(x: %): L == rep(x).eulerquot

    1: % == new(0, 1$L)
    ((x: %) * (y: %)): % == new(eulerExponent x + eulerExponent y,
                                eulerExpansion x * eulerExpansion y)
    inv(x: %): % == new(- eulerExponent x, recip(eulerExpansion x)::L)
    hashUpdate!(h: HashState, x: %): HashState ==
        hashUpdate!(hashUpdate!(h, eulerExponent x), eulerExpansion x)
    coerce(x: %): OutputForm ==
        q: OutputForm := (variable(0$L)$L)::OutputForm
        r: Q := eulerExponent x
        zero? r => (eulerExpansion x)::OutputForm
        e: OutputForm := r::OutputForm
        q^e * (eulerExpansion x)::OutputForm

-------------------------------------------------------------------
    -- We maintain a cache of expansions of powers of the Euler function.
    ef: L := eulerFunction(1)$QFunctions(C, L)
    ef1: C := coefficient(ef, 1) -- avoid null pointer by expansion
    efc: CachedPower L := ef :: CachedPower(L)
    ps: L := partitionSeries(1)$QFunctions(C, L)
    ps1: C := coefficient(ps, 1) -- avoid null pointer by expansion
    psc: CachedPower L := ps :: CachedPower(L)
-------------------------------------------------------------------
    -- We maintain a cache of expansions of powers of the generalized
    -- Euler functions. One cache for each delta and each 0<g<delta/2.
    gef: XHashTable(P, XHashTable(P, CachedPower T)) := empty()
-------------------------------------------------------------------

    prefactor(x: %): Q ==
        e: Q := eulerExponent x
        e - floor(e)::Q
    seriesPart(x: %): L ==
        laurent(floor eulerExponent x, qetaTaylorRep eulerExpansion x)

    -- eulerFunctionPower(u, rd) returns eulerFunction(u)^rd. Internally,
    -- it is, however implemented via CachedPower(L) using only
    -- expansions of eulerFunction(1) and partitionSeries(1).
    eulerFunctionPower(d: P, rd: Z): L ==
        zero? rd => 1$L
        rd < 0 => multiplyExponents(power!(psc, -rd)$CachedPower(L), d)
        multiplyExponents(power!(efc, rd)$CachedPower(L), d)

    expansion(x: %): L ==
        e: Q := eulerExponent x
        not one? denom e =>  error "eta-quotient has fractional expansion"
        laurent(numer eulerExponent x, qetaTaylorRep eulerExpansion x)

    eta(n: P): % == new(n/24, eulerFunctionPower(n, 1))
    etaPower(n: P, e: Z): % == new(n*e/24, eulerFunctionPower(n, e))

    etaQuotient(divs: List Z, r: List Z): % ==
        import from List %
        reduce(_*, [etaPower(d::P, e) for d in divs for e in r], 1)
    etaQuotient(level: P, r: List Z): % ==
        divs: List Z := divisors(level)$IntegerNumberTheoryFunctions
        etaQuotient(divs, r)
    eulerExpansion(divs: List Z, r: List Z): L ==
        eulerExpansion etaQuotient(divs, r)
    eulerExpansion(level: P, r: List Z): L ==
        eulerExpansion etaQuotient(level, r)

-------------------------------------------------------------------
    -- local function
    generalizedEulerFunctionPower(d: P, g: P, e: Z): T ==
        --assert(not zero? e)
        --assert(not zero? g)
        -- => qetaTaylorRep eulerFunctionPower(d, 2*e)
        --assert(2*g ~= d)
        -- => qetaTaylorRep eulerExpansion etaQuotient([g, d], [2*e, 2*e])
        if 2*g > d then g := asP(d-g)
        -- First make sure that the initial entry gef.d.g exists.
        gefd := elt(gef, d, empty()$XHashTable(P, CachedPower T))
        if not key?(g, gefd) then
            import from QFunctions(C, L)
            l: L := qPochhammer(1, g, d) * qPochhammer(1, d-g, d)
            --      (q^g, q^d)_\infty    * (q^{(d-g)}, q^d)_\infty
            t: T := qetaTaylorRep l
            gefd.g := t::CachedPower(T)
        cachedPower := gefd.g
        t: T := power!(cachedPower, abs e)$CachedPower(T)
        if e > 0 then t else recip(t)::T

    generalizedEtaPower(d: P, g: P, e: Q): % ==
        zero? e => 1
        zero? g =>
            e := 2*e
            one? denom e => etaPower(d, numer e)
            error "generalizedEtaQuotient: only accepting half-integer powers"

        2*g = d =>
            e := 2*e
            one? denom e => etaQuotient([g, d], [numer e, - numer e])
            error "generalizedEtaQuotient: only accepting half-integer powers"

        not one? denom e =>
            error "generalizedEtaQuotient: only accepting integer powers"

        t: T := generalizedEulerFunctionPower(d, g, numer e)
        -- Since 0<g<d, g/d is already the fractional part.
        q: Q := g^2/(2*d) - g/2 + d/12 --=d/2*((g/d)^2-g/d+1/6)
        new(e*q, laurent(0, t)$L)

    generalizedEtaQuotient(d: P, gs: List P, r: List Q): % ==
        --assert(#gs=#r)
        empty? gs => 1
        -- We want to avoid multiple recip computations, so we compute
        -- numerator and denominator separately and invert at the end.
        -- Exceptions are if g=0 or g=d/2.
        num?: Boolean := den? := false
        num: % := den := 1
        for g in gs for rd in r repeat
            zero? g or 2*g = d =>
                z: % := generalizedEtaPower(d, g, rd)
                if num? then num := num * z else (num := z; num? := true)
            rd > 0 =>
                z: % := generalizedEtaPower(d, g, rd)
                if num? then num := num * z else (num := z; num? := true)
            rd < 0 =>
                z: % := generalizedEtaPower(d, g, - rd)
                if den? then den := den * z else (den := z; den? := true)
        -- If the denominator is set, we must invert it.
        den? =>
            num? => num * inv den
            inv den
        num -- There is no denominator and if not num? then num=1 anyway.

    generalizedEtaPower(l: List Z): % ==
        empty? l => 1
        d: Z := first l; l := rest l
        d <= 0 => error "generalizedEtaPower: only positive divisors allowed"
        empty? l => eta asP d
        e: Z := first l; l := rest l
        empty? l => etaPower(asP d, e)
        g: Z := e
        g <= 0 or 2*g > d =>
            error "generalizedEtaPower: condition on offset violated"
        e := first l
        not empty? rest l =>
            error "generalizedEtaPower: only lists of lenght <= 3 allowed"
        generalizedEtaPower(asP d, asP g, e::Q)

    generalizedEtaQuotient(rr: List List Z): % ==
        empty? rr => 1
        -- We want to avoid multiple recip computations, so we compute
        -- numerator and denominator separately and invert at the end.
        -- Exceptions are if an list element describes an etaPower,
        -- because then no inversion is needed.
        num?: Boolean := den? := false
        num: % := den := 1
        for l in rr repeat
            #l < 3 or l.3 > 0 =>
                z: % := generalizedEtaPower l
                if num? then num := num * z else (num := z; num? := true)
            l.3 < 0 =>
                z: % := generalizedEtaPower([l.1, l.2, - l.3])
                if den? then den := den * z else (den := z; den? := true)
        -- If the denominator is set, we must invert it.
        den? =>
            num? => num * inv den
            inv den
        num -- There is no denominator and if not num? then num=1 anyway.

)if LiterateDoc

\begin{Hemmecke}
Since in general eta-functions can be expressed as Laurent series in
$q^{\frac1{24}}$, they also can be added.
However, for efficiency reasons (and since it is enough for our purpose),
we express an eta-quotient as a Laurent series in $q$ with a prefactor
that is a power of $q^{\frac1{24}}$, we only can add eta-quotient
that have the same prefactor. So, we implement only a partial addition.
This partial addition is completely sufficient in our context, since we
know in advance that summands have the same prefactor.
\end{Hemmecke}

)endif

-------------------------------------------------------------------
    -- The following functions are convenience functions and not really used.
    --:TODO: Move the functions below into a separate package.
    -- These functions should not be used otherwise. In fact,
    -- toEta: Polynomial(C) -> % should not be exported, but rather live
    -- in a separate package.

    -- Given a symbol of the form Ei, delete the letter E and parse i
    -- as a positive integer.
    idx(x: Symbol): P ==
        s: String := delete(string x, 1)
        asP(integer(parse(s)@InputForm)$InputForm)

    -- toEtaMonomial. polynomialToEta amd addition are only service
    -- functions and should actually live somewhere else, because they
    -- break the assumption that the series part is a Taylor series
    -- with constant coefficient 1.
    toEtaMonomial(m: Polynomial C): % ==
        --assert(not zero? m)
        --assert(zero? reductum m)
        syms: List Symbol := variables m
        l: List N := degree(m, syms)
        e: % := 1
        for s in syms for x in l repeat e := e*etaPower(idx s, x)
        new(eulerExponent e, leadingCoefficient(m) * eulerExpansion(e))
    ((x: %) + (y: %)): % == -- This is a partial function!!!
        prefactor x ~= prefactor y => error "Cannot add. Unequal prefactor."
        new(prefactor x, seriesPart x + seriesPart y)
    polynomialToEta(p: Polynomial C): % ==
        --assert(all variables are of the form En where n is some integer)
        zero? p => new(0, 0$L)
        -- To get the correct prefactor we cannot start with r:=0.
        r: % := toEtaMonomial leadingMonomial p
        while not zero?(p := reductum p) repeat
            r := r + toEtaMonomial leadingMonomial p
        return r






















)if LiterateDoc
\bibliography{qeta}
\end{document}
)endif
