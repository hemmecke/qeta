-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2022  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}
\externaldocument{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Congruence subgroups}
\author{Ralf Hemmecke}
\date{05-Dec-2020}
\maketitle
\begin{abstract}
  This file implements of functions connected to congruence subgroups.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Helper macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

First of all for debugging.
)endif

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))

)if LiterateDoc
%$
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
SL2Z ==> Matrix Z -- represents SL_2(Z), will be a 2x2 square matrix
EXGCD ==> Record(coef1: Z, coef2: Z, generator: Z)

INTF ==> IntegerNumberTheoryFunctions

asN x ==> x pretend N
asP x ==> x pretend P

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{C CongruenceSubgroup}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

)endif

)abbrev category CONGGRP CongruenceSubgroup
++ CongruenceSubgroup is the category congruence subgroup of $L2Z such
++ as $\Gamma_0(N) and $\Gamma_1(N)$.
CongruenceSubgroup: Category == with
    index: () -> P
      ++ If GAMMA denotes this domain, then index() computes the index
      ++ of GAMMA in SL2Z. index().
    cusps: () -> List Cusp
      ++ If GAMMA denotes this domain, then cusps() returns
      ++ representatives for all the (inequivalent) cusps for GAMMA
      ++ sorted by their size as rational numbers with infinity being
      ++ the biggest cusp. Note that cusps()=[cusp(x(1,1),x(2,1)) for
      ++ x in doubleCosetRepresentatives()].
    cuspOf: SL2Z -> Cusp
      ++ cuspOf(mat) returns the cusp represented by the
      ++ transformation matrix mat. It returns
      ++ cusp(mat(1,1),mat(2,1)). cuspOf is a left-inverse of
      ++ cuspToMatrix, i.e., cuspOf(cuspToMatrix(c))=c.
    cuspToMatrix: Cusp -> SL2Z
      ++ For cusp=(a:c), cuspToMatrix(cusp) returns a matrix
      ++ gamma=[[a,b],[c,d]] corresponding to the cusp (a:c) of this
      ++ domain. We assume that a/c is a normalized cusp, i.e.
      ++ cusp=normalizeCusp(cusp).
    dimensionOfCuspForms: Z -> N
      ++ dimensionOfCuspForms(w) computes the dimension of
      ++ S_w(\Gamma). See
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
    dimensionOfEisensteinSubspace: Z -> N
      ++ dimensionOfEisensteinSubspace(w) computes the dimension of
      ++ E_w(\Gamma), the Eisenstein subspace of modular forms. See
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
    dimensionOfModularForms: Z -> N
      ++ dimensionOfModularForms(w) computes the dimension of
      ++ M_w(\Gamma). See
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
    doubleCosetRepresentatives: () -> List SL2Z
      ++ doubleCosetRepresentatives() returns a list of double coset
      ++ representatives of $\Gamma \backslash SL_2(Z) /
      ++ SL_2(Z)_\infty$ where $SL_2(Z)_\infty$ are matrices of the
      ++ form [[1,h],[0,1]] with h being an integer. Note that
      ++ cusps()=[cusp(x(1,1),x(2,1)) for x in
      ++ doubleCosetRepresentatives()].
    equivalentCusps?: (Cusp, Cusp) -> Boolean
      ++ equivalentCusps?(cusp1, cusp2) returns true iff the cusp
      ++ cusp1=(a:c) is equivalent to cusp2=(u:w) modulo the action of
      ++ this domain.
    genus: () -> N
      ++ genus() returns the genus of the congruence subgroup
      ++ Gamma_0(nn). It corresponds to the series
      ++ https://oeis.org/A001617 .
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40.
    level: () -> P
      ++ level() returns the level of the congruence subgroup.
    member?: SL2Z -> Boolean
      ++ member?(mat) returns true if mat is an element of GAMMA.
      ++ It is assumed that determinant(mat)=1.
    normalizeCusp: Cusp -> Cusp
      ++ normalizeCusp(cusp) normalizes the cusp to another
      ++ (equivalent modulo GAMMA cusp (u:w) such that if
      ++ cusp is equivalent to infinity, then infinity() is returned;
      ++ if cusp is equivalent to (0:1), (0:1) is returned.
      ++ Otherwise the numerator and denominator are positive
      ++ and small amd coprime.
    nu2: () -> Z
      ++ nu2() returns the number of GAMMA inequivalent elliptic
      ++ points of order 2. See
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40 and \mu_{1,3}(n) of
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html.
    nu3: () -> Z
      ++ nu3() returns the number of GAMMA inequivalent elliptic
      ++ points of order 3. See See
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40 and \mu_{1,3}(n) of
      ++ https://www.wstein.org/books/modform/modform/dimension_formulas.html.
    numberOfCusps: () -> P
      ++ numberOfCusps() returns the number of cusps of $\Gamma_0(nn)$.
      ++ \cite[p.~25]{Shimura_ArithmeticTheory_1994} and Proposition
      ++ 1.40.
    projectiveIndex: () -> P
      ++ projectivIndex() computes the index of the image of GAMMA in
      ++ PSL2Z.
    rightCosetRepresentatives: () -> List SL2Z
      ++ rightCosetRepresentatives() returns a list of right coset
      ++ representatives of $\Gamma_0(nn) \backslash SL_2(Z)$.
    width: Cusp -> P
      ++ If GAMMA denotes this domain, then width(cusp) returns the
      ++ width of the cusp=(a:c) of GAMMA.
    width: SL2Z -> P
      ++ width(gamma)=width(cuspOf(gamma)).
  add
    cuspOf(mat: SL2Z): Cusp == cusp(mat(1,1),mat(2,1))
    width(gamma: SL2Z): P == width cuspOf gamma





)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{D CongruenceSubgroupGamma0: Congruence subgroup
$\Gamma_0(N)$}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let $N$ be a positive natural number and $\Gamma_0(N)$ be as defined
in \eqref{eq:Gamma0}.

The width of a cusp is implemented according to
\cite[Lemma~2.37]{Radu_PhD_2010} and
\cite[Definition~2.9]{Radu_PhD_2010}.

For the computation of the genus of $X_0(N)$ we use
\cite[p.~25]{Shimura_ArithmeticTheory_1994}.

)endif

)abbrev domain GAMMA0 CongruenceSubgroupGamma0
++ CongruenceSubgroupGamma0(nn) implements functions connected to the
++ congruence subgroup $\Gamma_0(N)$.
++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
CongruenceSubgroupGamma0(nn: P): CongruenceSubgroup == add

    -- dedekindPsi: P -> P
    --   ++ dedekindPsi(n) computes the value of the Dedekind psi function.
    --   ++ https://en.wikipedia.org/wiki/Dedekind_psi_function
    -- local
    dedekindPsi(m: P): P ==
        r: Q := 1
        for f in factorList factor m repeat
            r := r * (1 + 1/(f.factor))
        asP numer(m*r)

    index(): P == dedekindPsi nn

    width(cusp: Cusp): P == asP((nn exquo gcd(denom(cusp)^2, nn)) :: Z)

)if LiterateDoc

We use \cite[Lemma~2.45]{Radu_PhD_2010} to compute the cusps of
$\Gamma_0(N)$ as the set of all $\frac{a}{c}$ such that $c|N$ and
$a\in X_c$.

)endif

    cusps(): List Cusp ==
        -- We use \cite[Lemma~2.45]{Radu_PhD_2010} with \delta replaced by
        -- c and N replaced by level.
        divs: List Z := divisors(nn)$INTF
        result: List Cusp := empty()
        for c in divs repeat
            -- Let's compute the list corresponding to $X_c$.
            g: Z := gcd(c, (nn exquo c)::Z)
            for x in 1..g | one? gcd(x, g) repeat
                a: Z := x
                while not one? gcd(a, c) repeat a := a + g;
                -- The variable a corresponds to an element of X_\delta
                -- from \cite[Lemma~2.45]{Radu_PhD_2010}.
--                exgcd: EXGCD := extendedEuclidean(a, c)
--                d: Z := exgcd.coef1
--                b: Z := -exgcd.coef2
                result := cons(normalizeCusp(cusp(a, c)), result)
        sort! result

    nu2(): Z ==
        s: Z := 1
        for f in factorList factor nn repeat
            p := f.factor
            even? p =>
                f.exponent >= 2 => return 0 -- 4|m
            r := positiveRemainder(p, 4)
            r = 3 => return 0
            if one? r then s := 2*s
        return s

    nu3(): Z ==
        s: Z := 1
        for f in factorList factor nn repeat
            p := f.factor
            p = 3 =>
                f.exponent >= 2 => return 0 -- 9|m
            r := positiveRemainder(p, 3)
            r = 2 => return 0
            if r=1 then s := 2*s
        return s

    numberOfCusps(): P ==
        --assert(one? first divisors level)
        n: Z := 1  -- eulerPhi(gcd(1, nn))
        for c in rest divisors(nn)$INTF repeat
            n := n + eulerPhi(gcd(c, (nn exquo c)::Z))
        asP n

    genus(): N ==
        -- general formula is
        -- g = 1 + mu/12 - nu2/4 - nu3/3 - nuinfinity/2
        -- where mu is the index of Gamma0(nn) in SL2Z
        -- nu2 and nu3 are the number of solutions in Z/mZ of
        -- x^2+1=0 and x^2+x+1=0 and nuinfinity is the number of cusps
        -- of Gamma0(m).
        q: Q := index()/12 - nu2()/4 - nu3()/3 - numberOfCusps()/2
        not one? denom q => error "genus(Gamma0): non-vanishing denominator"
        asN(1 + numer(q))

--    coprimePart: (Z, Z) -> Z
--       ++ coPrimePart(n, c) splits n into u*v such that gcd(u,c)=1
--       ++ and returns u.
--       ++ We assume that all input numbers are positive.
    -- local
    coprimePart(n: Z, c: Z): Z ==
       u := n
       while (g := gcd(u, c)) > 1 repeat u := (u exquo g)::Z
       u

    cuspToMatrix(cusp: Cusp): SL2Z ==
        gamma: SL2Z := cuspToMatrix(cusp)$Cusp
        infinity? cusp => gamma -- identity matrix
        a: Z := gamma(1,1)
        c: Z := gamma(2,1)
        -- assert(not zero? c)
        dprime: Z := gamma(2,2)
        -- The extended Euclidean algorithm leave some freedom in the choice
        -- of cofactors. We improve in the following in such a way to make
        -- d as small as possible, since that corresponds to a d-th root
        -- of unity in the coefficients of the transformed series.
        -- An important property here is that for any cusp a/c of Gamma0(nn)
        -- c is a divisor of nn.
        nnc: Z := (nn exquo c) :: Z
        u: Z := coprimePart(nnc, c)
        -- v: Z := (nnc exquo u) :: Z -- ((not meeded here))
        t: Z := mulmod(dprime, invmod(u, c), c)
        d: Z := t*u
        -- s: Z := ((t*u - dprime) exquo c) :: Z
        b := ((a*d -1) exquo c) :: Z -- instead of s we use that det=1
        -- update destructively
        gamma(1,2) := b
        gamma(2,2) := d
        return gamma

    member?(mat: SL2Z): Boolean == zero?(mat(2,1) rem nn)

    equivalentCusps?(c1: Cusp, c2: Cusp): Boolean ==
        -- implementation according to Proposition 8.13 of
        -- \cite{Stein_ModularFormas_2007}.
        pr ==> positiveRemainder
        u1: Z := numer c1; v1: Z := denom c1;
        u2: Z := numer c2; v2: Z := denom c2;
        g: Z := gcd(v1*v2, nn)
        exgcd: EXGCD := extendedEuclidean(u1, v1)
        s1 := exgcd.coef1
        exgcd := extendedEuclidean(u2, v2)
        s2 := exgcd.coef1
        zero? positiveRemainder(s1*v2 - s2*v1, g)

    -- local
    coprimeRemainder(a: Z, c: Z, d: Z): Z ==
        a := positiveRemainder(a, d)
        while not one? gcd(a, c) and a < c repeat a := a + d
        a

    normalizeCusp(cusp: Cusp): Cusp ==
        -- Algorithm according to PhD Thesis of Silviu Radu.
        -- Lemma 2.45 of \cite{Radu_PhD_2010}
        -- First compute the corresponding b and d for the matrix.
        a: Z := numer cusp
        c: Z := denom cusp
        zero? positiveRemainder(c, nn) => infinity()
        exgcd: EXGCD := extendedEuclidean(a, c)
        not one? exgcd.generator =>
            error "normalizeCusp: cusp not in lowest terms"
        b: Z := -exgcd.coef2
        d: Z := exgcd.coef1
        zero? d => cusp(0, 1) -- Then c=1 (mod level). So this is the cusp 0=1.
        delta: Z := gcd(c, nn)
        cdelta := (c exquo delta)::Z
        ndelta := (nn exquo delta)::Z
        g: Z := gcd(delta, ndelta)
        -- compute the inverse of d mod g
        -- Note that
        -- gcd(d,g)=gcd(d,delta,N/delta)=gcd(d,c,N,N/delta)=gcd(c,d)=1.
        exgcd := extendedEuclidean(d, g)
        alambda := coprimeRemainder(cdelta * exgcd.coef1, delta, g)
        cusp(alambda, delta)

    doubleCosetRepresentatives(): List SL2Z ==
        [cuspToMatrix cusp for cusp in cusps()]

    dimensionOfCuspForms(w: Z): N ==
        -- https://www.wstein.org/books/modform/modform/dimension_formulas.html
        w < 0 or odd? 2 => 0
        w = 2 => genus()
        wz: Z := w::Z
        w2: Z := shift(wz, -1) -- division by 2
        d: Z :=   (wz-1) * (genus()-1)_
                + (w2-1) * numberOfCusps()_
                + nu2() * floor(wz/4)$Q_
                + nu3() * floor(wz/3)$Q
        return d::N

    dimensionOfEisensteinSubspace(w: Z): N ==
        -- https://www.wstein.org/books/modform/modform/dimension_formulas.html
        w < 0 or odd? w => 0
        zero? w => 1
        c: N := numberOfCusps()
        if w = 2 then asN(c - 1) else c

    dimensionOfModularForms(w: Z): N ==
        dimensionOfCuspForms w +  dimensionOfEisensteinSubspace w

-------------------------------------------------------------------
-- auxiliary function
-------------------------------------------------------------------

    -- This function corresponds to $\rho_{m,n}(\lambda)$ in
    -- \cite[Definition~2.42]{Radu_PhD_2010}.
    -- The loop terminates because of \cite[Lemma~2.41]{Radu_PhD_2010}.
    rho(lambda: Z, m: Z, n: Z): Z ==
        --assert(lambda>=0)
        --assert(m*n>0)
        --assert(one? gcd [lambda, m, n])
        r := lambda
        while not one? gcd(r, n) repeat r := r + m
        return r

    -- This function corresponds to S_{N,\delta} in
    -- \cite[Definition~2.44]{Radu_PhD_2010}.
    lambdas(delta: Z): List Z ==
        --assert(delta*nn>0)
        --assert((nn exquo delta) case Z)
        m: Z := (nn exquo delta)::Z
        g: Z := gcd(m, delta)
        [rho(lambda, m, delta) for lambda in 0..m-1 | one? gcd(g, lambda)]

    -- This function corresponds to just one matrix from R_{N,\delta}
    -- for a concrete \lambda.
    cosetRep(lambda: Z, delta: Z, qm: Z): SL2Z ==
        --assert(lambda>=0)
        --assert(delta*qm>0)
        --assert(one? gcd(delta, qm))
        c := lambda * qm
        REC ==> Record(coef1: Z, coef2: Z, generator: Z)
        rec: REC := extendedEuclidean(delta, lambda*qm)
        return matrix [[rec.coef1, -rec.coef2], [c, delta]]

    -- This function corresponds to R_{N,\delta} in
    -- \cite[Lemma~2.44]{Radu_PhD_2010}.
    rightCosetRepsDelta(delta: Z, mm: Z): List SL2Z ==
        --assert(delta * mm * nn > 0)
        [cosetRep(lambda, delta, mm) for lambda in lambdas delta]

    rightCosetReps(mm: P): List SL2Z ==
        concat [rightCosetRepsDelta(delta, mm) for delta in divisors(nn)$INTF]

-------------------------------------------------------------------
-- exported function
-------------------------------------------------------------------

    rightCosetRepresentatives(): List SL2Z == rightCosetReps(1)






)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Package CongruenceSubgroupGamma1: Congruence subgroup
$\Gamma_1(N)$}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Let $N$ be a positive natural number and $\Gamma_1(N)$ be as defined
in \eqref{eq:Gamma1}.

For some formulas see
\url{https://www.wstein.org/books/modform/modform/dimension_formulas.html}.
for the computation of the genus of $X_1(N)$.

)endif

)abbrev domain GAMMA1 CongruenceSubgroupGamma1
++ CongruenceSubgroupGamma1(nn) implements functions connected to the
++ congruence subgroup $\Gamma_1(N)$.
++ https://www.wstein.org/books/modform/modform/dimension_formulas.html
CongruenceSubgroupGamma1(nn: P): CongruenceSubgroup == add
    index(): P ==
        nn = 1 => 1
        nn = 2 => 3
        r: Q := 1
        for f in factorList factor nn repeat
            r := r * (1 - 1/(f.factor)^2)
        asP numer(nn^2*r)

    projectiveIndex(): P ==
        nn < 3 => index()
        asP shift(index(), -1)

    width(cusp: Cusp): P ==
        c := denom cusp
        nn=4 and gcd(c,nn)=2 => 1
        asP((nn exquo gcd(c, nn)) :: Z)

    cusps(): List Cusp ==
        nn = 1 => [infinity()]
        nn = 2 => [cusp(0, 1), infinity()]
        nn = 3 => [cusp(0,1), infinity()]
        nn = 4 => [cusp(0,1), cusp(1,2), infinity()]
        h: XHashTable(Cusp, Cusp) := table()
        for c in 1..nn repeat
            g: Z := gcd(c, nn)
            if one? g then g := 2
            for x in 1..g-1 | one? gcd(x, g) repeat
                a: Z := x
                while not one? gcd(a, c) repeat a := a + g
                cusp := normalizeCusp(cusp(a, c))
                h.cusp := cusp -- might override existing cusp
        sort!(keys h)

    nu2(): Z == -- number of elliptic points of order 2
        nn > 2 => 0
        1

    nu3(): Z == -- number of elliptic points of order 3
        nn >= 4 or nn = 2 => 0
        1

    numberOfCusps(): P ==
        --assert(one? first divisors level)
        nn < 3 => nn
        nn < 5 => asP(nn - 1)
        n: Z := 0
        phidivs := [eulerPhi d for d in divisors(nn)$INTF]
        for c in phidivs for d in reverse phidivs repeat n := n + c*d
        odd? n => error "something is rotten"
        asP(shift(n, -1)) -- divide by 2

    genus(): N ==
        -- general formula is
        -- g = 1 + mu/12 - nu2/4 - nu3/3 - nuinfinity/2
        -- where mu is the index of Gamma1(m) in PSL2Z,
        q: Q := projectiveIndex()/12 - nu2()/4 - nu3()/3 - numberOfCusps()/2
        not one? denom q =>
            tracePrint("[nn,index,nu2,nu3,cusps]",[nn,index(),nu2(),nu3(),numberOfCusps()]$List(Z))
            tracePrint("q,",q)
            error "genus(Gamma1): non-vanishing denominator"
        asN(1 + numer(q))

    cuspToMatrix(cusp: Cusp): SL2Z == cuspToMatrix(cusp)$Cusp

    member?(mat: SL2Z): Boolean ==
        zero?(mat(2,1) rem nn) _
           and zero?((mat(1,1)-1) rem nn) _
           and zero?((mat(2,2)-1) rem nn)

    equivalentCusps?(c1: Cusp, c2: Cusp): Boolean ==
        pr ==> positiveRemainder
        c := pr(denom c1, nn)
        g := gcd(c, nn)
        c = pr(  denom c2, nn) and zero? pr(numer c1 - numer c2, g) => true
        c = pr(- denom c2, nn) and zero? pr(numer c1 + numer c2, g) => true
        false

    -- local
    coprimeRemainder(a: Z, c: Z, d: Z): Z ==
        a := positiveRemainder(a, d)
        while not one? gcd(a, c) and a < c repeat a := a + d
        a

    -- local
    normCusp(a: Z, c: Z): Cusp ==
        one? c => cusp(0, 1)
        cusp(a, c)

    normalizeCusp(cusp: Cusp): Cusp ==
        a: Z := numer cusp
        c: Z := denom cusp
--        not one? gcd(a, c) => error "normalizeCusp: cusp not in lowest terms"
        one? nn => infinity() -- = cusp infinity
        c: Z := positiveRemainder(c, nn)
        zero? c =>
            a := positiveRemainder(a, nn)
            a := min(a, nn - a) -- cannot be zero
            one? a =>  infinity()
            cusp(a, nn)

        a: Z := positiveRemainder(a, c)
        zero? a => cusp(0, 1)

        d: Z := gcd(c, nn)
        c2: Z := nn - c
        one? d => normCusp(1, min(c, c2))

        c < c2 => normCusp(coprimeRemainder( a, c , d), c)
        c > c2 => normCusp(coprimeRemainder(-a, c2, d), c2)
        -- c=c2
        a := min(coprimeRemainder(a, c, d), coprimeRemainder(-a, c, d))
        normCusp(a, c)

    doubleCosetRepresentatives(): List SL2Z ==
        [cuspToMatrix cusp for cusp in cusps()]

    dimensionOfCuspForms(w: Z): N ==
        error "dimensionOfCuspForms: not implemented"

    dimensionOfEisensteinSubspace(w: Z): N ==
        error "dimensionOfEisensteinSubspace: not implemented"

    dimensionOfModularForms(w: Z): N ==
        dimensionOfCuspForms w +  dimensionOfEisensteinSubspace w

    rightCosetRepresentatives(): List SL2Z ==
        error "rightCosetRepresentatives: not implemented"



)if LiterateDoc
%$
\bibliography{qeta}
\end{document}
)endif
