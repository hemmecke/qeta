-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2017  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Computation of polynomial relations among Dedekind Eta
Functions---Variant Samba}
\author{Ralf Hemmecke}
\date{03-Aug-2017}
\maketitle
\begin{abstract}
  The package \code{QEtaIdealSamba} implements a variant of the
  computation of $\eta$-relations. This variant is somewhat in the
  middle between the implementations \PathName{qetaih.spad} and
  \PathName{qetair.spad} in the sense that the algorithm \algoSamba{}
  from \cite{Hemmecke:DancingSambaRamanujan:2018} is used instead of
  the algorithm \algo{AB} from \cite{Radu:RamanujanKolberg:2015}, but
  then it follows the computation as in \PathName{qetair.spad}.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This code is based on \cite{Radu:RamanujanKolberg:2015},
\cite{Hemmecke:DancingSambaRamanujan:2018}, and
\cite{Hemmecke+Radu:EtaRelations:2018}.

This implementation differs from that of \PathName{qetair.spad} only
by the computation of the algebra basis. Where in
\PathName{qetair.spad} the algorithm \algo{AB} from
\cite{Radu:RamanujanKolberg:2015}, we here use \algoSamba{} from
\cite{Hemmecke:DancingSambaRamanujan:2018} in order to compute a
module basis of the subalgebra.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

First of all for debugging.
)endif
OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
vPrint(x,y) ==> display77(hconcat(["-- "::Symbol::OF, x::Symbol::OF, _
                                   ":="::Symbol::OF, y::OF]$List(OF)))

)if LiterateDoc
%$
These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
LSym ==> List Symbol

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Variant Samba}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)endif

)abbrev package QETAIS QEtaIdealSamba
QEtaIdealSamba(C, L): Exports == Implementation where
  C: EuclideanDomain
  L: Join(QEtaLaurentSeriesCategory C, QEtaGradedAlgebra C)
  Pol ==> Polynomial C
  LPol ==> List Pol
  Exports ==> QEtaIdealCategory(C, L)
  Implementation ==> add
    eliminate(dim: P, dim1: P, syms: LSym, mpgens: LPol): LPol ==
        --assert(#syms = dim)
        --assert(dim>dim1+1) -- dim1+1 variables are to eliminate
        E ==> Split3HomogeneousDirectProduct(dim, dim1, 1, N)
        groebner(mpgens, syms)$QEtaGroebner(C, E)

    --polynomialRelationsGenerators: List L -> Record(gens: LPol, zlen: N)
    --    ++ polynomialRelationsGenerators(m) returns a list of polynomials
    --    ++ in the indeterminates Z1,...,Zs, T, M1, M2, ..., Mk where
    --    ++ t=first(m), k=#m and s is the number of elements in
    --    ++ algebraBasis(t, rest m).
    --    ++ The value s is returned as the second element in the resulting
    --    ++ record.
    --    ++ The polynomials represent all relations between the original
    --    ++ input (expressed in terms of Mi indeterminates) and its
    --    ++ algebra basis expressed in terms of the indeterminates T and
    --    ++ Zj.
    polynomialRelationsGenerators(mgens: List L): Record(gens: LPol, zlen: N) ==
        -- Express the generators of $E^\infty(m)$ in the module
        -- $\langle 1, zgens \rangle_{Q[t]}$.
        -- This correspond to formula (62) in
        -- \cite{Radu:RamanujanKolberg:2015}.
        X ==> QEtaExtendedAlgebra(C, L, Pol);
        AB ==> QEtaAlgebraBasis(C, X)
        RED ==> QEtaTopReduction(C, X, AB)
        Y ==> QEtaComputation(C, X, AB, RED)
        QSAMBA ==> QEtaSambaPackage(C, X, AB, Y)
        xreduce(x, ab) ==> reduce(x, ab)$RED
        xembed(a, b) ==> embed(first a, b::Pol)

        import from QAuxiliaryTools
        import from Pol
        msyms: LSym := indexedSymbols("M", #mgens)
        xmgens: List X := [embed(x, m::Pol) for x in mgens for m in msyms]
        xt: X := first xmgens
        ab: AB := samba(xt, rest xmgens)$QSAMBA
        xmzgens: List X := concat entries basisElements ab
        zsyms: LSym := indexedSymbols("Z", #xmzgens)
        syms: LSym := concat(zsyms, msyms)
        dim: P := qcoerce(#syms)@P -- for later: number of variables
        vPrint("xmgens", xmgens)
        xzgens: List X := [xembed(x, m) for x in xmzgens for m in zsyms]
        vPrint("xzgens", xzgens)
        -- Safety check
        for x in xmgens | not zero? reduce(x, ab)$RED repeat
            error "polynomialRelations: non-zero-reduction"

        xmpols: List X := [xreduce(xx, ab) for xx in xmgens]
        vPrint("xmpols", xmpols)

        xpgens: List X := empty() -- generators of the product relations
        l: List X := xzgens -- don't modify xzgens
        while not empty? l repeat
            zi: X := first l
            for zj in l repeat
                p: X := xreduce(zi*zj, ab)
                vPrint("product", p)
                xpgens := cons(p, xpgens)
            l := rest l

        vPrint("xpgens", xpgens)

        mpols: LPol := [second xx for xx in xmpols]
        pgens: LPol := [second xx for xx in xpgens]

        mpgens: LPol := concat(mpols, pgens)

        -- Try to compute relations of the original generators.
        -- Set up a Groebner basis context where we can eliminate the
        -- variables $Z_i$ and $T$

        vPrint("mpgens", mpgens)

        -- We build in a safety check, ie., plug in the respective series
        -- and check whether the result is zero.
        fc(c: C): L == c::L
        PE ==> PolynomialEvaluation(C, L)
        vPrint("mysyms", msyms)
        vPrint("zysyms", zsyms)
        vars: LSym := concat(msyms, zsyms)
        vPrint("vars", vars)
        vals: List L := [first x for x in concat(xmgens, xzgens)$List(X)]
        vPrint("vals", vals)
        evalmpgens: List L := [eval(x, fc, vars, vals)$PE for x in mpgens]
        vPrint("evalmpgens", evalmpgens)
        vPrint("zerompgens", [zero? x for x in evalmpgens])
        vPrint("#xzgens", #xzgens)
        [mpgens, #xzgens]

    -- First we compute the relations generators. This gives a set of
    -- polynomials that have the following structure.
    -- 1) Mi - (fi1(T)*Z1 + ... + fis(T)*Zs)
    --    with 1<=i<=k=#mgens and s+1=#algebraBasis(mgens).
    -- 2) Zi*Zj - (gij1(T)*Z1 + ... + gijs(T)*Zs)
    --    with 1<=i<=j<=s.
    -- All fij and gijl are univariate polynomials in C[T].
    -- We want to eliminate all Zi and T from the system.
    -- Since T plays a special role and is sometimes equal to one of
    -- the Mi's, we use a block elimination ordering with 3 blocks.
    -- ((Z1,...,Z2), (T), (M1, ..., Mk)) where in each block the
    -- variables are ordered by a degrevlex order.
    -- relationsIdealGenerators: List L -> LPol
    --    ++ polynomialRelations(m) returns a degrevlex (wrt the
    --    ++ indeterminates M1, M2, ..., Mk where k=#m)
    --    ++ Groebner basis of the relations among the elements of m.
    --    ++ In other words, if p(M1,...,Mk) is in the result list, then
    --    ++ p(m.1, m.2, ..., m.k)=0.
    relationsIdealGenerators(mgens: List L): LPol ==
        import from QAuxiliaryTools
        r := polynomialRelationsGenerators mgens
        relgens: LPol := r.gens
        dim1: P := qcoerce(r.zlen)@P
        msyms: LSym := indexedSymbols("M", #mgens)
        zsyms: LSym := indexedSymbols("Z", qcoerce(dim1)@N)
        tsym: Symbol := "T"::Symbol
        syms: LSym := concat(zsyms, cons(tsym, msyms))
        dim: P := qcoerce(#syms)@P -- for later: number of variables
        ztmrels: LPol := eliminate(dim, dim1, syms, relgens)
        vPrint("ztmrels", ztmrels)
        mrels: LPol := xPolynomials(ztmrels, char "M")$PolynomialTool(C)
        vPrint("mrels", mrels)
        vPrint("lenmrels", #mrels)
        vPrint("totaldegmrels", [totalDegree x for x in mrels])
        return mrels

)if LiterateDoc
%$
\bibliography{qeta}
\end{document}
)endif
