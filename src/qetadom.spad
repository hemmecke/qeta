-------------------------------------------------------------------
---
--- FriCAS QEta
--- Copyright (C) 2015-2019  Ralf Hemmecke <ralf@hemmecke.org>
---
-------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------

)if LiterateDoc
\documentclass{article}
\usepackage{qeta}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\title{Computing with Dedekind Eta Functions as $q$-series}
\author{Ralf Hemmecke}
\date{10-Dec-2015}
\maketitle
\begin{abstract}
  We implement functionality to compute with Dedekind
  $\eta$-functions.

  The code below deals with a expansions of $\eta$-quotients at
  infinity in terms of $q$-series. These $\eta$-quotients generate an
  algebra over some ring $C$ (\code{QEtaGradedAlgebra(C)}).

  Modular function that are $\eta$-quotients and have a pole (if any)
  only at infinity, can be represented by univariate Laurent series
  that have the property that they are zero if their order is
  positive. This domain is implemented via \code{Finite0Series}. In
  other words, in contrast to \spadtype{UnivariateLaurentSeries}, it
  can be checked in finite time whether an element of
  \code{Finite0Series} is zero or not. \code{Finite0Series(C, q, 0)}
  form a \code{QEtaGradedAlgebra(C)}.

  An auxiliary domain \code{Monomials} is introduced that adds
  variable names so that an element of a \code{DirectProduct} can be
  shown as a product of variables raised to some power.
\end{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This code is based on the article \cite{Radu:RamanujanKolberg:2015} by
Silviu Radu.

It implements prerequisite domains for the computation of relations
among $\eta$-functions.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implementation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let us start with a few common macros.

These two technical macros are necessary to distinguish between Rep
and \%.
)endif

rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %

)if LiterateDoc
Now some abbreviations for common domains.
)endif

P ==> PositiveInteger
N ==> NonNegativeInteger
Z ==> Integer
Q ==> Fraction Z
LSym ==> List Symbol
OF ==> OutputForm

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Eta quotient expansions at infity}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The domain \texttt{EtaQuotient} implements a representation for $\eta$
functions (in terms of $q$) and products and quotients of $\eta$
functions.

\begin{Hemmecke}
Since in general $\eta$ functions can be expressed as Laurent series in
$q^{\frac1{24}}$, they also can be added.
However, for efficiency reasons (and since it is enough for our purpose),
we express an $\eta$-quotient as a Laurent series in $q$ with a prefactor
that is a power of $q^{\frac1{24}}$, we only can add $\eta$-quotient
that have the same prefactor. So, we implement only a partial addition.
This partial addition is completely sufficient in our context, since we
know in advance that summands have the same prefactor.
\end{Hemmecke}
)endif

)abbrev domain ETAQUOT EtaQuotient
++ EtaQuotient implements the (multiplicative) group of eta-functions
++ in their expansion at infinity.
++ Elements can be represented as Laurent series in q with a prefactor
++ of q^(n/24), (n=0,...,23).
++ Note that this domain keeps the "fractional part" always separate from
++ the "series part" even when the fractional part is an integer.
EtaQuotient(C: IntegralDomain, L: UnivariateLaurentSeriesCategory C): _
  Join(Group, CoercibleTo OutputForm) with
    -- Note that e = \prod_{k=1}^\infty (1-q^{kn}) has integer coefficients
    -- and that the inverse of this series has integer coefficients, as well.
    -- Therefore, it is not a lie that we assert "Group".
    eta: P -> %
      ++ eta(n) returns q^(n/24)*\prod_{k=1}^\infty (1-q^{kn}).
    q24: Z -> %
      ++ q24(n) returns q^(n/24).
    prefactor: % -> N
      ++ prefactor(x) returns the exponent times 24 of the fractional q
      ++ power of x where q is the variable of L. The returned value is
      ++ in the range 0..23, because integer powers of q are moved to the
      ++ series part.
    etaQuotient: (List Z, List Z) -> %
      ++ etaQuotient(divs, r) returns the $\eta$-quotient
      ++ product(eta(divs.i)^(r.i),i=1..#divs).
      ++ It is assumed that the lengths of the input lists are equal.
    etaQuotient: (P, List Z) -> %
      ++ etaQuotient(m, r) returns the $\eta$-quotient
      ++ product(eta(divs.i)^(r.i),i=1..#divs) where divs=divisors(m).
      ++ It returns etaQuotient(divisors m, r).
      ++ It is assumed that #r = #divisors(m).
    seriesPart: % -> L
      ++ seriesPart(x) returns the Laurent series part of x.
      ++ x = q24(prefactor x)*seriesPart(x)
    eulerQuotient: % -> L
      ++ eulerQuotient(x) returns the power series (with constant
      ++ coefficient 1 that results from just considering the product of
      ++ Euler function powers (q-Pochhammer symbols) connected to the
      ++ creation via etaQuotient(divs, r).
    eulerQuotient: (List Z, List Z) -> L
      ++ eulerQuotient(divs, r) returns the product over all elements
      ++ d of divs of eulerFunction(d)^{rd} where rd is the respective
      ++ entry of r corresponding to d and eulerFunction is defined in
      ++ QFunctions in the file qfunct.spad. See also
      ++ https://en.wikipedia.org/wiki/Euler_function .
      ++ eulerQuotient(divs, r) == eulerQuotient etaQuotient(divs, r).
    eulerQuotient: (P, List Z) -> L
      ++ eulerQuotient(m, r) returns eulerQuotient(divisors m, r)
      ++ which is also the same as eulerQuotient(etaQuotient(m, r)).
    eulerExponent: % -> Z
      ++ If x = etaQuotient(divs, r) then eulerExponent(x) is equal to
      ++ reduce(_+, [d*rd for d in divs for rd in r], 0). Dividing
      ++ eulerExponent(x) by 24 gives the q-exponent that must be
      ++ multiplied to the eulerQuotient, to turn the whole object
      ++ into an eta-quotient.
    expansion: % -> L
      ++ expansion(x) aborts with error if prefactor is not divisible
      ++ by 24. Otherwise it returns q^r*seriesPart(x) where
      ++ r=prefactor(x)/24 and q is the variable of L.
      ++ It is the same as q^e*eulerExponent(x) where e=eulerExponent(x)/24.
    etaPower: (P, Z) -> %
      ++ etaPower(d, e) returns eta(d)^e.

    -- This function (toEta) is for checking and actually does not
    -- necessarily yield an element of %.
    -- For example, E2 + E3 would mean to add Laurent series with different
    -- prefactors which is not supported by our "+" function and also not
    -- by the chosen representation of the domain. We expect the polynomial
    -- p to have the property that each monomial leads to Laurent series with
    -- the same prefactor.
    -- In this sense the function is only partial.
    -- However, we intend only to use it to check whether
    -- zero?(seriesPart toEta p).
    -- Furthermore, toEta(p) aborts with error if Laurent series with
    -- different prefactor are about to be added, since that cannot be
    -- represented in %.
    polynomialToEta: Polynomial C -> %
      ++ polynomialToEta(p) assumes that all variables are of the form
      ++ Ei with the letter E and a positive number i. In the
      ++ polynomial p the powers Ei^ni will be replaced by eta(i)^ni.
      ++ If l is the leading monomial p, then it is assumed that
      ++ prefactor(toEta(l))=prefactor(polynomialToEta(m)) for every
      ++ monomial m of p.
  == add
    -- The series part is always a power series with constant 1, in
    -- fact, it is a product/quotient of Euler functions. The
    -- eulerexpo must be divided by 24 to get the correct fractional
    -- exponent of q.
    Rep ==> Record(eulerexpo: Z, eulerquot: L)

    -- We maintain a cache of expansions of powers of the Euler function.
    ef: L := eulerFunction(1)$QFunctions(C, L)
    ef1: C := coefficient(ef, 1) -- avoid null pointer by expansion
    efc: CachedPower L := ef :: CachedPower(L)
    ps: L := partitionSeries(1)$QFunctions(C, L)
    ps1: C := coefficient(ps, 1) -- avoid null pointer by expansion
    psc: CachedPower L := ps :: CachedPower(L)

    -- eulerFunctionPower(u, rd) returns eulerFunction(u)^rd. Internally,
    -- it is, however implemented via CachedPower(L) using only
    -- expansions of eulerFunction(1) and partitionSeries(1).
    eulerFunctionPower(d: P, rd: Z): L ==
        zero? rd => 1$L
        rd < 0 => multiplyExponents(power!(psc, -rd)$CachedPower(L), d)
        multiplyExponents(power!(efc, rd)$CachedPower(L), d)

    new(n: Z, s: L): % == per [n, s]
    eulerExponent(x: %): Z == rep(x).eulerexpo
    eulerQuotient(x: %): L == rep(x).eulerquot

    prefactor(x: %): N == qcoerce(positiveRemainder(eulerExponent x, 24))@N
    seriesPart(x: %): L ==
        n: Z := eulerExponent x
        r: Z := positiveRemainder(n, 24)
        q: Z := ((n-r) exquo 24)::Z
        return monomial(1, q) * eulerQuotient(x)

    1: % == new(0, 1$L)
    expansion(x: %): L ==
        e: Z := prefactor x
        not zero? e => error "eta-quotient has fractional expansion"
        return seriesPart x
    eta(n: P): % == new(n, eulerFunctionPower(n, 1))
    etaPower(n: P, e: Z): % == new(n*e, eulerFunctionPower(n, e))
    q24(n: Z): % == new(n, 1$L)

    ((x: %) * (y: %)): % == new(eulerExponent x + eulerExponent y,
                                eulerQuotient x * eulerQuotient y)

    inv(x: %): % == new(- eulerExponent x, recip(eulerQuotient x)::L)
    etaQuotient(divs: List Z, r: List Z): % ==
        import from List %
        reduce(_*, [etaPower(d::P, e) for d in divs for e in r], 1)
    etaQuotient(level: P, r: List Z): % ==
        divs: List Z := divisors(level)$IntegerNumberTheoryFunctions
        etaQuotient(divs, r)

    eulerQuotient(divs: List Z, r: List Z): L ==
        eulerQuotient etaQuotient(divs, r)

    eulerQuotient(level: P, r: List Z): L ==
        eulerQuotient etaQuotient(level, r)

    hashUpdate!(h: HashState, x: %): HashState ==
        hashUpdate!(hashUpdate!(h, prefactor x), seriesPart x)
    coerce(x: %): OutputForm ==
        q: OutputForm := (variable(0$L)$L)::OutputForm
        r: Q := eulerExponent(x)/24
        zero? r => (eulerQuotient x)::OutputForm
        e: OutputForm := r::OutputForm
        q^e * (eulerQuotient x)::OutputForm

    -- The following functions are convenience functions and not really used.
    --:TODO: Move the functions below into a separate package.
    -- These functions should not be used otherwise. In fact,
    -- toEta: Polynomial(C) -> % should not be exported, but rather live
    -- in a separate package.

    -- Given a symbol of the form Ei, delete the letter E and parse i
    -- as a positive integer.
    idx(x: Symbol): P ==
        s: String := delete(string x, 1)
        qcoerce(integer(parse(s)@InputForm)$InputForm)@P

    -- toEtaMonomial. polynomialToEta amd addition are only service
    -- functions and should actually live somewhere else, because they
    -- break the assumption that the series part is a Taylor series
    -- with constant coefficient 1.
    toEtaMonomial(m: Polynomial C): % ==
        --assert(not zero? m)
        --assert(zero? reductum m)
        syms: LSym := variables m
        l: List N := degree(m, syms)
        e: % := 1
        for s in syms for x in l repeat e := e*etaPower(idx s, x)
        new(prefactor e, leadingCoefficient(m) * seriesPart(e))
    ((x: %) + (y: %)): % == -- This is a partial function!!!
        prefactor x ~= prefactor y => error "Cannot add. Unequal prefactor."
        new(prefactor x, seriesPart x + seriesPart y)
    polynomialToEta(p: Polynomial C): % ==
        --assert(all variables are of the form En where n is some integer)
        zero? p => new(0, 0$L)
        -- To get the correct prefactor we cannot start with r:=0.
        r: % := toEtaMonomial leadingMonomial p
        while not zero?(p := reductum p) repeat
            r := r + toEtaMonomial leadingMonomial p
        return r

)if LiterateDoc
In \cite{Radu:RamanujanKolberg:2015}, the computations are done in
a subclass of Laurent series, namely those that are identically zero
if their order is greater than zero.

)endif

)abbrev domain FIN0SER Finite0Series
++ Finite0Series represents Laurent series such that if
++ x is such a series and order(x)>0 then x=0.
++ Quotients of Dedekind eta functions that are modular functions
++ that only have a pole (if any) at infinity,
++ can be represented as such series.
-- We need the center parameter, because SPAD cannot yet pass
-- non-integer constants to constructors.
-- https://www.mail-archive.com/fricas-devel@googlegroups.com/msg08670.html
Finite0Series(C: CommutativeRing, var: Symbol, cen: C): Exports == Impl where
  UTS ==> UnivariateTaylorSeries(C, var, cen)
  ULS ==> UnivariateLaurentSeries(C, var, cen)
  Exports ==> Join(UnivariateLaurentSeriesConstructorCategory(C, UTS),
                   QEtaGradedAlgebra C) with
    coerce: Variable(var) -> %
      ++ \spad{coerce(var)} converts the series variable \spad{var} into a
      ++ Laurent series.
    coerce: ULS -> %
      ++ coerce(x) assumes that the Laurent series x belongs to the
      ++ subalgebra of series with the properties of this damain.
      ++ No check is made.
    coerce: % -> ULS
      ++ coerce(x) returns the element x as a Laurent series.
    choose: (P, N, %, Z) -> %
      ++ choose(m, t, x, ord) returns the Laurent series z whose n-th
      ++ coefficient of the underlying Taylor series is the (m*n+t)-th
      ++ coefficient of the underlying Taylor series of x, 0<=t<m. The
      ++ function assumes that x has at least one non-zero
      ++ coefficient.
  Impl ==> ULS add
    Rep ==> ULS
    Rec ==> Record(expon: Z, ps: UTS) -- hack!!!
    uts x ==> (x pretend Rec).ps
    coerce(v : Variable(var)): % == monomial(1, 1)
    coerce(s: ULS): % == per s
    coerce(x: %): ULS == rep x
    zero?(x: %): Boolean ==
        d: Z := degree x -- (x pretend Rec).expon
        d > 0 => true
        not zero? coefficient(uts x, 0) => false -- get out early
        -- remove zeroes until order becomes positive
        rec: Rec := (removeZeroes(1-d, x)) pretend Rec
        xrec := x pretend Rec
        xrec.expon := rec.expon
        xrec.ps    := rec.ps
        xrec.expon > 0 or empty? coefficients(xrec.ps)
    qetaGrade(x: %): Z ==
        zero? x => -1 -- destructively set x
        -order(x, 0)
    qetaCoefficient(x: %, k: Z): C == coefficient(x, -k)
    qetaLeadingCoefficient(x: %): C ==
        zero? x => 0 -- destructively set x
        leadingCoefficient x
    choose(m: P, t: N, x: %, ord: Z): % ==
        zero? x => 0
        x := removeZeroes x
        laurent(ord, multisect(m-t, t, uts x))
    laurent(n: Z, s: Stream C): % == laurent(n, series(s)$UTS)

)if LiterateDoc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{An exponent domain that comes with variable names}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Turn various kinds of direct products into something that prints as
powerproducts with exponent vectors being the entries of the direct
product element.
)endif

)abbrev domain MONOMS Monomials
++ Monomials(dim, D, vl) behaves exactly like D, i.e. is an
++ AbelianMonoid, but prints its elements in a multiplicative form.
++ For example, if dim = 2, vl = [A,B] and x::Vector(NNI) = [2,3],
++ then the element x (coerced to OutputForm) looks like A^2*B^3.
Monomials(_
  dim: N,_
  R: OrderedAbelianMonoid,
  D: DirectProductCategory(dim, R),_
  vl: LSym_
 ): DirectProductCategory(dim, R) == D add
    --assert(dim = # vl)
    noOneTest? := not (R has one?: R -> Boolean)
    notOne? x ==> noOneTest? or not one? x
    coerce(x: %): OutputForm ==
        vs: LSym := vl
        zero? x => (1$Integer)::OutputForm
        fst: Boolean := true
        k: N := 1
        while zero?(x.k) repeat
            vs := rest vs
            k := k + 1
        --assert(k<=dim)
        o: OutputForm := (first vs)::OutputForm
        if notOne? x.k then o := o ^ ((x.k)::OutputForm)
        for i in k+1..dim for v in rest vs | not zero?(x.i) repeat
            oo: OutputForm := v::OutputForm
            if notOne? x.i then oo := oo ^ ((x.i)::OutputForm)
            o := o * oo
        return o

)if LiterateDoc
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Unused domains}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The following domains seem unused.

\begin{verbcode}
)abbrev domain QETAUPOL QEtaUnivariatePolynomial
++ Like Finite0Series, but as univariate polynomial.
QEtaUnivariatePolynomial(C: CommutativeRing, var: Symbol): Join(_
  UnivariatePolynomialCategory(C) with (_
    coerce : Variable(var) -> %;_
    fmecg : (%, NonNegativeInteger, C, %) -> %),_
  QEtaGradedAlgebra C)
 == UnivariatePolynomial(var, C) add
    qetaGrade(x: %): Z == degree(rep x)::Z
    qetaCoefficient(x: %, n: Z): C ==
        n < 0 => 0
        coefficient(rep x, qcoerce(n)@N)
    qetaLeadingCoefficient(x: %): C == leadingCoefficient rep x
\end{verbcode}

\begin{verbcode}
)abbrev domain QETAPOLY QEtaPolynomial
++ That is a cheating domain, because we never ever call qetaGrade,
++ qetaCoefficient, or qetaLeadingCoefficient from this domain.
QEtaPolynomial(C: CommutativeRing): Join(_
  PolynomialCategory(C, IndexedExponents Symbol, Symbol), QEtaAlgebra C)
 == Polynomial C
\end{verbcode}

\bibliography{qeta}
\end{document}
)endif
