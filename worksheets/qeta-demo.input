-- Many thing are already in
-- test/Hemmecke_DancingSambaRamanujan_2019.input-test
-- and other test files.

-- # Demo for the what qetaquot.spad provides

-- ## Init

)clear completely

)cd
)cd g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
)set output algebra off
setFormat!(FormatMathJax)$JFriCASSupport
)set stream calculate 20
)set mess time off
C ==> Q
--C ==> Z;
--C ==> IntegerLocalizedAtPrime 11
CA ==> CA1 C
X ==> X1 C
xiord := 2;
xi := -1;
CX := Q;
nn: P := 2;
)r convenience.input )quiet

SIGMAINFINITY ==> sigmaInfinity $ QETAAUX
SIGMA0 ==> sigma0 $ QETAAUX

)set mess type on

-- ## Dedekind Eta Function $\eta(\tau)$

e := eta(1)$EQI(Q)

polynomialToEta(E1)$EQI(Q)

-- Express in terms of $x=q^{1/24}$ but written with $q$ instead of $x$

prefactor e

q := monomial(1,1)$L1(Q)
monomial(1,prefactor(e))$L1(Q) * (seriesPart(e)::L1(Q))(q^24)

-- Modular discriminant $\Delta(\tau)=\eta(\tau)^{24}$

expansion(eta(24)$EQI(Z))

-- ## $g_s(\tau) \in M(N)$ --- EtaQuotientInfinity

-- ### $g_s(\tau) \in M(N)$ non-modular

nn: P := 22; -- level N
r := [1,2,-1,-1]
e := etaQuotient(nn, r)$EQI(Z)

)set message type on


-- We can get the exponent of the prefactor $q^{1/24}$ and the actual
-- $q$-series. Note that for the prefactor exponent it always holds
-- $0\le f<1$.

f := prefactor(e)$EQI(Z)
seriesPart(e)$EQI(Z)

-- ### $g_s(\tau) \in M^\infty(N)$

-- In case that the vector $r$ lives in $R^*(N)$, the prefactor
-- exponent is an integer, and thus the series can be combined
-- with the prefactor to get a $q$-series.

r := [24,0,0,0]
e := etaQuotient(nn, r)$EQI(Z)
expansion e

-- ## Jacobi theta-functions
--
-- The Jacobi theta-functions (see
-- https://en.wikipedia.org/wiki/Theta_function#Relations_to_Dedekind_eta_function)
-- are given by
-- $$
-- \theta_2(\tau)=\frac{2 \eta(2\tau)^2}{\eta(\tau)},
-- \qquad
-- \theta_3(\tau)=\frac{\eta(\tau)^5}{\eta(\frac{\tau}{2}) \eta(2\tau)},
-- \qquad
-- \theta_4(\tau)=\frac{\eta(\frac{\tau}{2})^2}{\eta(\tau)}.
-- $$
-- in terms of $q=e^{\pi i \tau}$.
-- In the following we express the series with $q=e^{2\pi i \omega}$ where $\omega=\frac{\tau}{2}$.

theta2half := etaQuotient(4, [ 0,-1, 2])$EQI(C)
theta2     := 2*theta2half
theta3     := etaQuotient(4, [-2, 5,-2])$EQI(C)
theta4     := etaQuotient(4, [ 2,-1, 0])$EQI(C)

g := expansion(theta3^2) :: L1(C)
h := expansion((theta2half/theta3)^4) :: L1(C)

-- Express $g$ in terms of $h$, i.e. $f(h) = g$.

f := g(revert h) -- if order(h) is different from 1 then g(revert(nthRoot(h, order h))).

-- ### $g_s(\tau) \in M^\infty(N)$ --- the monoid generators

nn: P := 22; -- level N
rgens := etaQuotientMonoidExponentVectors(nn)$QEQEV
eqgens := [expansion(etaQuotient(nn, r)$EQI(Z)) for r in rgens]

-- ### Create $g_s(\tau)$ with attached part

msyms := indexedSymbols("M", #rgens)
mxgens := [toX1(C, x, sym) for x in eqgens for sym in msyms];
xgens := cons(toX1(C, eqgens.1, 'T), rest mxgens)

-- ## $g_{s,m}(\gamma\tau)\in M(N)$ --- SymbolicEtaQuotientGamma

-- ### $g_{s,m}(\gamma\tau)$ --- Expansion at cusp $\infty$

-- Importand, we simply set t=-1 and let the code handle the rest.

t := -1
C ==> Q
nn: P := 13;
rgens := etaQuotientMonoidExponentVectors(nn)$QEQEV
m: P := 13; mm: P := m; s: List Z := first rgens;
gamma: SL2Z := matrix [[1,0],[0,1]]
y: YEQG := etaQuotient(nn, mm, s, m, t, gamma);
xiord := minimalRootOfUnity y
CX := UnityRootExtension(C, xiord)
xi := generator()$CX
w := WIDTH0(nn, gamma(2,1))

)set stream calc 4
)set mess type on
p := puiseux(y, 13)$EQG(C,CX)

r := rationalPowerDenominator(p)
e := expansion p
order e

-- The above data structure actually represents the Puiseux series
-- where $q$ is replaced by $q^{1/\mathrm{den}}=q^{1/24}$.
--
-- We can also represent it as a product of $q^{1/24}$ and a Laurent
-- series (here even a Taylor series) in $q$.

s1 := choose(24, 0, e::A1(CX))

-- ### $g_{s,m}(\gamma\tau)$ --- Expansion at cusp $1$

gamma := cuspToMatrix(nn, 1)$GAMMA0

y: YEQG := etaQuotient(nn, mm, s, m, t, gamma);
xiord := minimalRootOfUnity y
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
w := WIDTH0(nn, gamma(2,1))

)set stream calc 4
)set mess type on
p := puiseux(y, w)$EQG(C, CX)
r := rationalPowerDenominator(p)
e := expansion p
order e

s1 := choose(24, 0, e::A1(CX))

-- ## $g_{s,m,t}(\gamma\tau)$ --- SymbolicEtaQuotientGamma

-- ### $g_{s,m,t}(\gamma\tau)$ --- Expansion at cusp $\infty$

C ==> Q
nn: P := 13;
m: P := 13; mm: P := m; s: List Z := [-1, 0];
shat: Z := SIGMAINFINITY(mm, s)
orbs := [orb for tt in 0..m-1 | (orb := orbit(shat,m,tt); one? # orb)]
t := first first orbs
gamma: SL2Z := matrix [[1,0],[0,1]]
y: YEQG := etaQuotient(nn, mm, s, m, t, gamma);
xiord := minimalRootOfUnity y
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
w := WIDTH0(nn, gamma(2,1))

)set stream calc 20
)set mess type on
p := puiseux(y, w)$EQG(C, CX)

-- The above data structure actually represents the Puiseux series
-- where $q$ is replaced by $q^{1/\mathrm{den}}=q^{1/24}$.
--
-- We can also represent it as a product of $q^{1/24}$ and a Laurent
-- series (here even a Taylor series) in $q$.

e := expansion p
s1 := choose(24, 11, e::A1(CX))

-- ### Change coefficient domain from $\mathbb{Q}[\xi]$ to $\mathbb{Z}$

-- We can simplify the coefficient domain to Integer by retracting
-- from $\mathbb{Q}[\xi]$ to $\mathbb{Z}$.

rx := abfmap(CX, C, retract, s1)

-- For our special choice of $s$, $m=13$, $t=6$, the above series is
-- the generating series for the partitions, i.e., $\sum_{n=0}^\infty
-- p(13n+6)q^n$.

--generatingSeries for p(13n+6)

s2 := choose(13, 6, partitionSeries(1)$QFunctions(C, A1 C))
rx-s2

-- ### $g_{s,m,t}(\gamma\tau)$ --- Expansion at cusp 1

gamma := cuspToMatrix(nn, 1)$GAMMA0

y := etaQuotient(nn, mm, s, m, t, gamma)$YEQG;
xiord := minimalRootOfUnity y
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
w := WIDTH0(nn, gamma(2,1))

)set mess type on
)set stream calc 10
p := puiseux(y, w)$EQG(C, CX)
e := expansion p;
order e

s1 := choose(24, 23, e::A1(CX));
qetaLeadingCoefficient s1, qetaGrade s1
s1

-- ## $F_{r,s,m,t}(\gamma\tau) \in M^\infty(N)$ --- SymbolicModularGamma0EtaQuotientGamma

nn: P := 26; -- level N
m: P := 13; mm: P := m; s: List Z := [-1, 0];
shat: Z := SIGMAINFINITY(mm, s)
orbs := [orb for tt in 0..m-1 | (orb := orbit(shat,m,tt); one? # orb)]
t := first first orbs

-- ### $F_{r,s,m,t}(\gamma\tau) \in M^\infty(N)$ --- Expansion at cusp $\infty$

cusp := 1/nn; gamma := cuspToMatrix(nn, cusp)$GAMA0; w := WIDTH0(nn, denom cusp)
r := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularGamma0
)clear prop y
y := etaQuotient(nn, r, mm, s, m, t, gamma)$YM0EQG;
xiord: P := minimalRootOfUnity y
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
puiseux(y, w)$EQG(C, CX)

-- ### $F_{r,s,m,t}(\gamma\tau) \in M^\infty(N)$ --- Expansion at cusp $1$

cusp := 1; gamma := cuspToMatrix(nn, cusp)$GAMMA0; w := WIDTH0(nn, denom cusp)
r: List Z := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularGamma0
y := etaQuotient(nn, r, mm, s, m, t, gamma)$YM0EQG;
xiord: P := minimalRootOfUnity y
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
puiseux(y, w)$EQG(C, CX)

-- ### $F_{r,s,m,t}(\gamma\tau) \in M^\infty(N)$ --- Expansion at all cusp

nn, r, mm, s, m, t, gamma

y := etaQuotient(nn, r, mm, s, m, t)$YM0EQ;

-- For each of the cusps we get one expansion in terms in the canonical
-- variable $q^{1/w}$ where $w$ is the width of the respective cusp.
-- As customary, we show $q$ instead of $q^{1/w}$.

spitzen := cusps(nn)$GAMMA0
)set stream calc 3
mf := EXPANDn y

-- Strangely, one has to reread `input/convenience.input`.
--
-- **TODO:** Create a `QEtaConvenienceTool` as a SPAD package.

)cd
)cd g/qeta/tmp
)r convenience.input )quiet
)r modfuns.input )quiet

-- +
--expansionModularGamma0SiftedEtaQuotientGamma(nn, r, mm, s, m, t, gamma)
-- -

-- ## $\sum_{n=0}^\infty p(m\,n+t)\,q^n$ "sifted" partition series

xiord := 2; xi := -1; CX := Q; nn: P := 22; -- just for convenience.input
)r convenience.input )quiet

--generatingSeries for p(13n+6)

choose(13, 5, partitionSeries(1)$QFunctions(C, A1 C))

-- # $\eta^r \cdot q^{k/24} \cdot \sum_{n=0}^\infty p(m\,n+t)\,q^n \in M^\infty(N)$

-- Unfortunately, the current jupyter-fricas connection does not
-- output the respective cofactor exponent $r$ and the exponent $k$.
-- One can see it if run in the commandline version of FriCAS.

--setFormat!(Format1D)$JFriCASSupport
m13 := modularSiftedPartitionSeries(13,13,6)
--setFormat!(FormatMathJax)$JFriCASSupport

m26 := modularSiftedPartitionSeries(26,13,6)







-- # Samba for level $N$

-- ## Init

-- ### Clear and set output format

)clear completely

-- ### Load macros and Choose coefficient domain

)cd /home/hemmecke/g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
)set output algebra off
)set stream calculate 20
)set mess time on
--C ==> Q
--C ==> Z;
C ==> IntegerLocalizedAtPrime 11
CA ==> CA1 C
X ==> X1 C
xiord := 2;
xi := -1;
CX := Q;
nn: P := 22;
)r convenience.input )quiet
)set mess type on
setFormat!(FormatMathJax)$JFriCASSupport

-- ### Samba: setting up the input

-- Here we use all the generators of the monoid of all eta-quotients.

nn: P := 22; -- level
etaQ(x) == expansion(etaQuotient(nn, x)$EQI(Z))
smallerR?(x: List Z, y: List Z): Boolean == smallerGrade?(etaQ x, etaQ y)@Boolean
rgens := sort(smallerR?,etaQuotientMonoidExponentVectors(nn)$QEQEV)$List(List Z)
eqgens := [etaQ r for r in rgens];


-- The generators get a variable attached so that in the end each element
-- contains its representation in terms of the input elements.

msyms := indexedSymbols("M", #rgens)
mxgens := [toX1(C, x, sym) for x in eqgens for sym in msyms];
xgens := cons(toX1(C, eqgens.1, 'T), rest mxgens);
xt := xgens.1

-- If the extended computation costs too much (too big
-- coefficients of the polynomials), then we can drop the
-- attached part, but still use cached powers of series.

cfgens := [first x for x in xgens];
cft := first xt;

-- ## Samba (nonextended, but still with cached powers)

-- ### Samba invocation

cfab := samba(cft, cfgens)$QTOPSAMBA1(C);

-- ### Samba with aborting when a certain number of gaps has been reached

cfab := samba(cft, cfgens, 31)$QTOPSAMBA1(C);

-- ### Samba with aborting when a certain number of gaps has been reached and with live tracing

cfab := samba(cft, cfgens, 31, caonet1Step!)$QTOPSAMBA1(C);

cfab

-- ## Extended Samba

-- ### Extended Samba invocation

xab := samba(xt, xgens)$QXTOPSAMBA1(C);

-- ### Extended Samba with genus abortion criterion

genus := genus(nn)$GAMMA0
xab := samba(xt, xgens, genus)$QXTOPSAMBA1(C);

-- ### Extended Samba with genus abortion criterion and trace

-- The output is currently not shown in the jupyter notebook. Use
-- Emacs or bash invocation to see the trace.
--
-- See `input/tracingmacros.input` for a definition of `onet1Step!`.

xab := samba(xt, xgens, genus, onet1Step!)$QXTOPSAMBA1(C)

-- ## Number of gaps of a algebra basis

spitzen := cusps(nn)$GAMMA0

)r convenience.input )quiet
)r modfuns.input )quiet

nog := numberOfGaps(xab)
nog - genus
numberOfGaps(cfab)

-- ## Extended reduction modulo an algebra basis

-- The input basis reduces to zero modulo the algebra basis.

rbas := [reduce(x, xab)$QXTOPRED1(C) for x in xgens]
removeDuplicates sort [zero? x for x in rbas]

-- # Series F: $p(13n+6)$ generating series


-- We do expansion at the cusp $i\infty$ which corresponds to $1/N$ or
-- to `1/nn` in terms of our session variables.

-- ## Init

-- ### Clear and set output format

)clear completely

-- ### Load macros and Choose coefficient domain

)cd
)cd g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
)set output algebra off
)set stream calculate 20
)set mess time on
--C ==> Q
--C ==> Z;
C ==> IntegerLocalizedAtPrime 13
xiord := 2;
xi := -1;
CX := Q
nn: P := 13
)r convenience.input )quiet
)r tracing.input )quiet
)set mess type on
setFormat!(FormatMathJax)$JFriCASSupport

-- ## p(m n + t)

-- We only need to specify the level $nn$, $m$ (and $mm$) and compute
-- the $t$ automatically.

nn: P := 13; -- level
m: P := 13; mm: P := m; s: List Z := [-1, 0];
shat: Z := SIGMAINFINITY(mm, s)
orbs := [orb for tt in 0..m-1 | (orb := orbit(shat,m,tt); one? # orb)]
t: N := first first orbs

-- Let's compute the expansion (at $\infty$) of
-- $$
-- F(\tau) = g_r(\tau)
--           q^{\frac{e}{24}}
--           \sum_{k=0}^{\infty}p(m k + t)q^k.
-- $$

spitzen := cusps(nn)$GAMMA0

)r modfuns.input )quiet

ff := modularSiftedPartitionSeries(nn, m, t);
xf := toX1(C, ff, F)

etaQ(x) == expansion(etaQuotient(nn, x)$EQI(Z))
smallerR?(x: List Z, y: List Z): Boolean == smallerGrade?(etaQ x, etaQ y)@Boolean
rgens := sort(smallerR?,etaQuotientMonoidExponentVectors(nn)$QEQEV)$List(List Z)
eqgens := [etaQ r for r in rgens];
msyms := indexedSymbols("M", #rgens)
mxgens := [toX1(C, x, sym) for x in eqgens for sym in msyms];
xgens := cons(toX1(C, eqgens.1, 'T), rest mxgens);
[qetaGrade x for x in xgens]
genus := genus(nn)$GAMMA0;
xt := xgens.1

xab := samba(xt, xgens, genus, onet1Step!)$QXTOPSAMBA1(C);

[qetaGrade x for x in basis xab]
numberOfGaps xab

cft := first xt
cfgens := [first x for x in xgens];
[qetaGrade x for x in cfgens]

xab

xr := reduce(xf, xab)$QXTOPRED1(C)

p := second(xr)::Pol(C);
[[e, x] for x in monomials p| zero?(e:=exponent leadingCoefficient x)]

xf - 11*(xgens.1)^6

[[exponent leadingCoefficient x] for x in monomials((11*T^6-F)+second(xr)::Pol(C))]

-- # Series U: N=242, r=[6, - 3, - 1, 1, 5, - 8]

)clear completely

)cd
)cd g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
)set output algebra off
)set stream calculate 20
)set mess time on
C ==> Q
xiord := 2;
xi := -1;
CX := Q
)r convenience.input )quiet
)r tracing.input
)set mess type on
setFormat!(FormatMathJax)$JFriCASSupport

-- We can generate a new modular function by applying the trace to
-- a modular function from $M^\infty(242)$.

-- ## Atkin-Lehner involution $W_2^{242}$

-- The trace
-- $\mathrm{tr}_{121}^{242}: M^\infty(242) \to M^\infty(121)$
-- is given through the Atkin-Lehner involution.
-- See, for example, \cite{Kohnen:WeierstrassPointsAtInfinity:2004}.
--
-- In our case we have
-- $$f|\mathrm{tr}_{121}^{242} = f + 2 f|W_2^{242}|U_2$$
-- where
-- $$
-- W_2^{242}=
-- \begin{pmatrix}
-- 2 & -1\\
-- 242 & -120
-- \end{pmatrix}
-- $$
-- is given below and $U_2$ is the operator described
-- in `qetaquot.spad`.
--
-- We can split $W_2^{242}$ into an element of $SL_2(\mathbb{Z})$
-- and a triangular matrix.

alw := matrix [[2, -1], [242, -120]]
sm := splitMatrix(alw(1,1), alw(1,2), alw(2,1), alw(2,2))
gamma := sm.red;

-- The second matrix just corresponds to going from $\tau$ to $2\tau$.

w := WIDTH0(242, gamma(2,1))

-- The width of the matrix Atkin-Lehner involution $W_2^{242}$ is 2,
-- so the resulting series will be in $q^{1/w}$ which together with
-- the above $\tau\mapsto 2\tau$ neutalizes and we can simply read
-- the resulting series as a series in $q$.

-- ## Series coming from $N=242$

-- Since we can only compute with series coming from eta-quotients, we
-- temporarily switch to level 242 and take the trace of a series from
-- there.

rgens242 := etaQuotientMonoidExponentVectors(242)$QEQEV
egens242 := [(expansion etaQuotient(242, r)$EQI(Z))::A1(C) for r in rgens242];
[qetaGrade(x) for x in egens242]

-- For all the series we compute that we need at most a second root of unity, i.e. we continue our computation in $C=\mathbb{Q}$.

[minimalRootOfUnity etaQuotient(242, 242, r, gamma) for r in rgens242]

CX := Q;
xiord := 2;
xi := -1; -- a second root of unity

-- We have tried to compute the algebra basis for N=121 with
-- the addition of one of the series coming from the N=242
-- generators and found that the eta-quotient corresponding to
-- the third vector, namely $(6, -3, -1, 1, 5, -8)$ works best
-- in the sense that it yields a basis with number of gaps equal
-- to 6 whereas for other indices we get bases with a higher
-- number of gaps.
--
-- $1 = (-1, 2, 0, 0, 1, -2) \to 8$,
-- $2 = (0, 0, 7, -3, 3, -7) \to 31$,
-- $3 = (6, -3, -1, 1, 5, -8) \to 6$,
-- $4 = (0, 0, -4, 8, 4, -8) \to 31$,
-- $5 = (7, -3, -1, 1, 4, -8) \to 6$.

-- Thus, we have chosen the third vector which gives a
-- series of order -55.

r242   := rgens242.3
eqt242 := egens242.3

-- Below we use the functions from `qetaquot.spad`.

-- Since internally the computation of `eqt242` is done by a different
-- function, we first check that we optain the same result when the
-- transformation is the identity matrix.

idgamma: SL2Z := matrix [[1,0],[0,1]];
yeq242: YEQG := etaQuotient(242, 242, r242, idgamma);
modularGamma0? yeq242

eq242 := (lauernt(puiseux(yeq242, 1)$EQG(C, CX)))::A1(C)

zero?(eqt242-eq242)

yeq242g: YEQG := etaQuotient(242, 242, r242, gamma);
eq242g := (expansion(yeq242g::EQG(C,CX)))::A1(C)

-- Now we apply the $U_2$ operator.

u2eq242g := choose(2, 0, eq242g)

-- Similar computation with other (sifted) domain.
-- This is another check that we have no bug in the
-- implementation.

yseq242g: YEQG := etaQuotient(242, 242, r242, 1, 0, gamma);
seq242g := puiseux(yseq242g, w)$EQG(C,CX)

-- Due to implementation as Laurent series, the above series is computed with $q$ standing for $q^{24}$. The result, however, says (den=24) that we should consider it as a series in $q=(q^{24})^{1/24}$.

-- We additionally apply the $U_2$ operator (factor 2 below).

eseq242g := expansion(seq242g)
u2seq242g := choose(2*24, 0, eseq242g)::A1(C)

[coefficient(u2eq242g - u2seq242g, i) for i in 0..100]

-- u2eq242g represents $f|W_2^{242}|U_2$.

-- Now we compute $f + 2 f|W_2^{242}|U_2$.

cftraceeq242 := (eq242 + 2*u2eq242g)::CA

xu := toX1(C, cftraceeq242, 'U);

-- # Denominator polynomial for $u$ with respect to `xab`

-- Take the computation of $u$ = `xu` from the section above.

)cd
)cd g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
)set output algebra off
)set stream calculate 20
)set mess time on
C ==> Q
--C ==> Z;
--C ==> IntegerLocalizedAtPrime 11
xiord := 2;
xi := -1;
CX := Q
)r convenience.input )quiet
)set mess type on
setFormat!(FormatMathJax)$JFriCASSupport

nn := 121
rgens := etaQuotientMonoidExponentVectors(nn)$QEQEV
eqgens := [expansion(etaQuotient(nn, r)$EQI(Z)) for r in rgens];
msyms := indexedSymbols("M", #rgens)
mxgens := [toX1(C, x, sym) for x in eqgens for sym in msyms];
xgens := cons(toX1(C, eqgens.1, 'T), rest mxgens);
genus := genus(nn)$GAMMA0;
xt := xgens.1;

xab := samba(xt, xgens, genus, onet1Step!)$QXTOPSAMBA1(C);

-- We try to find a polynomial $p(t)$ such that .. see below.

e1:=29; e2:=129
rs := [reduce(xt^e1*xu, xab)$QXTOPRED1(C)];
for i in e1+1..e2 repeat (_
  print(i);_
  rs := cons(reduce(xt*first(rs), xab)$QXTOPRED1(C), rs))
rs := reverse! rs;
[qetaGrade x for x in rs]
[variables(second(x)::Pol(C)) for x in rs]
[coefficient(second(x)::Pol C, U, 1) for x in rs]

l := [[qetaCoefficient(first x, i) for i in 0..191] for x in rs];

-- Extract the 192 coefficients corresponding to the orders $-191, \ldots, 0$ and compute the kernel of the corresponding matrix.

mat := transpose matrix l;
[nrows mat, ncols mat]
ns := nullSpace mat;
#ns

-- Extract the coefficients from the vector in the nullspace.

cs := members first ns;

-- Check that the resulting vector indeed yields a relation.

lincomp := [c*rr for c in cs for rr in rs];
lc := reduce(_+, lincomp);
zero? lc
qetaCoefficient(lc, 0)

-- Indeed, we have just shown a relation for
-- $t^{39}u-h_{39}, \ldots, t^{129}u-h_{129}$.
--
-- In the second component of this "zero" is it's relation in terms of $U, $$M_1$, and $M_2$.
-- The "denominator polynomial" is given by the coefficient of $U$.

p := (second lc)::Pol C;
variables p
[degree(p, x) for x in variables p]

-- ### Computation of the corresponding polynomials $p_0,..,p_4$

-- In order to find the respective cofactors to the $c_1$
-- from above, we must do the whole computation with
-- different attached values, namely $T$, and $M2$
-- for the elements in basis `xab`.

c1:=coefficient(p,U,1);
c0:=coefficient(p,U,0);

variables c0
vars := reverse! rest variables c0
c0s := [coefficient(c0, x, 1) for x in vars];
degree(c1, T), [degree(x, T) for x in c0s]
gcd cons(c1,c0s)

-- Apart from the $t^{39}$ factor, we get other factors.

fl := factorList factor c1;
[x.exponent for x in fl]
flfactors := [x.factor for x in fl]


--generatingSeries for p(13n+6)

sps := choose(13, 6, partitionSeries(1)$QFunctions(C, A1 C))


[factor coefficient(sps, i) for i in 0..10]

rgens
