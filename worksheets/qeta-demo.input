-- # Samba for level $N$

-- ## Init

-- ### Clear and set output format

)clear completely

)set output linear on
)set output algebra off

)set output linear off
)set output algebra on

-- ### Load macros and Choose coefficient domain

-- +
)cd /home/hemmecke/g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
C ==> Q
--C ==> Z;
--C ==> IntegerLocalizedAtPrime 11
CF ==> CF1 C
X ==> X1 C
)r ../input/tracemacros

F1Z ==> Finite0Series(Z , 'q, 0);
abmap(A, B, x) ==> _
  map((c: A): B +-> c::B, x)$Finite0SeriesFunctions2(A, B, 'q, 'q, 0, 0)
zcmap(x) ==> abmap(Z, C, x)

)set mess time on
)set output linear off
)set output algebra on
)set stream calculate 20
)set mess type on
-- -

-- ## Samba computation

nn: P := 26; -- level
nndivs := DIVISORS nn;
rgens := etaQuotientMonoidExponentVectors(nn)$QEtaQuotientMonoidExponentVectors4ti2
eqgens := [retract(etaQuotient(nndivs, r)$ETA(Z)) for r in rgens];


-- The generators

msyms := indexedSymbols("M", #rgens)
mxgens := [toX1(C, x, sym) for x in eqgens for sym in msyms];
xgens := cons(toX1(C, eqgens.1, 'T), rest mxgens);

genus := genusOfGamma0 nn
xt: X := xgens.1
xab := samba(xt, xgens, genus, onet1Step!)$QXSAMBA1(C)
-- xab := samba(xt, xgens)$QXSAMBA1(C)

grades := [qcoerce(qetaGrade x)@P for x in basis xab];
# basis xab, grades
nog := numberOfGaps(qetaGrade xt, grades)
nog - genus


-- The input basis reduces to zero modulo the algebra basis.

rbas := [reduce(x, xab)$QXRED(C) for x in xgens];
removeDuplicates sort [zero? x for x in rbas]

-- # Series F: $p(13n+6)$ generating series


-- We do expansion at the cusp $i\infty$ which corresponds to $1/N$ or to `1/nn` in terms of our session variables.

-- ## Init

-- ### Clear and set output format

)clear completely

)set output linear on
)set output algebra off

)set output linear off
)set output algebra on

-- ### Load macros and Choose coefficient domain

-- +
)cd /home/hemmecke/g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
C ==> Q
--C ==> Z;
--C ==> IntegerLocalizedAtPrime 11
CF ==> CF1 C
X ==> X1 C
)r ../input/tracemacros

F1Z ==> Finite0Series(Z , 'q, 0);
abmap(A, B, x) ==> _
  map((c: A): B +-> c::B, x)$Finite0SeriesFunctions2(A, B, 'q, 'q, 0, 0)
zcmap(x) ==> abmap(Z, C, x)

)set mess time on
)set output linear off
)set output algebra on
)set stream calculate 20
)set mess type on
-- -

-- ## p(m n + t)

-- We only need to specify the level $nn$, $m$ (and $mm$) and compute the $t$ automatically.

-- +
nn: P := 26; -- level
m: P := 13; mm: P := m; s: List Z := [-1, 0];
mmdivs: List P := DIVISORS mm
shat: Z := sigmaInfinity(mmdivs, s)
orbs := [orb for tt in 0..m-1 | (orb := orbit(shat,m,tt); one? # orb)]
t: N := first first orbs

r: List Z := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularFunctionTools
-- -

ps: F1Z := partitionSeries(1)$QFunctions(Z, F1Z)
rm: F1Z := choose((n: Z): Z +-> m*n+t, ps, 0)

-- Let's compute the expansion of
-- $$
-- F(\tau) = g_r(tau)
--           q^{\frac{e}{24}}
--           \sum_{k=0}^{\infty}p(m k + t)q^k.
-- $$

nndivs := DIVISORS nn
expectedGrade := qetaGrades(nn, r, mm, s, m, t).(1/nn)
eqcf := etaQuotient(nndivs, r)$EtaQuotient(Z, F1Z); --cofactor for rm
qfactor := ((qetaGrade series eqcf)-expectedGrade)*24 - prefactor eqcf
fcf := retract(q24(qfactor)$EtaQuotient(Z, F1Z) * eqcf)
fzf := rm * fcf; -- modular f with integer coefficients
ff := zcmap fzf; -- modular f with coefficients in C, i.e. living in F1
xf := toX1(C, ff, F)

xr := reduce(xf, xab)$QXRED(C)

-- # Series U: N=242, r=[6, - 3, - 1, 1, 5, - 8]

-- We can generate a new modular function by applying the trace to
-- a modular function from $M^\infty(242)$.

-- ## Atkin-Lehner involution $W_2^{242}$

-- The trace
-- $\mathrm{tr}_{121}^{242}: M^\infty(242) \to M^\infty(121)$
-- is given through the Atkin-Lehner involution.
-- See, for example, \cite{Kohnen:WeierstrassPointsAtInfinity:2004}.
--
-- In our case we have
-- $$f|\mathrm{tr}_{121}^{242} = f + 2 f|W_2^{242}|U_2$$
-- where
-- $$
-- W_2^{242}=
-- \begin{pmatrix}
-- 2 & -1\\
-- 242 & -120
-- \end{pmatrix}
-- $$
-- is given below and $U_2$ is the operator described
-- in `qetafun.spad`.
--
-- We can split $W_2^{242}$ into an element of $SL_2(\mathbb{Z})$
-- and a triangular matrix.

alw := matrix [[2, -1], [242, -120]]
sm := splitMatrix(alw(1,1), alw(1,2), alw(2,1), alw(2,2))
gamma := sm.red;

-- The second matrix just corresponds to going from $\tau$ to $2\tau$.

w := WIDTH(242, gamma(2,1))

-- The width of the matrix Atkin-Lehner involution $W_2^{242}$ is 2,
-- so the resulting series will be in $q^{1/w}$ which together with
-- the above $\tau\mapsto 2\tau$ neutalizes and we can simply read
-- the resulting series as a series in $q$.

-- ## Series coming from $N=242$

-- Since we can only compute with series coming from eta quotients, we
-- temporarily switch to level 242 and take the trace of a series from
-- there.

divs242 := DIVISORS 242;
rgens242 := etaQuotientMonoidExponentVectors(242)$QEQMEV
egens242 := [(retract etaQuotient(divs242, r)$ETA(Z))::F1(C) for r in rgens242];
[qetaGrade(x) for x in egens242]

-- For all the series we compute that we need at most a second root of unity, i.e. we continue our computation in $C=\mathbb{Q}$.

[minimalRootOfUnity etaQuotient(242, divs242, r, gamma) for r in rgens242]

CX := Q;
xiord := 2;
xi := -1; -- a second root of unity

-- We have tried to compute the algebra basis for N=121 with
-- the addition of one of the series coming from the N=242
-- generators and found that the eta quotient corresponding to
-- the third vector, namely $(6, -3, -1, 1, 5, -8)$ works best
-- in the sense that it yields a basis with number of gaps equal
-- to 6 whereas for other indices we get bases with a higher
-- number of gaps.
--
-- $1 = (-1, 2, 0, 0, 1, -2) \to 8$,
-- $2 = (0, 0, 7, -3, 3, -7) \to 31$,
-- $3 = (6, -3, -1, 1, 5, -8) \to 6$,
-- $4 = (0, 0, -4, 8, 4, -8) \to 31$,
-- $5 = (7, -3, -1, 1, 4, -8) \to 6$.

-- Thus, we have chosen the third vector which gives a
-- series of order -55.

r242   := rgens242.3
eqt242 := egens242.3

-- Below we use the functions from `qetafun.spad`.

-- Since internally the computation of `eqt242` is done by a different function, we first check that we optain the same result when the transformation is the identity matrix.

idgamma: SL2Z := matrix [[1,0],[0,1]];
yeq242: YETAQG := etaQuotient(242, divs242, r242, idgamma);
modular? yeq242

eq242 := (expansion(etaQuotient(yeq242)$ETAQG))::F1(C)

zero?(eqt242-eq242)

yeq242g: YETAQG := etaQuotient(242, divs242, r242, gamma);
eq242g := (expansion(etaQuotient(yeq242g)$ETAQG))::F1(C)

-- Now we apply the $U_2$ operator.

ordu2eq242g := (order(eq242g)/2)::Z -- series starts at this order
u2eq242g := choose((n: Z): Z +-> 2*n, eq242g, ordu2eq242g)

-- Similar computation with other (sifted) domain.
-- This is another check that we have no bug in the
-- implementation.

yseq242g: YSETAQG := etaQuotient(242, divs242, r242, 1, 0, gamma);
seq242g := puiseux(yseq242g, w)$SETAQG

-- Due to implementation as Laurent series, the above series is computed with $q$ standing for $q^{24}$. The result, however, says (den=24) that we should consider it as a series in $q=(q^{24})^{1/24}$.

-- We additionally apply the $U_2$ operator (factor 2 below).

eseq242g := expansion(seq242g)
ordseq242g := (order eseq242g / 24 / 2)::Z
u2seq242g := choose((n: Z): Z +-> 2*24*n, eseq242g, ordseq242g)::F1(C)

[coefficient(u2eq242g - u2seq242g, i) for i in 0..100]

-- u2eq242g represents $f|W_2^{242}|U_2$.

-- Now we compute $f + 2 f|W_2^{242}|U_2$.

cftraceeq242 := (eq242 + 2*u2eq242g)::CF

xu: X := toX1(C, cftraceeq242, 'U);

-- ## `cfuab`=Samba($t, u \cup `xab`$)

-- Now we can add this element to the algebra basis computed earlier
-- and hope that we end with a algebra basis for all modular functions
-- of level 121, i.e., $M^\infty(121)$.

cft := first xtt
cfabbasis := [first x for x in basis xab];
cftracebas := cons(cftraceeq242, cfabbasis)


genus

cfuab := samba(cft, cftracebas, genus, cfonet1Step!)$QSAMBA1(C);


cfuab

grades := [qcoerce(qetaGrade x)@P for x in basis cfuab]
nog := numberOfGaps(qetaGrade xt, grades)

-- ## xuab=Samba($t, \{m_2,u\}$)

xtracebas := [xtt, xgens.2, xu]


xuab := samba(xtt, xtracebas, genus, onet1Step!)$QXSAMBA1(C);


# basis xuab
grades := [qcoerce(qetaGrade x)@P for x in basis xuab]
numberOfGaps(qetaGrade xtt, grades)

-- ## Denominator polynomial for $u$ with respect to `xab`

-- We try to find a polynomial $p(t)$ such that .. see below.

e1:=29; e2:=129
rs := [reduce(xt^e1*xu, xab)$QXRED(C)];
for i in e1+1..e2 repeat (_
  print(i);_
  rs := cons(reduce(xt*first(rs), xab)$QXRED(C), rs))
rs := reverse! rs;
[qetaGrade x for x in rs]
[variables(second(x)::Pol(C)) for x in rs]
[coefficient(second(x)::Pol C, U, 1) for x in rs]

l := [[qetaCoefficient(first x, i) for i in 0..191] for x in rs];

-- Extract the 192 coefficients corresponding to the orders $-191, \ldots, 0$ and compute the kernel of the corresponding matrix.

mat := transpose matrix l;
[nrows mat, ncols mat]
ns := nullSpace mat;
#ns

-- Extract the coefficients from the vector in the nullspace.

cs := members first ns;

-- Check that the resulting vector indeed yields a relation.

lincomp := [c*rr for c in cs for rr in rs];
lc := reduce(_+, lincomp);
zero? lc
qetaCoefficient(lc, 0)

-- Indeed, we have just shown a relation for
-- $t^{39}u-h_{39}, \ldots, t^{129}u-h_{129}$.
--
-- In the second component of this "zero" is it's relation in terms of $U, $$M_1$, and $M_2$.
-- The "denominator polynomial" is given by the coefficient of $U$.

p := (second lc)::Pol C;
variables p
[degree(p, x) for x in variables p]

-- ### Computation of the corresponding polynomials $p_0,..,p_4$

-- In order to find the respective cofactors to the $c_1$
-- from above, we must do the whole computation with
-- different attached values, namely $T$, and $M2$
-- for the elements in basis `xab`.

c1:=coefficient(p,U,1);
c0:=coefficient(p,U,0);

variables c0
vars := reverse! rest variables c0
c0s := [coefficient(c0, x, 1) for x in vars];
degree(c1, T), [degree(x, T) for x in c0s]
gcd cons(c1,c0s)

-- Apart from the $t^{39}$ factor, we get other factors.

fl := factorList factor c1;
[x.exponent for x in fl]
flfactors := [x.factor for x in fl]

-- ## Try to reduce the order -15 element that comes from level 242

r242_1 := rgens242.1

eqt242_1 := (retract etaQuotient(divs242, r242_1)$ETA(Z))::F1(C)

yeq242_1g: YETAQG := etaQuotient(242, divs242, r242_1, gamma);
eq242_1g := (expansion(etaQuotient(yeq242_1g)$ETAQG))::F1(C);

ordu2eq242_1g := (order(eq242_1g)/2)::Z
u2eq242_1g := choose((n: Z): Z +-> 2*n, eq242_1g, ordu2eq242_1g)

cftraceeq242_1 := (eqt242_1 + 2*u2eq242_1g)::CF

xu_1 := toX1(C, cftraceeq242_1, 'U1)
xr_1 := reduce(xu_1, xuab)$QXRED(C);
zero? xr_1
[coefficient(first(xr_1)::F1(C), i) for i in -30..30]

-- Note that the `zero?` function only tests negative coefficients. That is not sufficient here, otherwise we could "prove" that some function is a modular functio for $\Gamma_0(121)$ when it is actually not.

xu_u := toX1(C, eqt242_1, 'UU)
xr_u := reduce(xu_u, xuab)$QXRED(C);
zero? xr_u
[coefficient(first(xr_u)::F1(C), i) for i in -30..3]

-- However, we see it more easily by reducing the product with
-- $t$ by the algebra basis.

xr_tu := reduce(xt*xu_u, xuab)$QXRED(C);
first xr_tu
zero? xr_tu





