-- -*- coding: utf-8 -*-
-- # Obsolete worksheet (just experiments)

-- # Series F: $p(11n+6)$ in $\Gamma_0(22)$

-- We work in the finite field $F_{11}$.

-- We do expansion at the cusp $\infty$ which corresponds to $1/N$ or
-- to `1/nn` in terms of our session variables.

-- ## Init

-- ### Clear and set output format

)clear completely

-- ### Load macros and Choose coefficient domain $\mathbb{Z}_{11}$

)cd /home/hemmecke/g/qeta/tmp
)set mess type off
)r projectlibs )quiet
)r etamacros.input )quiet
)set output linear off
)set output algebra on
)set stream calculate 2
)set mess time on
ell := 11
C ==> PrimeField(ell)
--C ==> IntegerLocalizedAtPrime(ell)
CA ==> CA1 C
X ==> X1 C
xiord := 2;
xi := -1;
CX := C
nn: P := 22
)r ../input/convenience
)r ../input/tracemacros
)set mess type ff

-- ### Auxiliary functions

divBy(n: Z, c: Z): Z == (c exquo n)::Z
divideBy(n: Z): Z -> Z == (c: Z): Z +-> divBy(n, c)
divideSeriesBy(n: Z, f: A1(Z)): F1(Z) == abfmap(Z, Z, divideBy n, f)

PE C ==> PolynomialEvaluation(C, A1 C)
PEZ ==> PE Z
PEQ ==> PE Q
VZ==>Vector Z

rpol(x, ab) == second(reduce(x, ab)$QXTOPRED1(C))::Pol(C)

prods(bas)==(_
  bas0 := cons(1, bas);_
  h := empty()$List(Pol Z);_
  while not empty? bas0 repeat (_
    b := first bas0;_
    bs := bas0;_
    while not empty? bs repeat (_
      h := cons(b*first bs, h);_
      bs := rest bs);_
    bas0 := rest bas0);_
  h)

relgens(gens, ab) == (_
  bas0 := basis ab;_
  h := [rpol(x, ab) for x in gens];_
  bas := bas0;_
  while not empty? bas repeat (_
    b := first bas;_
    bs := bas;_
    while not empty? bs repeat (_
      h := cons(rpol(b*first(bs), ab), h);_
      bs := rest bs);_
    bas := rest bas);_
  [x for x in h | not zero? x])

groebnerBasis(h, syms) == (_
  dim := #syms;_
  D ==> HomogeneousDirectProduct(dim, N);_
  E ==> Monomials(dim, D, syms);_
  groebner(h, syms)$QEtaGroebner(C, E))

xNFs(hs, gb, syms, f, g) == (_
  dim := #syms;_
  D ==> HomogeneousDirectProduct(dim, N);_
  E ==> Monomials(dim, D, syms);_
  extendedNormalForms(hs, gb, syms, f, g)$QEtaGroebner(C, E))


qGrades(l) == [qetaGrade x for x in l]

-- ### Initialize computation vectors

vlen := 5;
syms  := new(vlen, [])$IndexedVector(List Symbol, 0);
igens  := new(vlen, [])$IndexedVector(List A1 Z, 0);
xgens  := new(vlen, [])$IndexedVector(List X1 C, 0);
ez     := new(vlen, [])$IndexedVector(List Equation Pol Z, 0);
en     := new(vlen, [])$IndexedVector(List Equation Pol Z, 0);
xt    := new(vlen, 1$X1(C))$IndexedVector(X1 C, 0); -- the multiplier
h     := new(vlen, [])$IndexedVector(List Pol C, 0);
g     := new(vlen, [])$IndexedVector(List Pol C, 0);
gz    := new(vlen, [])$IndexedVector(List Pol Z, 0);
az    := new(vlen, [])$IndexedVector(List Pol Z, 0);
xab   := new(vlen, initialize(1$X1(C)))$IndexedVector(QXAB1 C, 0);
)set stream calc 2

-- ## Eta Quotient generators

-- We only need to specify the level $nn$.

nn: P := 22; -- level
genus := genus()$GAMMA0(nn)
etaQ(x) == expansion(etaQuotient(nn, x)$EQI(Z))
rgens := etaQuotientMonoidExponentVectors(nn)$QEQEV
eqgens := [etaQ r for r in rgens];

igens.0 := eqgens
syms.0 := indexedSymbols("M", #rgens)
xgens.0 := [toX1(C, x, sym) for x in igens.0 for sym in syms.0];
qGrades xgens.0

-- Compute an algebra basis for `xgens.0`.

)set mess type on
xt.0 := first xgens.0

xab.0 := samba(xt.0, xgens.0, genus, onet1Step!)$QXTOPSAMBA1(C)

numberOfGaps(xab.0), genus

-- ## Gröbner basis over $\mathbb{Z}_{11}$ of eta-quotient combinations divisible by 11

-- Reduce the generators and products of basis elements by the basis.
-- It gives the generators of the ideal of all relations (over $\mathbb{Z}_{11}$).

h.0 := relgens(xgens.0, xab.0)

g.0 := groebnerBasis(h.0, syms.0)

-- Check that the relations of Radu are expressible in terms of the
-- Gröbner basis.

pt := (3*M1+8*M2)::Pol(C);
pz1 := (-5*M1+16*M2)::Pol(C);
pz2 := (M1-12*M2)::Pol(C);
xNFs([pt,pz1,pz2], g.0, syms.0, "F", "G")

7*pt, 9*pz1, 10*pz2

)set stream calc 6
eqgens.2 + 10*eqgens.1















-- # Substitute integer series (divided by 11) for the $M_i$

-- Relgens correspond to combinations of eta-quotients that have
-- coefficients divisible by 11.
--
-- We interpret the coefficients of h as integers and substitute
-- the respective eta-quotient for the $M_i$ and then divide the
-- coefficients by 11.

)set stream calc 4
gz.0 := (g.0)::List(Pol(Z));
syms.1 := indexedSymbols("A", #(g.0))
evz ==> eval(c+->c*1$A1(Z), concat members syms, concat members igens)
igens.1 := [divideSeriesBy(ell, evz x) for x in gz.0];
xgens.1 := sort(smallerGrade?, [toX1(C, x, sym) for x in igens.1 for sym in syms.1])
qGrades xgens.1

-- We can take these series as input and iterate.
-- Thus we would get another Gröbner basis (over $\mathbb{Z}_{11}$
-- in term of the new variables $A_i$ that describe the ideal of eta-quotient combinations that are divisible by 11^2.

-- ## Can do better

-- Consider the all products of variables (including 1) corresponding
-- to the input eta-quotients.
--
-- Adding a 11-multiple of such a product to a Gröbner basis polynomial
-- does not change the GB over $\mathbb{Z}_{11}$.
--
-- However, when considered over $\mathbb{Z}$, we might be able to
-- reduce the order of the corresponding series over $\mathbb{Z}$,
-- by cleverly choosing the multiple.

ps := prods(syms.0)
[evz x for x in ps]

-- Combination leads to a linear diophantine equation system.
--
-- That function is programmed in `annihilatecoefficients`.

--annlc ==> annihilateLeadingCoefficients(ell, evz)$QAuxiliaryModularPackage(A1 Z)
--az.0 := [annlc(x) for x in gz.0];
annc ==> annihilateCoefficients(ell, ps, evz)$QAuxiliaryModularPackage(A1 Z)
az.0 := [annc(x) for x in gz.0];

igens.1 := [divideSeriesBy(ell, evz x) for x in az.0];
qGrades igens.1

-- Interestingly, some combinations yield a zero series over $\mathbb{Z}$.
-- The corresponding polynomial, is a relation over $\mathbb{Z}$ for the
-- $\mathbb{Z}$-linear eta-quotient combinations having $q$-series
-- expansions with each coefficient divisible by 11.

tmp := [toX1(Z, x, sym) for x in igens.1 for sym in syms.1]

ez.1 := [second a = p for a in tmp for p in az.0| zero? a]
en.1 := [second a = p for a in tmp for p in az.0| not zero? a];

gz.0.12
evz gz.0.12
last ez.1
zero? evz rhs last ez.1

en.1

tmp := evz rhs last en.1
[factor qetaCoefficient(tmp, i) for i in 0..qetaGrade tmp]

tmp := sort(smallerGrade?, [toX1(C, x, sym) for x in igens.1 for sym in syms.1]);
xgens.1 := [x for x in tmp | not member?(second(x)::Pol(C), [lhs e for e in ez.1])]
qGrades xgens.1

-- Compute an algebra basis for the non-zero elements of `xgens.1`.

xt.1 := first [x for x in xgens.1 | qetaGrade(x) > 0]
xab.1 := samba(xt.1, xgens.1, genus, onet1Step!)$QXTOPSAMBA1(C)

h.1 := relgens(xgens.1, xab.1)

g.1 := groebnerBasis(h.1, syms.1)


-- Gröbner basis including the original input.
-- This is to be interpreted as a GB that gives series coefficients
-- divisible by 11^2.

)if 0
xt.0
tmpxgens := concat(xgens.0, xgens.1)
tmpab := samba(xt.0, tmpxgens, genus, onet1Step!)$QXTOPSAMBA1(C)
tmph := relgens(tmpxgens, tmpab)
tmpg := groebnerBasis(tmph, concat(syms.0, syms.1))
)endif

-- ## Iterate 11^2

gz.1 := (g.1)::List(Pol(Z));
syms.2 := indexedSymbols("B", #(g.1))

-- Substitute the $M_i$ for the $A_i$.

gz.1 := eval(gz.1, en.1)

annc2 ==> annihilateCoefficients(ell^2, ps, evz)$QAuxiliaryModularPackage(A1 Z)
az.1 := [annc2(x) for x in gz.1];

az.1

#az.1
igens.2 := [divideSeriesBy(ell^2, evz x) for x in az.1];
qGrades igens.2

igens.2

tmp := [toX1(Z, x, sym) for x in igens.2 for sym in syms.2];
ez.2 := [second a = p for a in tmp for p in az.1| zero? a]
en.2 := [second a = p for a in tmp for p in az.1| not zero? a];

)set stream calc 6
en.2
tmp :=  [evz rhs x for x in en.2]

tmp := sort(smallerGrade?, [toX1(C, x, sym) for x in igens.2 for sym in syms.2]);
xgens.2 := [x for x in tmp | not member?(second(x)::Pol(C), [lhs e for e in ez.2])]
qGrades xgens.2

xt.2 := first [x for x in xgens.2 | qetaGrade(x) > 0]
xab.2 := samba(xt.2, xgens.2, genus, onet1Step!)$QXTOPSAMBA1(C)

h.2 := relgens(xgens.2, xab.2)

g.2 := groebnerBasis(h.2, syms.2)

-- ## Iterate 11^3

gz.2 := (g.2)::List(Pol(Z));
syms.2 := indexedSymbols("C", #(g.2))

-- Substitute the $M_i$ for the $B_i$.

gz.2 := eval(gz.2, en.2)

annc3 ==> annihilateCoefficients(ell^3, ps, evz)$QAuxiliaryModularPackage(A1 Z)
az.2 := [annc2(x) for x in gz.2];

#az.2
igens.3 := [divideSeriesBy(ell^3, evz x) for x in az.2];
qGrades igens.3

igens.3

















-- # END





-- # p(11n+6) Representation of F wrt. Gröbner Basis

m: P := 11; mm: P := m; s: List Z := [-1, 0];
mmdivs: List P := DIVISORS mm
sspec := etaQuotientSpecification(mm, s)
orbs := [orb for tt in 0..m-1 | (orb := ORBIT(sspec,m,tt); one? # orb)]
t: N := first first orbs

-- Let's compute the expansion (at $\infty$) of
-- $$
-- F(\tau) = g_r(\tau)
--           q^{\frac{e}{24}}
--           \sum_{k=0}^{\infty}p(m k + t)q^k.
-- $$

)set output linear on
)set output mathjax on
)set output algebra off
)set stream calc 16

fzf := modularSiftedPartitionSeries(nn, m, t);
ff := abmap(Z, Q, fzf);
xqf := toX1(Q, ff, F)
1/11*xqf
