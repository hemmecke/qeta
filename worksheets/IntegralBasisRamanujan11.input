-- # Compute integral basis for $M^\infty(121)$

-- Compute integral basis for N=121 by adding to the generators of the
-- eta quotients of level 121 having only poles at infinity the
-- p(11n+6) generating series and a series coming from the trace of a
-- modular eta quotient for N=242 of order -15.

-- ## Init

)clear completely
)set output linear on
)set output algebra off
)cd /home/hemmecke/g/qeta/tmp
)set mess type off

)r projectlibs )quiet
)r etamacros.input )quiet
C ==> Q;
CF ==> CF1 C
X ==> X1 C

)r ../input/tracemacros )quiet

nn: P := 11; -- level
nndivs := DIVISORS nn;

xiord: P := 2;
xi := -1;
CX := Q;
)r ../input/convenience )quiet

-- We do expansion at the cusp $\infty$ which corresponds to $1/N$ or to `1/nn` in terms of our session variables.

)set mess time on
)set mess type on
)set output linear off
)set output algebra on
)set stream calculate 2

QEQMEV ==> QEtaQuotientMonoidExponentVectors4ti2
eqmev ==> etaQuotientMonoidExponentVectors $ QEQMEV
rgens := eqmev nn;
eqgens := [retract(etaQuotient(nndivs, r)$ETA C) for r in rgens]

-- ## `xab`=samba($t, \{\}$) --- Samba with T

-- The generators of the $\eta$-quotients of level 121 are given by
-- these exponents for the $\eta$ functions (with arguments being the
-- divisors of 121). The variable `rgens` corresponds to the
-- generators of $R^\infty(11)$.

xgens := [toX1(C, eqgens.1, 'T)]

-- We take a minimal (in terms the order in q) element from the
-- generators and make it special.b Then we compute an algebra basis
-- for $C[T]$.

xt: X := xgens.1

xab := samba(xt, xgens, 0, onet1Step!)$QXSAMBA1(C)
# basis xab, [qetaGrade x for x in basis xab]

genus := genusOfGamma0 11

-- Let's set new variables for each series in the basis.

bsyms := indexedSymbols("B", # basis xab);
xabbasis := [toX1(C, first x, s) for x in basis xab for s in bsyms];
nog := numOfGaps(xab)
xabb := samba(xt, xabbasis, genus)$QXSAMBA1(C);

-- With this number of gaps (96), we have not yet reached the
-- genus of the modular curve. Thus we must find another modular
-- function.

-- # Series F: $p(11n+6)$ generating series

-- Now we consider an additional series. Here we take the series
-- corresponding to the $p(11n+6)$ problem.

mm: P := 11; s: List Z := [-1, 0]; m: P := 11;
mmdivs: List P := DIVISORS mm
shat: Z := sigmaInfinity(mmdivs, s)
orbs := [orb for tt in 0..m-1 | (orb := orbit(shat,m,tt); one? # orb)]
t: N := first first orbs
r: List Z := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularFunctionTools

-- Let's compute the expansion of
-- $$
-- F(\tau) = q^{\frac{13}{24}}
--           \frac{\eta(\tau)^{11} \eta(11\tau)}{\eta(121\tau)^{11}}
--           \sum_{k=0}^{\infty}p(11k+6)q^k.
-- $$

)set output linear on
)set output algebra off

ff := zcmap modularSiftedPartitionSeries(11, m, t);
xf := toX1(C, ff, F)

-- The generating series does not reduce to zero modulo the
-- algebra basis `xab`, but it does modulo the basis `xuab`.

xfr := reduce(xf, xab)$QXRED(C);
zero? xfr
xfr

xfrb := reduce(xf, xabb)$QXRED(C)

-- # xfab=samba($t$, $\{dt\}$)

q := monomial(1,1)$F1(C) -- d/d(tau) q(tau) = 2*pi*i*exp(2*pi*i*tau) = 2*pi*i*q
dt := q*D(eqgens.1)/retract toeta((E1^2*E11^2))
xdt := toX1(C, dt, 'T1)
xdgens := [xt, xdt]

xdab := samba(xt, xdgens, 1, onet1Step!)$QXSAMBA1(C);

cft := first xt
cfdgens := [first x for x in xdgens]
cfab := samba(first xt, cfdgens, 1, cfonet1Step!)$QSAMBA1(C);

xr := reduce(xf, xdab)$QXRED(C);
zero? xr


xdfgens := [xt, xdt, xf]
xdfab := samba(xt, xdfgens, 1, onet1Step!)$QXSAMBA1(C);


-- # Add Klein's $j$-invariant


-- First expand $j(\tau)$ and $j(11\tau)$ at every cusp of $\Gamma_0(11)$.

rgens := etaQuotientMonoidExponentVectors(nn)$QEtaQuotientMonoidExponentVectors4ti2
ys := [etaQuotient(nn, r, 1, [0], 1, 0) for r in rgens];
xiord := max [minimalRootOfUnity x for x in ys]

CX := Q
xi := 1

fs := [expandAtAllCusps(x)$MSETAQ for x in ys];
ms := [expansions(x)::MODFUNX for x in fs];
[qetaGrades x for x in ms]

)r ../input/convenience

mj0 := kleinJn(nn, 11^0); qetaGrades mj0
mj1 := kleinJn(nn, 11^1); qetaGrades mj1

mmj0 := mj0*ms.1^3;   qetaGrades mmj0
mmj1 := mj1*ms.1;     qetaGrades mmj1

toF1C x ==> map(retract, series(x, 2)::F1(CX))$Finite0SeriesFunctions2(CX, C, 'q, 'q, 0, 0)

xj0 := toX1(C, toF1C mmj0, T^3*J0)
xj1 := toX1(C, toF1C mmj1, T*J1)

xdab   := samba(xt, [xt,     xdt          ], 1, onet1Step!)$QXSAMBA1(C); --10
xj01ab := samba(xt, [xt,          xj0, xj1], 1, onet1Step!)$QXSAMBA1(C); --5
xdj0ab := samba(xt, [xt,     xdt, xj0],      1, onet1Step!)$QXSAMBA1(C); --5
xdj1ab := samba(xt, [xt,     xdt,      xj1], 1, onet1Step!)$QXSAMBA1(C); --5
xdj01ab:= samba(xt, [xt,     xdt, xj0, xj1], 1, onet1Step!)$QXSAMBA1(C); --4
xfj01ab:= samba(xt, [xt, xf,      xj0, xj1], 1, onet1Step!)$QXSAMBA1(C); --1
xdfab  := samba(xt, [xt, xf, xdt],           0, onet1Step!)$QXSAMBA1(C); --1

xr := reduce(xj0, xdfab)$QXRED(C);
first xr

xr := reduce(xdt, xj01ab)$QXRED(C);
zero? xr
