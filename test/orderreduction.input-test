-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

-- This is a testfile for methods of the article
-- \cite{Paule+Radu:ProofWeierstrassGapTheorem:2019}.

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------
-- -

C ==> DynamicAlgebraicNumber
CX ==> C
LZ  ==> L1 Z
LX ==> L1 CX
TX ==> TruncatedUnivariateLaurentSeries(CX)
FX ==> FunctionalLaurentInverse(CX)

U(m, f) ==> (choose(m, 0, f::A1(CX))$A1(CX))::LX
U2 f ==> U(2, f)
EQL1C(r) ==> specM0A1C(r)::LX

-- determinantTruncationOrder(mat) computes the highest order of an
-- entry of mat for the correct computation of the principal part of
-- the determinant of mat.
-- This function is needed since for choosing the pivot in the Gaussian
-- algorithm that underlies the determinant computation.

truncationOrder(mat: Matrix LX): Z ==
  truncOrdRow := truncOrdCol := 0
  for i in 1..grdt-1 repeat
    tOrdRow := tOrdCol := 0
    for j in 1..grdt-1 repeat
      tOrdRow := min(tOrdRow, order mat(i,j))
      tOrdCol := min(tOrdCol, order mat(j,i))
    truncOrdRow := truncOrdRow + tOrdRow
    truncOrdCol := truncOrdCol + tOrdCol
    print([truncOrdRow, truncOrdCol])
  return -max(truncOrdRow, truncOrdCol)

-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------
-- -

)set message type on
)set output algebra on
)set output formatted off

-- +
-------------------------------------------------------------------
--test:ordpoly-z11
-------------------------------------------------------------------
-- -

-- See \cite{Paule+Radu:ProofWeierstrassGapTheorem:2019}.
-- Example 5.4 and 5.5

ell: Z := 11
level: P := 2*ell;
expo: Z := 24 exquo gcd(ell-1, 12)
t := EQL1C [expo, 0, -expo, 0] -- = 1/z_{11}
grdt := - order t
f2 := EQL1C [1, 3, -3, -1] -- in M_{\setZ}(22) \cite[p.~4]{...}
f3 := EQL1C [3, 1, -1, -3] -- in M_{\setZ}(22) \cite[p.~4]{...}

-- See \cite[p.~967]{Paule+Radu:ProofWeierstrassGapTheorem:2019}

F2 := f2 - U2 f3
F3 := f3 - 4*U2 f2
F4 := f2^2 + 1/2*U(2,f3^2)
F6 := f3^2 + 8*U2(f2^2)

-- Check conditions of the functional inverse.

w := functionalInverse(t)$FX
q := monomial(1, 1)$LX
z := t w - q^(-grdt)
assertEquals(removeDuplicates [coefficient(z, i) for i in -10..50], [0])

F := [F2, F3, F4, F6];
zeta := primitiveNthRootOfUnity(grdt)
vec := vector [f(w) for f in F]
vecs := [vector [f(w(zeta^i*q)) for f in F] - vec for i in 1..grdt-1];
mat := matrix [members v for v in vecs];
nrows mat, ncols mat

--dt := determinantLeibniz(mat)$DeterminantByLeibnizFormula(LX)
--ordser := U(grdt, dt^2)

o := 2*truncationOrder(mat)
omat := matrix [[order(mat(i,j),   o) for j in 1..grdt-1] for i in 1..grdt-1]
-- We do not have truncated Laurent series anymore.
assertTrue(false)

tmat := matrix [[truncate(mat(i,j),o)@TX for j in 1..grdt-1] for i in 1..grdt-1]
dtt := determinant(tmat)
dtt2 := laurentRep(dtt^2)
tordser := U(grdt, truncate(dtt2, 10))
coefficients taylorRep tordser

cs := [coefficient(tordser, -i) for i in 0 .. -order(tordser,0)];
mons := [monomial(retract(c)@Q, i)$UP('x,Q) for c in cs for i in 0..100];
pol := reduce(_+, mons)

-- See \cite[p.~975, Example 5.4]{Paule+Radu:ProofWeierstrassGapTheorem:2019}

x := monomial(1,1)$UP('x, Q)
polPaper := x^4 * (5^5*11^6 - 2*3^2*439081*x + 5^5*x^2)
assertEquals(pol, polPaper)


F := [F2, F4^2, F4, F6];
vec2 := vector [f(w) for f in F]
vecs := [vector [f(w(zeta^i*q)) for f in F] - vec2 for i in 1..grdt-1];
mat := matrix [members v for v in vecs];
nrows mat, ncols mat

-- dt := determinantLeibniz(mat)$DeterminantByLeibnizFormula(LX)

dt := determinant(mat)
ordser := U(grdt, dt^2)
cs := [coefficient(ordser, -i) for i in 0 .. -order(ordser,0)];
mons := [monomial(retract(c)@Q, i)$UP('x,Q) for c in cs for i in 0..100];
pol2 := reduce(_+, mons)

-- See \cite[p.~975, Example 5.5]{Paule+Radu:ProofWeierstrassGapTheorem:2019}

assertEquals(pol2, (11^3 + x)^2 * pol)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:ordpoly-etaquot22
-------------------------------------------------------------------
-- -
--

-- The generators of the eta-quotients of level 22 are given by
-- these exponents for the eta-functions (with arguments being the
-- divisors of 22). The variable `rgens` corresponds to the generators
-- of $R^\infty(22)$.

level := 22
mspecs := mSPECS0 level;
egens := [specM0A1(C) spec for spec in mspecs]
msyms := indexedSymbols("M", #egens)
xgens := [toX1(C, x, s) for x in egens for s in msyms]

tex := xgens.1
abex := samba(tex, xgens)$QXTOPSAMBA1(CX)
bas := sort(smallerGrade?, basis abex);
assertEquals([qetaGrade x for x in bas], [3, 4, 6, 7])

grdt := qetaGrade tex
t := (first tex)::A1(CX)::LX
w := functionalInverse(t)
zeta := primitiveNthRootOfUnity(grdt)
q := monomial(1,1)$LX
F := [(first x)::A1(CX)::LX for x in bas]
vec := vector [f(w) for f in F];
vecs := [vector [f(w(zeta^i*q)) for f in F] - vec for i in 1..grdt-1];
mat := matrix [members v for v in vecs];
nrows mat, ncols mat


o := 2*truncationOrder(mat)
omat := matrix [[order(mat(i,j),   o) for j in 1..grdt-1] for i in 1..grdt-1]
-- We do not have truncated Laurent series anymore.
assertTrue(false)

tmat := matrix [[truncate(mat(i,j),o)@TX for j in 1..grdt-1] for i in 1..grdt-1]
dtt := determinant(tmat)
--dt := determinant(mat)
--dt := (determinantLeibniz(mat)$DeterminantByLeibnizFormula(LX))
dtt2 := laurentRep(dtt^2)
tordser := U(grdt, truncate(dtt2, 10))
coefficients taylorRep tordser



--ordser := U(grdt, dt^2);
cs := reverse! [coefficient(tordser, i) for i in order(tordser,0) .. 0]
mons := [monomial(retract(c)@Q, i)$UP('x,Q) for c in cs for i in 0..100];
pol := reduce(_+, mons)
factor pol
px := pol::UP('x, CX)
factor px

-- This polynomial cannot be compared to the polynomial (5.4) in
-- \cite[p.~975, Example 5.4]{Paule+Radu:ProofWeierstrassGapTheorem:2019}.

x := monomial(1,1)$UP('x, CX)
polPaper := x^4 * (5^5*11^6 - 2*3^2*439081*x + 5^5*x^2)
pol

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:ordpoly-etaquot121
-------------------------------------------------------------------
-- -

-- The generators of the eta-quotients of level 22 are given by
-- these exponents for the eta-functions (with arguments being the
-- divisors of 22). The variable `rgens` corresponds to the generators
-- of $R^\infty(22)$.

-- This test is not working.
assertTrue(false)
level := 121
mspecs := mSPECS0 level;
egens := [specM0A1(C) spec for spec in mspecs]
msyms := indexedSymbols("M", #egens)
xgens := [toX1(C, x, s) for x in egens for s in msyms]

tex := xgens.1
abex := samba(tex, xgens)$QXTOPSAMBA1(CX)
bas := sort(smallerGrade?, basis abex);
assertEquals([qetaGrade x for x in bas], [49, 98, 147, 196])

grdt := qetaGrade tex
t := (first tex)::A1(CX)::LX
w := functionalInverse(t)
zeta := primitiveNthRootOfUnity(grdt)
q := monomial(1,1)$LX
F := [(first x)::A1(CX)::LX for x in bas]
vec := vector [f(w) for f in F];
vecs := [vector [f(w(zeta^i*q)) for f in F] - vec for i in 1..grdt-1];
mat := matrix [members v for v in vecs];
nrows mat, ncols mat

o := 2*truncationOrder(mat)
omat := matrix [[order(mat(i,j),   o) for j in 1..grdt-1] for i in 1..grdt-1]
tmat := matrix [[truncate(mat(i,j),o)@TX for j in 1..grdt-1] for i in 1..grdt-1]
dtt := determinant(tmat)
--dt := determinant(mat)
--dt := (determinantLeibniz(mat)$DeterminantByLeibnizFormula(LX))
dtt2 := laurentRep(dtt^2)
tordser := U(grdt, truncate(dtt2, 10))
coefficients taylorRep tordser

ordser := U(grdt, dt^2);
cs := [coefficient(ordser, -i) for i in 0 .. -order(ordser,0)]
mons := [monomial(retract(c)@Q, i)$UP('x,Q) for c in cs for i in 0..100];
pol := reduce(_+, mons)
factor pol
px := pol::UP('x, CX)
factor px

x := monomial(1,1)$UP('x, CX)
polPaper := x^4 * (5^5*11^6 - 2*3^2*439081*x + 5^5*x^2)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -
