-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input )quiet

--setup
oo ==> infinity()$Cusp
QMOD ==> QMOD0
CUSPS0 nn ==> cusps(nn)$QMOD
)set mess type on
)set mess time on

--endsetup

)set output algebra on
)set output formatted off

--test:cusps
addoo l ==> concat([cusp(numer x, denom x) for x in l], oo)
assertEquals(CUSPS0 4, addoo [0/1,1/2])
assertEquals(CUSPS0 5, addoo [0/1])
assertEquals(CUSPS0 6, addoo [0/1,1/3,1/2])
assertEquals(CUSPS0 36, _
             addoo [0/1, 1/18, 1/12, 1/9, 1/6, 1/4, 1/3, 5/12, 1/2, 2/3, 5/6])
--endtest

--test:cuspsOfGamma0
c(n: ZZ, q: QQ): Cusp == (_
  q = 1/n => oo;_
  one? q => cusp(0, 1)$Cusp;_
  cusp(numer q, denom q)$Cusp)
cog0(nn, result) == assertEquals(CUSPS0 nn, sort [c(nn, x) for x in result])
cog0(2, [1, 1/2])
cog0(3, [1, 1/3])
cog0(4, [1, 1/2, 1/4])
cog0(5, [1, 1/5])
cog0(6, [1, 1/2, 1/3, 1/6])
cog0(7, [1, 1/7])
cog0(8, [1, 1/2, 1/4, 1/8])
cog0(9, [1, 1/3, 2/3, 1/9])
cog0(10, [1, 1/2, 1/5, 1/10])
cog0(11, [1, 1/11])
cog0(12, [1, 1/2, 1/3, 1/4, 1/6, 1/12])
cog0(13, [1, 1/13])
cog0(17, [1, 1/17])
cog0(18, [1, 1/2, 1/3, 2/3, 1/6, 5/6, 1/9, 1/18])
cog0(121, [1, 1/11, 2/11, 3/11, 4/11, 5/11, 6/11, 7/11, 8/11, 9/11, 10/11, 1/121])
--endtest

--test:numberOfCuspsOfGamma0

vals := [1, 2, 2, 3, 2, 4, 2, 4, 4, 4, 2, 6, 2, 4, 4, 6, 2, 8, 2, 6,_
         4, 4, 2, 8, 6, 4, 6, 6, 2, 8, 2, 8, 4, 4, 4, 12, 2, 4, 4, 8,_
         2, 8, 2, 6, 8, 4, 2, 12, 8, 12]
nn := 1$PP
anoc(nn, n) == assertEquals(numberOfCusps()$GAMMA0(nn), n)
for n in vals repeat (anoc(nn, n); nn:=nn+1) -- FriCAS cannot compile anoc.

--endtest

--test:numberOfCuspsOfGamma0-eq
anoc nn == assertEquals(numberOfCusps()$GAMMA0(nn), #cusps(nn)$QMOD)
for nn in 1..200 repeat anoc nn -- FriCAS cannot compile.
--endtest

-- +
--test:genusOfGamma0
-- -

-- values taken from https://oeis.org/A001617

genusVals := [0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,2,2,1,_
              0,2,1,2,2,3,2,1,3,3,3,1,2,4,3,3,3,5,3,4,3,5,4,3,1,_
              2,5,5,4,4,5,5,5,6,5,7,4,7,5,3,5,9,5,7,7,9,6,5,5,8,_
              5,8,7,11,6,7,4,9,7,11,7,10,9,9,7,11,7,10,9,11,9,9,_
              7,7,9,7,8,15]
for nn in 1..#genusVals for g in genusVals repeat assertEquals(genus(nn)$QMOD, g)

-- +
--endtest

-- +
--test:nu2OfGamma0

vals:=[1,1,0,0,2,0,0,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,_
       2,0,0,2,0,0,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,2]
nn := 1$PP
anu2(nn, n) == assertEquals(nu2()$GAMMA0(nn), n)
for n in vals repeat (anu2(nn, n); nn:=nn+1) -- FriCAS cannot compile anoc.

--+
--endtest

-- +
--test:nu3OfGamma0
-- -

vals:=[1,0,1,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,_
       0,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,2,0,0,0,0,0,2,0]

nn := 1$PP
anu3(nn, n) == assertEquals(nu3()$GAMMA0(nn), n)
for n in vals repeat (anu3(nn, n); nn:=nn+1) -- FriCAS cannot compile anoc.

--+
--endtest

-- +
--test:normalizeCusp
-- -

ncusp(nn: PP, a: ZZ, c: ZZ): QQ == (_
  s := normalizeCusp(cusp(a, c))$GAMMA0(nn);_
  infinity? s => 1/nn;_
  zero? numer s => 1$QQ;_
  numer(s)/denom(s))

normcusps := [_
  [[[[nn]]],_
   [[ [(a/c), ncusp(nn,a,c)] for a in 1..c | one? gcd(a,c)] for c in 1..nn]_
  ] for nn in 1..10]

expected := _
[[[[[1]]], [[[1, 1]]]],_
 [[[[2]]], [[[1, 1]], [[1/2, 1/2]]]],_
 [[[[3]]], [[[1, 1]], [[1/2, 1]], [[1/3, 1/3], [2/3, 1/3]]]],_
 [[[[4]]],_
  [[[1, 1]], [[1/2, 1/2]], [[1/3, 1], [2/3, 1]], [[1/4, 1/4], [3/4, 1/4]]]],_
 [[[[5]]],_
  [[[1, 1]],_
   [[1/2, 1]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1], [3/4, 1]],_
   [[1/5, 1/5], [2/5, 1/5], [3/5, 1/5], [4/5, 1/5]]]],_
 [[[[6]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/3], [2/3, 1/3]],_
   [[1/4, 1/2], [3/4, 1/2]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 1/6], [5/6, 1/6]]]],_
 [[[[7]]],_
  [[[1, 1]],_
   [[1/2, 1]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1], [3/4, 1]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 1], [5/6, 1]],_
   [[1/7, 1/7], [2/7, 1/7], [3/7, 1/7], [4/7, 1/7], [5/7, 1/7], [6/7, 1/7]]]],_
 [[[[8]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1/4], [3/4, 1/4]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 1/2], [5/6, 1/2]],_
   [[1/7, 1], [2/7, 1], [3/7, 1], [4/7, 1], [5/7, 1], [6/7, 1]],_
   [[1/8, 1/8], [3/8, 1/8], [5/8, 1/8], [7/8, 1/8]]]],_
 [[[[9]]],_
  [[[1, 1]],_
   [[1/2, 1]],_
   [[1/3, 1/3], [2/3, 2/3]],_
   [[1/4, 1], [3/4, 1]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 2/3], [5/6, 1/3]],_
   [[1/7, 1], [2/7, 1], [3/7, 1], [4/7, 1], [5/7, 1], [6/7, 1]],_
   [[1/8, 1], [3/8, 1], [5/8, 1], [7/8, 1]],_
   [[1/9, 1/9], [2/9, 1/9], [4/9, 1/9], [5/9, 1/9], [7/9, 1/9], [8/9, 1/9]]]],_
 [[[[10]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1/2], [3/4, 1/2]],_
   [[1/5, 1/5], [2/5, 1/5], [3/5, 1/5], [4/5, 1/5]],_
   [[1/6, 1/2], [5/6, 1/2]],_
   [[1/7, 1], [2/7, 1], [3/7, 1], [4/7, 1], [5/7, 1], [6/7, 1]],_
   [[1/8, 1/2], [3/8, 1/2], [5/8, 1/2], [7/8, 1/2]],_
   [[1/9, 1], [2/9, 1], [4/9, 1], [5/9, 1], [7/9, 1], [8/9, 1]],_
   [[1/10, 1/10], [3/10, 1/10], [7/10, 1/10], [9/10, 1/10]]]]]

assertEquals(normcusps, expected)

for nn in 1..30 repeat (_
  for c in 1..nn repeat for a in 1..c | one? gcd(a,c) repeat (_
    normedCusp := normalizeCusp(cusp(a,c))$GAMMA0(nn);_
    assertTrue(equivalentCusps?(cusp(a,c), normedCusp)$GAMMA0(nn))))

--+
--endtest
