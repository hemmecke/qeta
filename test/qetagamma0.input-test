-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

--setup
CUSPS0 ==> cusps $ GAMMA0
--endsetup

--test:cusps
assertEquals(CUSPS0 4, [1,1/2,1/4])
assertEquals(CUSPS0 5, [1,1/5])
assertEquals(CUSPS0 6, [1,1/2,1/3,1/6])
assertEquals(CUSPS0 36, _
             [1, 1/2, 1/3, 2/3, 1/4, 1/6, 5/6, 1/9, 1/12, 5/12, 1/18, 1/36])
--endtest

--test:cuspsOfGamma0
cog0(n, result) ==> assertEquals(CUSPS0 n, result)
cog0(2, [1, 1/2])
cog0(3, [1, 1/3])
cog0(4, [1, 1/2, 1/4])
cog0(5, [1, 1/5])
cog0(6, [1, 1/2, 1/3, 1/6])
cog0(7, [1, 1/7])
cog0(8, [1, 1/2, 1/4, 1/8])
cog0(9, [1, 1/3, 2/3, 1/9])
cog0(10, [1, 1/2, 1/5, 1/10])
cog0(11, [1, 1/11])
cog0(12, [1, 1/2, 1/3, 1/4, 1/6, 1/12])
cog0(13, [1, 1/13])
cog0(17, [1, 1/17])
cog0(18, [1, 1/2, 1/3, 2/3, 1/6, 5/6, 1/9, 1/18])
cog0(121, [1, 1/11, 2/11, 3/11, 4/11, 5/11, 6/11, 7/11, 8/11, 9/11, 10/11, 1/121])
--endtest

--test:numberOfCuspsOfGamma0
vals := [1, 2, 2, 3, 2, 4, 2, 4, 4, 4, 2, 6, 2, 4, 4, 6, 2, 8, 2, 6,_
         4, 4, 2, 8, 6, 4, 6, 6, 2, 8, 2, 8, 4, 4, 4, 12, 2, 4, 4, 8,_
         2, 8, 2, 6, 8, 4, 2, 12, 8, 12]

for level in 1..#vals for n in vals repeat
    assertEquals(numberOfCusps(level)$GAMMA0, n)
--endtest

--test:numberOfCuspsOfGamma0-eq
for level in 1..200 repeat
    assertEquals(numberOfCusps(level)$GAMMA0, # CUSPS0 level)
--endtest

-- +
--test:genusOfGamma0
-- -

-- values taken from https://oeis.org/A001617

genusVals := [0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,2,2,1,_
              0,2,1,2,2,3,2,1,3,3,3,1,2,4,3,3,3,5,3,4,3,5,4,3,1,_
              2,5,5,4,4,5,5,5,6,5,7,4,7,5,3,5,9,5,7,7,9,6,5,5,8,_
              5,8,7,11,6,7,4,9,7,11,7,10,9,9,7,11,7,10,9,11,9,9,_
              7,7,9,7,8,15]
for level in 1..#genusVals for g in genusVals repeat
    assertEquals(genus(level)$GAMMA0, g)

-- +
--endtest

-- +
--test:nu2OfGamma0

vals:=[1,1,0,0,2,0,0,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,_
       2,0,0,2,0,0,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,2]
for level in 1..#vals for n in vals repeat
    assertEquals(nu2(level)$GAMMA0, n)

--+
--endtest

-- +
--test:nu3OfGamma0
-- -

vals:=[1,0,1,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,_
       0,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,2,0,0,0,0,0,2,0]

for level in 1..#vals for n in vals repeat
    assertEquals(nu3(level)$GAMMA0, n)

--+
--endtest

-- +
--test:normalizeCusp
-- -

normcusps := [_
  [[[[nn]]],_
   [[ [(a/c), normalizeCusp(nn,a,c)$GAMMA0] for a in 1..c | one? gcd(a,c)] _
    for c in 1..nn]_
  ] for nn in 1..10]

expected := _
[[[[[1]]], [[[1, 1]]]],_
 [[[[2]]], [[[1, 1]], [[1/2, 1/2]]]],_
 [[[[3]]], [[[1, 1]], [[1/2, 1]], [[1/3, 1/3], [2/3, 1/3]]]],_
 [[[[4]]],_
  [[[1, 1]], [[1/2, 1/2]], [[1/3, 1], [2/3, 1]], [[1/4, 1/4], [3/4, 1/4]]]],_
 [[[[5]]],_
  [[[1, 1]],_
   [[1/2, 1]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1], [3/4, 1]],_
   [[1/5, 1/5], [2/5, 1/5], [3/5, 1/5], [4/5, 1/5]]]],_
 [[[[6]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/3], [2/3, 1/3]],_
   [[1/4, 1/2], [3/4, 1/2]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 1/6], [5/6, 1/6]]]],_
 [[[[7]]],_
  [[[1, 1]],_
   [[1/2, 1]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1], [3/4, 1]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 1], [5/6, 1]],_
   [[1/7, 1/7], [2/7, 1/7], [3/7, 1/7], [4/7, 1/7], [5/7, 1/7], [6/7, 1/7]]]],_
 [[[[8]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1/4], [3/4, 1/4]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 1/2], [5/6, 1/2]],_
   [[1/7, 1], [2/7, 1], [3/7, 1], [4/7, 1], [5/7, 1], [6/7, 1]],_
   [[1/8, 1/8], [3/8, 1/8], [5/8, 1/8], [7/8, 1/8]]]],_
 [[[[9]]],_
  [[[1, 1]],_
   [[1/2, 1]],_
   [[1/3, 1/3], [2/3, 2/3]],_
   [[1/4, 1], [3/4, 1]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 2/3], [5/6, 1/3]],_
   [[1/7, 1], [2/7, 1], [3/7, 1], [4/7, 1], [5/7, 1], [6/7, 1]],_
   [[1/8, 1], [3/8, 1], [5/8, 1], [7/8, 1]],_
   [[1/9, 1/9], [2/9, 1/9], [4/9, 1/9], [5/9, 1/9], [7/9, 1/9], [8/9, 1/9]]]],_
 [[[[10]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1], [2/3, 1]],_
   [[1/4, 1/2], [3/4, 1/2]],_
   [[1/5, 1/5], [2/5, 1/5], [3/5, 1/5], [4/5, 1/5]],_
   [[1/6, 1/2], [5/6, 1/2]],_
   [[1/7, 1], [2/7, 1], [3/7, 1], [4/7, 1], [5/7, 1], [6/7, 1]],_
   [[1/8, 1/2], [3/8, 1/2], [5/8, 1/2], [7/8, 1/2]],_
   [[1/9, 1], [2/9, 1], [4/9, 1], [5/9, 1], [7/9, 1], [8/9, 1]],_
   [[1/10, 1/10], [3/10, 1/10], [7/10, 1/10], [9/10, 1/10]]]]]

assertEquals(normcusps, expected)

for nn in 1..30 repeat _
  for c in 1..nn repeat for a in 1..c | one? gcd(a,c) repeat _
    assertTrue(equivalentCusps?(nn,a/c, normalizeCusp(nn, a, c)$GAMMA0)$GAMMA0)

--+
--endtest
