-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input )quiet

-- +
--setup
-- -


u ==> upsilonExponent $ QETAAUX
rsr ==> rationalSquareRoot $ QETAAUX
matCusps(nn: P): List Matrix Z ==
  [cuspToMatrix(nn,c)$GAMMA1 for c in cusps(nn)$GAMMA1]

kappa(nn: P, g: Z, h: Z, mat: Matrix Z): List Q ==
  ks := kappaSchoeneberg(nn, g, h, mat)$QETAAUX
  ky := kappaYang(nn, g, h, mat)$QETAAUX
  gprime := mat(1,1)*g+mat(2,1)*h
  hprime := mat(1,2)*g+mat(2,2)*h
  e := floor(gprime/nn)*(1/2 - hprime/nn)
  [nn,g,h,gprime, hprime, positiveRemainder(gprime,nn),_
   ks, ky, e,_fractionalPart(ks - ky - e)]

)set mess type on
)set mess time on

-- +
--endsetup


-- +
--test:upsilon
-- -

assertEquals(u(1,0,0,1), 0)
assertEquals(u(-1,0,0,-1), 6) -- compensate for the (c\tau+d)^(1/2) factor
assertEquals(u(1,1,0,1), 1) -- t +-> t+1
assertEquals(u(0,-1,1,0), 21) -- t +-> - 1/t

-- +
--endtest

-- +
--test:rationalSquareRoot
-- -

RQP ==> Record(rat: Q, rootOf: P)
chkrsr x ==> (z: RQP := rsr x; assertEquals(x, (z.rat)^2*z.rootOf))
chkrsr 1
chkrsr 16
chkrsr(1/16)
chkrsr(9/16)
chkrsr(7*6^2/(5^3*11^2))

-- +
--endtest

-- +
--test:primePower
-- -

pp(a,p,e) ==> assertEquals(primePower(a, p), e)
pp(5, 3, 0)
pp(6, 3, 1)
pp(12, 3, 1)
pp(9, 3, 2)
pp(12, 2, 2)
pp(36, 5, 0)
pp(72, 2, 3)
pp(72, 3, 2)

-- +
--endtest

-- +
--test:lengthOfGeneralizedEtaFunctionIndices
-- -

l := [lengthOfGeneralizedEtaFunctionIndices nn for nn in 1..50];
expected := [1,2,3,4,4,7,5,8,8,10,7,15,8,13,14,16,10,21,11,22,_
             18,19,13,31,17,22,22,29,16,38,17,32,26,28,26,47,20,31,30,46,_
             22,50,23,43,42,37,25,63,30,48]
assertEquals(l, expected)

-- +
--endtest

-- +
--test:generalizedEtaFunctionIndices
-- -

expected := [_
  [[1]],_
  [[1],[2]],_
  [[1],[3],[3,1]],_
  [[1],[2],[4],[4,1]],_
  [[1],[5],[5,1],[5,2]],_
  [[1],[2],[3],[6],[3,1],[6,1],[6,2]],_
  [[1],[7],[7,1],[7,2],[7,3]],_
  [[1],[2],[4],[8],[4,1],[8,1],[8,2],[8,3]],_
  [[1],[3],[9],[3,1],[9,1],[9,2],[9,3],[9,4]],_
  [[1],[2],[5],[10],[5,1],[5,2],[10,1],[10,2],[10,3],[10,4]],_
  [[1],[11],[11,1],[11,2],[11,3],[11,4],[11,5]],_
  [[1],[2],[3],[4],[6],[12],[3,1],[4,1],[6,1],[6,2],_
   [12,1],[12,2],[12,3],[12,4],[12,5]],_
  [[1],[13],[13,1],[13,2],[13,3],[13,4],[13,5],[13,6]],_
  [[1],[2],[7],[14],[7,1],[7,2],[7,3],_
   [14,1],[14,2],[14,3],[14,4],[14,5],[14,6]],_
  [[1],[3],[5],[15],[3,1],[5,1],[5,2],_
   [15,1],[15,2],[15,3],[15,4],[15,5],[15,6],[15,7]],_
  [[1],[2],[4],[8],[16],[4,1],[8,1],[8,2],[8,3],_
   [16,1],[16,2],[16,3],[16,4],[16,5],[16,6],[16,7]],_
  [[1],[17],[17,1],[17,2],[17,3],[17,4],[17,5],[17,6],[17,7],[17,8]],_
  [[1],[2],[3],[6],[9],[18],[3,1],[6,1],[6,2],[9,1],[9,2],[9,3],[9,4],_
   [18,1],[18,2],[18,3],[18,4],[18,5],[18,6],[18,7],[18,8]],_
  [[1],[19],[19,1],[19,2],[19,3],[19,4],[19,5],[19,6],[19,7],[19,8],[19,9]],_
  [[1],[2],[4],[5],[10],[20],[4,1],[5,1],[5,2],[10,1],[10,2],[10,3],[10,4],_
  [20,1],[20,2],[20,3],[20,4],[20,5],[20,6],[20,7],[20,8],[20,9]]]

s := [generalizedEtaFunctionIndices nn for nn in 1..20]
assertEquals(s, expected)
l := [lengthOfGeneralizedEtaFunctionIndices nn for nn in 1..20];
assertEquals([#x for x in s], l)

-- +
--endtest

-- +
--test:dedekindSum
-- -

l := [[dedekindSum(a,c) for a in 1..c | one? gcd(a,c)] for c in 1..20]
expected := [_
  [0],
  [0],_
  [1/18,-1/18],_
  [1/8,-1/8],_
  [1/5,0,0,-1/5],_
  [5/18,-5/18],_
  [5/14,1/14,-1/14,1/14,-1/14,-5/14],_
  [7/16,1/16,-1/16,-7/16],_
  [14/27,4/27,-4/27,4/27,-4/27,-14/27],_
  [3/5,0,0,-3/5],_
  [15/22,5/22,3/22,3/22,-5/22,5/22,-3/22,-3/22,-5/22,-15/22],_
  [55/72,-1/72,1/72,-55/72],_
  [11/13,4/13,1/13,-1/13,0,-4/13,4/13,0,1/13,-1/13,-4/13,-11/13],_
  [13/14,3/14,3/14,-3/14,-3/14,-13/14],_
  [91/90,7/18,19/90,-7/18,7/18,-19/90,-7/18,-91/90],_
  [35/32,5/32,-5/32,-3/32,3/32,5/32,-5/32,-35/32],_
  [20/17,8/17,5/17,0,1/17,5/17,1/17,-8/17,8/17,-1/17,-5/17,-1/17,0,-5/17,_
   -8/17,-20/17],_
  [34/27,2/27,-2/27,2/27,-2/27,-34/27],_
  [51/38,21/38,9/38,11/38,11/38,-9/38,3/38,-3/38,-21/38,21/38,3/38,-3/38,_
   9/38,-11/38,-11/38,-9/38,-21/38,-51/38],_
  [57/40,3/8,3/8,-7/40,7/40,-3/8,-3/8,-57/40]]

assertEquals(l, expected)

-- +
--endtest

-- +
--test:generalizedDedekindSum
-- -

for c in 1..20 repeat for a in 1..c | one? gcd(a,c) repeat
  assertEquals(dedekindSum(a,c), generalizedDedekindSum(10,0,0,a,c))

-- +
--endtest
-- -

-- Check that the transformation of $E_{g,h}$ and $\eta_{g,h}^{[S]}$
-- agree if $g$ and $g'=l.6$ are not zero.

-- +
--test:kappa-1-10
-- -

for nn in 1..10 repeat
  for mat in matCusps(nn) repeat
    for g in 1..nn-1 repeat
      for h in 0..g-1 repeat
        l :=  kappa(nn,g,h,mat)
        if not zero? l.6 then assertTrue(zero? last l)

-- +
--endtest

-- +
--test:kappa-11-20
-- -

for nn in 11..20 repeat
  for mat in matCusps(nn) repeat
    for g in 1..nn-1 repeat
      for h in 0..g-1 repeat
        l :=  kappa(nn,g,h,mat)
        if not zero? l.6 then assertTrue(zero? last l)

-- +
--endtest

-- +
--test:time6-kappa-21-30
-- -

for nn in 21..30 repeat
  for mat in matCusps(nn) repeat
    for g in 1..nn-1 repeat
      for h in 0..g-1 repeat
        l :=  kappa(nn,g,h,mat)
        if not zero? l.6 then assertTrue(zero? last l)

-- +
--endtest

-- +
--test:time21-kappa-31-40
-- -

for nn in 31..40 repeat
  for mat in matCusps(nn) repeat
    for g in 1..nn-1 repeat
      for h in 0..g-1 repeat
        l :=  kappa(nn,g,h,mat)
        if not zero? l.6 then assertTrue(zero? last l)

-- +
--endtest

-- +
--test:time55-kappa-41-50
-- -

for nn in 41..50 repeat
  for mat in matCusps(nn) repeat
    for g in 1..nn-1 repeat
      for h in 0..g-1 repeat
        l :=  kappa(nn,g,h,mat)
        if not zero? l.6 then assertTrue(zero? last l)

-- +
--endtest

-- +
--test:time115-kappa-51-60
-- -

for nn in 51..60 repeat
  for mat in matCusps(nn) repeat
    for g in 1..nn-1 repeat
      for h in 0..g-1 repeat
        l :=  kappa(nn,g,h,mat)
        if not zero? l.6 then assertTrue(zero? last l)

-- +
--endtest

-- +
--test:time210-kappa-61-70
-- -

for nn in 61..70 repeat
  for mat in matCusps(nn) repeat
    for g in 1..nn-1 repeat
      for h in 0..g-1 repeat
        l :=  kappa(nn,g,h,mat)
        if not zero? l.6 then assertTrue(zero? last l)

-- +
--endtest
