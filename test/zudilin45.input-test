-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

--
-- # Init

-- In this file we deal with the computation of a relation for
-- $f_{45}$ that is printed in Section 6.3 (page 81) of
-- \cite{BrunaultZudilin_ManyVariationsMahlerMeasures_2020}.
--
-- We find the 3 term relation:
--
-- $$
-- f_{45} =
--   \frac{\eta_{15}^{10}}{\eta_5^3 \eta_{45}^3}
-- - \frac{\eta_1 \eta_9 \eta_{15}^6}{\eta_5^2 \eta_{45}^2}
-- - \frac{\eta_3^2  \eta_5^2 \eta_{45}^2}
--        {\eta_1 \eta_9}
-- $$
--
--
--
--     @Book{BrunaultZudilin_ManyVariationsMahlerMeasures_2020,
--       author =       {Fran{\c}ois Brunault and Wadim Zudilin},
--       title =        {Many Variations of Mahler Measures},
--       publisher =    {Cambridge University Press,
--       year =         2020,
--       ISBN =         {9781108794459},
--       URL =          {https://www.cambridge.org/at/academic/subjects/mathematics/number-theory/many-variations-mahler-measures-lasting-symphony?format=PB&isbn=9781108794459}
--     }

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------
-- -

C ==> Q
VZ ==> Vector Z
MZ ==> Matrix Z
NEGATE x ==> members(- vector x) -- negate all entries in a list
EQA1C r ==> specM0A1C eqSPEC(level,r)
EQAnCX r ==> specM0AnCX eqSPEC(level,r)

)set mess type off
)set mess time off
)read convenience.input )quiet
smallerCusp(x: Cusp, y: Cusp): Boolean ==
   infinity? x => false
   infinity? y => true
   denom x < denom y => true
   denom x > denom y => false
   numer x < numer y

-- )set mess type on
-- )set mess time on

-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------


-- +
-------------------------------------------------------------------
--test:Zudilin45
-------------------------------------------------------------------
-- -


-- From a paper of Zudilin below the table called
-- "Hypergeometric motives for rigid Calabi–Yau manifolds"
-- $f_{45}$

q := monomial(1,1)$L1(C)

-- See the forwarded mail
--
--     From: Cristian-Silviu Radu <sradu@risc.jku.at>
--     Date: Thu, 6 Feb 2020 14:16:19 +0100
--
--       Date: Mon, 3 Feb 2020 16:33:17 +0100
--       From: Wadim Zudilin <wzudilin@gmail.com>
--
--
-- $$
-- f_{45} =
--    \eta_1 \eta_3 \eta_5 \eta_{15}
--  + \eta_3 \eta_9 \eta_{15} \eta_{45}
--  + 2 \eta_3 \eta_{15}^3
--  - 4 \eta_3 \eta_{15} \eta_{45}^2
--      \frac{\eta_{45,3} \eta_{45,9} \eta_{45,12}}
--           {\eta_{45, 18}}
-- $$
-- where with $q = e^{2\pi i \tau}$ the generalized eta-quotient is defined as
-- $$
-- \eta_{\delta,g}(\tau)
-- =
-- q^{\frac{\delta}{2}P_2\left(\frac{g}{\delta}\right)}
--   \prod_{\substack{n>0\\n\equiv g\ (\mathrm{mod}\ \delta)}}
--        (1-q^n)
--   \prod_{\substack{n>0\\n\equiv -g\ (\mathrm{mod}\ \delta)}}
--        (1-q^n)
-- $$
-- and
-- $$
-- P_2(t) = \{t\}^2 - \{t\} + \frac{1}{6}
-- $$
-- is the second Bernoulli function and $\{t\}$ denotes the fractional
-- part of $t$, see
-- \cite{ChenDuZhao_FindingModularFunctionsRamanujan_2019}.
--

f45silviu := 1*q+1*q^2-1*q^4-1*q^5-3*q^8-1*q^10+4*q^11-2*q^13-1*q^16-2*q^17 _
  +4*q^19+1*q^20+4*q^22+1*q^25-2*q^26+2*q^29+5*q^32-2*q^34-10*q^37 _
  +4*q^38+3*q^40-10*q^41+4*q^43-4*q^44-8*q^47-7*q^49+1*q^50+2*q^52 _
  +10*q^53-4*q^55+2*q^58+4*q^59-2*q^61+7*q^64+2*q^65+12*q^67+2*q^68 _
  +8*q^71+10*q^73-10*q^74-4*q^76+1*q^80-10*q^82-12*q^83+2*q^85+4*q^86 _
  -12*q^88+6*q^89-8*q^94-4*q^95+2*q^97-7*q^98

xgeq rbar ==> expansion(generalizedEtaQuotient(geqSPEC rbar)$EQI(C))

f45 := _
  xgeq [[1],[3],[5],[15]] _
  + xgeq [[3],[9],[15],[45]]_
  + 2*xgeq [[3],[15,3]]_
  - 4*xgeq [[3],[15],[45,2],_
       [45,3,1], [45,9,1], [45,12,1], [45, 18,-1]]

assertEquals(order(f45silviu - f45, 100), 100)

-- The generators of the eta-quotients of level 45 are given by
-- these exponents for the eta-functions (with arguments being the
-- divisors of 45). The variable `rgens` corresponds to the generators
-- of $R^\infty(45)$.

level := 45;
mspecs := mSPECS0 level;
rgensExpected: List List Z := [_
    [0, -1, 0, 3, 1, -3], [0, -1, 0, 1, 5, -5], [1, -1, 1, 2, 1, -4],_
    [0, 1, 0, 1, 3, -5], [-1, 3, -1, 0, 5, -6], [0, 3, 0, 1, 1, -5],_
    [2, -1, 2, 1, 1, -5], [-1, 0, 5, 1, 0, -5], [5, -2, -1, 1, 2, -5],_
    [2, -2, -1, 2, 6, -7], [0, -1, 3, 3, 1, -6], [3, -2, 0, 3, 2, -6],_
    [-1, 1, 2, 2, 3, -7], [2, 0, -1, 2, 4, -7], [1, 0, -2, 1, 8, -8],_
    [1, 3, 1, 0, 1, -6], [-2, 4, 4, 0, 0, -6], [-1, 3, 2, 2, 1, -7],_
    [1, -1, 4, 2, 1, -7], [4, -2, 1, 2, 2, -7], [-2, 5, 1, 1, 3, -8],_
    [4, -3, -2, 3, 7, -9], [0, 1, 3, 1, 3, -8], [3, 0, 0, 1, 4, -8],_
    [3, -3, -3, 2, 11, -10], [-3, 8, 3, -1, 0, -7], [0, 7, 0, -1, 1, -7],_
    [1, -3, -2, 4, 11, -11], [-2, 7, 1, 1, 1, -8], [0, 3, 3, 1, 1, -8],_
    [3, 2, 0, 1, 2, -8], [0, -1, -3, 3, 13, -12], [-3, 9, 0, 0, 3, -9],_
    [-1, 5, 2, 0, 3, -9], [2, 4, -1, 0, 4, -9], [-4, 12, 2, -2, 0, -8],_
    [-1, 7, 2, 0, 1, -9], [2, -4, -4, 4, 16, -14], [-2, 9, 1, -1, 3, -10],_
    [1, -4, -5, 3, 20, -15], [-5, 16, 1, -3, 0, -9],_
    [-2, 11, 1, -1, 1, -10], [-3, 13, 0, -2, 3, -11]];
assertEquals([allPureExponents x for x in mspecs], rgensExpected)

specM0A1(C)(mspecs.2)

egens := [specM0A1(C)(spec) for spec in mspecs]

assertEquals([qetaGrade x for x in egens],_
    [4, 6, 6, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11,_
    12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15,_
    16, 16, 16, 16, 17, 18])

msyms := indexedSymbols("M", #egens)
xgens: List X1 C := [toX1(C, x, s) for x in egens for s in msyms];

-- We take a minimal (in terms the order in q) element from the
-- generators and make it special. Then we compute an algebra basis
-- for $C[M_1,\ldots,M_{43}]$.

xt: X1 C := xgens.1;
assertEquals(genus(level)$GAMMA0, 3)
xab := samba(xt, xgens, 3)$QXTOPSAMBA1(C);

assertEquals(numberOfGaps(xab), 3)

bas := basis xab
t := multiplier xab
grdt := qetaGrade t;
assertEquals(grdt, 4)
assertEquals(# bas, grdt-1)

divs := DIVISORS level;
idivs := [i for i in 1.. #divs-1];
wght := 2
wmspecs := etaQuotientSpecifications(level, idivs, -2*wght);

rfcofactorspec := wmspecs.1
rfcofactor := allPureExponents rfcofactorspec
assertEquals(rfcofactor, [0, - 1, 0, 3, 3, - 9])

fcofactors := [specM0A1C spec for spec in wmspecs];
assertEquals([qetaGrade x for x in fcofactors], _
  [14, 16, 18, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26])

-- In the following, we will deal with the modular function
-- $f \in M^\infty(45)$.

f := f45 * specM0A1(C) rfcofactorspec
xf := toX1(C, f, 'F)
xfr := reduce(xf, xab)$QXTOPRED1(C)
assertEquals(removeDuplicates [qetaCoefficient(xfr,-i) for i in 0..230], [0])

ixfr := 5*xfr
fmpol := second(ixfr)::Pol(C) + F  -- This corresponds to the mod func f.

-- `fmpol` corresponds to the modular function $f$.

assertEquals(fmpol, (-M1^2+3*M1)*M3+(M1^2-6*M1-5)*M2+4*M1^2-M1-5)

-- We have just found a relation for $f_{45}$ as a sum
-- of 8 eta-quotients.

f45mpol := M0*fmpol -- Corresponds to the original f45.
assertEquals(# monomials f45mpol, 8)

-- We convert the polynomial in the Mi into a Laurent polynomial in
-- the Ei variables.

esyms := indexedSymbols("E", divs)
dim: N := #esyms

rfcofactorRZ := monRZ NEGATE rfcofactor
m0symsRZ := cons(rfcofactorRZ, [specMonRZ x for x in mspecs]);
m0syms := cons('M0, msyms);

-- The following gives $f_{45}$ in terms of eta-quotients.

-- Let's first check whether the expansion for the modular function f is
-- correctly expressed in eta-quotients.

-- The Laurent polynomial (in Ei variables) that belongs to $f$.

fpolRZ := EVALRZ(m0syms, m0symsRZ, fmpol);

z := rzToA1C fpolRZ - f

-- The function z is a modular function, so we only need to check the
-- negative exponents.

assertTrue(zero? z)

-- Show nicely
-- find common denominator

minEntries(x: DZ, y: DZ): DZ == (_
    directProduct vector [min(x.i, y.i) for i in 1..#x]);

fmonsDZ := [degree mon for mon in monomials fpolRZ];

fdenDZ := - reduce(minEntries, fmonsDZ, 0$DZ)$List(DZ);
assertEquals(fdenDZ::VZ, vector [0, 3, 0, 0, 0, 11])

fdenRZ := monomial(1, fdenDZ)$RZ;
rez(fpolRZ * fdenRZ)
rez fdenRZ

-- Now we do the same thing for the modular form $f_{45}$ itself.

f45polRZ := EVALRZ(m0syms, m0symsRZ, f45mpol);
f45monsDZ := [degree mon for mon in monomials f45polRZ];
f45denRZ := monomial(1, - reduce(minEntries, f45monsDZ, 0$DZ)$List(DZ))$RZ;
z0 := rzToA1C f45polRZ - f45
assertEquals(order(z0, 301), 301)

assertEquals(removeDuplicates [qetaCoefficient(z0, -i) for i in 0..300], [0])
assertEquals(#monomials(rez f45polRZ), 8)

-- Show nicely

num0 := rez (f45polRZ * f45denRZ)
den0 := rez(f45denRZ)

-- # Problem: Zudilin has a relation with only 7 terms for $f_{45}$.

-- Just multiplying a "smaller" cofactor does not work,
-- because we would not work in $M^\infty(45)$.
-- Zudilin suggested the following cofactor eta-quotient, because
-- he had already found a 7-term relation for $f_{45}$. See mail:
--
--     From: wzudilin@gmail.com
--     Data: Fri, 7 Feb 2020 11:40:38 +0100
--
-- $$
-- f_{45}(\tau) = \frac{1}{\eta_3^2 \eta_{45}^2}
--   (\eta_1^3 \eta_9 \eta_{15}^4
--   - 5 \eta_3 \eta_5^3 \eta_9 \eta_{15}^3
--   + 4 \eta_3^2 \eta_9^4 \eta_{15}^2
--   + 3 \eta_9^4 \eta_{15}^4
--   + \eta_1 \eta_3^3 \eta_5 \eta_{15} \eta_{45}^2
--   + \eta_3^3 \eta_9 \eta_{15} \eta_{45}^3
--   − 15 \eta_3 \eta_9 \eta_{15}^3 \eta_{45}^3)
-- $$

-- We store the terms as a list of [coeff, etaexponents].

brunaultterms := [_
  [  3, 0,-2,0,4,4,-2],_
  [-15, 0,-1,0,1,3, 1],_
  [- 5, 0,-1,3,1,3,-2],_
  [  4, 0, 0,0,4,2,-2],_
  [  1, 0, 1,0,1,1, 1],_
  [  1, 3,-2,0,1,4,-2],_
  [  1, 1, 1,1,0,1, 0] _
 ]

# brunaultterms

f45brunault := rzToA1C polyRZ brunaultterms
z := f45brunault-f45;
assertEquals(removeDuplicates [qetaCoefficient(z, -i) for i in 0..300], [0])

-- ## Find better cofactor by means of 4ti2.

-- The grades of an eta-quotient at cusps of the form a/c (gcd(a,c)=1)
-- agrees for all such a. We choose just a=1 (which is relevant for
-- the Ligozat matrix.

level := 45; spitzen := sort(smallerCusp, cusps(level)$GAMMA0)
xiord := 24*level
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
fA45 := rzToAnCX fpolRZ
fgrades := [qetaGrade(fA45, _
             position(normalizeCusp(level, cusp(1,c))$GAMMA0, spitzen)) _
               for c in divs]
assertEquals(fgrades, [-1, -1, -1, -3, -1, 13])

-- For the following we have to take the full Ligozat matrix.

ndivs := #divs
idivs := [i for i in 1..ndivs]

-- Double the full Ligozat matrix part, because we want a resulting
-- vector whose corresponding grades agree in sign with `fgrades`,
-- but are in absolute value (in each component separately) at most as
-- big as the respective absolute value of `fgrades`.

mat := matrixLigozatModularGamma0(level, idivs)$QETAAUX
mat := vertConcat(mat(1..ndivs,1..ncols mat), mat);

-- In the following, the 24 comes from the fact that the result
-- after applying the Ligozat matrix gives 24 times the order
-- (not the grade) of the respective series expansion.

bval: VZ := new(nrows mat, 0);
rels: VZ := new(nrows mat, 0);
for g in fgrades for i in 1..ndivs repeat (_
    bval.i := 24*g;_
    rels.i := - sign g;_
    rels(ndivs+i) := sign g)
z := zsolve(mat, rels, bval)$X4ti2
zzi := [members t for x in z.zinhom | (t:=x(1..ndivs); not zero? t)]

rgadjust := first zzi
grdrgadjust := qetaGrade(specM0AnCX eqSPEC(level, rgadjust), #spitzen)
for r in zzi repeat (_
    grd := qetaGrade(specM0AnCX eqSPEC(level, r), (#spitzen)::P);_
    if grdrgadjust > grd then (_
          rgadjust := r;_
          grdrgadjust := grd))

rgcofactor := members(vector rfcofactor + vector rgadjust)
gA45 := fA45 * specM0AnCX eqSPEC(level, rgadjust);
assertEquals(qetaGrades fA45, [-1,-1,-1,-1,-3,-1,-1,13])
assertEquals(qetaGrades gA45, [0,0,0,0,-2,0,0,6])

gx := series(gA45, #spitzen); -- L1(CX)
g := abfmap(CX, C, retract, gx)::A1(C);
xg := toX1(C, g, 'G)

xgr := reduce(xg, xab)$QXTOPRED1(C)
assertTrue(zero? xgr)

-- We have found a relation with only 4 eta-quotients.

gmpol := -2*second(xgr)::Pol(C) + G
assertEquals(# monomials gmpol, 4)

g0syms := cons('G0,msyms);
g0symsRZ := cons(monRZ NEGATE rgcofactor, [specMonRZ x for x in mspecs]);
gpolRZ := EVALRZ(g0syms, g0symsRZ, gmpol);
rez gpolRZ

g45mpol := G0 * gmpol;
g45polRZ := EVALRZ(g0syms, g0symsRZ, g45mpol);
rez g45polRZ
z0 := rzToA1C g45polRZ - f45;
assertEquals(order(z0, 301), 301)

-- ## Find a basis for all eta-quotients of weight 2 that are modular forms

wght := 2
idivs := [i for i in 1..#divs];
rhs := concat([0 for i in idivs], 2*wght)
zmodform := zsolve4ti2(level, idivs, rhs)$QEtaQuotientSpecifications4ti2;
vdivs := vector(divs)$VZ; -- part of the Ligozat matrix that gives the order
zmodformzi := [members x(1..#divs) for x in zmodform.zinhom];
assertEquals(#zmodformzi, 40)

-- Sort the generating exponents according to the resulting series expansion

vmodformgens := [vector x for x in zmodformzi];
vmodformgenss := sort((x1,x2)+->dot(vdivs,x1)<dot(vdivs,x2), vmodformgens);
rmodformgens := [members x for x in vmodformgenss];

-- ##  $\mathbb{Q}$-linear combination

-- Check whether there is a $\mathbb{Q}$-linear combination
-- of eta-quotients of level 45 and weight 2 that is equal to
-- $f_{45}.
--
-- By calling
--
--     > sage: dimension_modular_forms(Gamma0(45),2)
--     : 10
--
-- Sage tells us that the dimesion of modular forms
-- for $\Gamma_0(45)$ of weight 2 is 10.

emodformgens := [specM0A1C eqSPEC(level,r) for r in rmodformgens];
omodformgens := [order x for x in emodformgens];
assertEquals(omodformgens, [0,0,0,0,0,0,0,0,0,0,0,0,0,_
  1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,5,5,6,6,8,10])

dimM45 := 10;
nmodformgens := # rmodformgens;
cmodformgens :=_
  [[coefficient(x, i) for i in 0..dimM45] for x in emodformgens];
matmodforms := transpose matrix cmodformgens;
cf45 := [coefficient(f45, i) for i in 0..dimM45];
rels: VZ := new(nrows matmodforms, 0);
zmodforms := zsolve(matmodforms, rels, vector cf45)$X4ti2;
zmodformszi := zmodforms.zinhom;
zmodformszh := zmodforms.zhom;
zmodformszf := zmodforms.zfree;
assertEquals(#zmodformszi,1)
assertEquals(#zmodformszh,0)
assertEquals(#zmodformszf,30)

-- Find the indicies of the one and only inhomogeneous solution
-- where the entries are zero, i.e., those modular
-- form generators are irrelevant for the linear combination for $f_{45}$.

nizi := [i for i in 1..#(zmodformszi.1) | not zero? zmodformszi.1.i];
zizi := [i for i in 1..#(zmodformszi.1) | zero? zmodformszi.1.i];
assertEquals(nizi, [1,3,5,27,31,32,33,34,39,40])
#nizi

-- Obviously, the solution gives a 10-term-sum of eta-quotients
-- for $f_{45}$.
--
-- Now we try to turn more of those entries into zero by adding
-- a linear combination of the homogeneous solutions.
--
-- With the indices computed above, we also split the homogeneous
-- solution vectors into two parts.

nzf := [[x.i for i in nizi] for x in zmodformszf];
zzf := [[x.i for i in zizi] for x in zmodformszf];

-- Naturally, there are non-zero entries at indices where the
-- inhomogeneous solution vanishes.
-- Fortunately, the non-zero entries appear quite sparsely.
-- Thus, there is hope that we might be able to reduce the
-- 10-term-sum to something shorter.

assertEquals(# first zzf, 30)
[# remove(0, l) for l in zzf]

-- We are quite lucky.
-- By inspection, we find that one of the homegeneous
-- solution vectors (namely the last one) looks pretty
-- much like the inhomogeneous solution.

nzi := [zmodformszi.1.i for i in nizi]
for x in nzf for i in 1..#nzf repeat print [i, x]

-- Let's subtract it from the inhomogeneous solution.

relvec := zmodformszi.1 - zmodformszf.30
assertEquals([[i, relvec.i] for i in 1..40 | not zero? relvec.i],_
    [[3, 1], [10, -1], [33, -1]])

h45 := reduce(_+,[relvec.i * emodformgens.i for i in 1..nmodformgens], 0$A1(C));
z0 := h45 - f45;
l := removeDuplicates [qetaCoefficient(z0, -i) for i in -10..200];
assertEquals(l, [0])

u := rmodformgens;
k45 := (EQA1C u.3 - EQA1C u.10 - EQA1C u.33);
z0 := k45 - f45;
l := removeDuplicates [qetaCoefficient(z0, -i) for i in -10..200];
assertEquals(l, [0])
k := k45 * EQA1C rfcofactor;
assertTrue(zero?(k-f))

v := [vector rfcofactor + vector x for x in rmodformgens]

kA45 := (EQAnCX v.3 - EQAnCX v.10 - EQAnCX v.33);
z0 := kA45 - fA45;
assertTrue(zero? z0)

-- Print nicely...

qsyms := indexedSymbols("Q", #rmodformgens);
xqgens: List X1 C := [toX1(C, x, sy) for x in emodformgens for sy in qsyms];
xk45 := xqgens.3 - xqgens.10 - xqgens.33;
k45mpol := second(xk45)::Pol(C)
qsymsRZ := [monRZ x for x in rmodformgens];
k45polRZ := EVALRZ(qsyms, qsymsRZ, k45mpol);
z0 := rzToA1C k45polRZ - f45;
assertEquals(order(z0, 301), 301)

rez k45polRZ

k45monsDZ := [degree mon for mon in monomials k45polRZ]
k45denDZ := - reduce(minEntries, k45monsDZ, 0$DZ)$List(DZ);
assertEquals(k45denDZ::VZ, vector [1, 0, 3, 1, 0, 3])

k45denRZ := monomial(1, k45denDZ)$RZ;
rez(k45polRZ * k45denRZ)
rez k45denRZ

-- +
-----------------------------------------------------------------
--endtest
-----------------------------------------------------------------
