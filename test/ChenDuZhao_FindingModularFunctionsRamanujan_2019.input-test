-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

-- # Problem formulation


-- This worksheet contains some formulas and computations from
-- the following article.
--
--     @Article{Chen+Du+Zhao:FindingModularFunctionsRamanujan:2019,
--       author =       {Chen, William Y. C. and Du, Julia Q. D. and Zhao,
--                       Jack C. D.},
--       title =        {Finding Modular Functions for {R}amanujan-Type
--                       Identities},
--       journal =      {Annals of Combinatorics},
--       year =         2019,
--       volume =       23,
--       number =       3,
--       pages =        {613--657},
--       abstract =     {This paper is concerned with a class of partition
--                       functions $a(n)$ introduced by Radu and defined in
--                       terms of eta-quotients. By utilizing the
--                       transformation laws of Newman, Schoeneberg and
--                       Robins, and Radu’s algorithms, we present an
--                       algorithm to find Ramanujan-type identities for
--                       $a(mn+t)$. While this algorithm is not guaranteed to
--                       succeed, it applies to many cases. For example, we
--                       deduce a witness identity for $p(11n+6)$ with
--                       integer coefficients. Our algorithm also leads to
--                       Ramanujan-type identities for the overpartition
--                       functions $\overline{p}(5n+2)$ and
--                       $\overline{p}(5n+3)$ and Andrews–Paule’s broken
--                       2-diamond partition functions $\triangle_2(25n+14)$
--                       and $\triangle_2(25n+24)$. It can also be extended
--                       to derive Ramanujan-type identities on a more
--                       general class of partition functions. For example,
--                       it yields the Ramanujan-type identities on Andrews’
--                       singular overpartition functions
--                       $\overline{Q}_{3,1}(9n+3)$ and
--                       $\overline{Q}_{3,1}(9n+6)$ due to Shen, the
--                       2-dissection formulas of Ramanujan, and the
--                       8-dissection formulas due to Hirschhorn.},
--       issn =         {0219-3094},
--       doi =          {10.1007/s00026-019-00457-4},
--       url =          {https://doi.org/10.1007/s00026-019-00457-4}
--     }
--

-- # Init

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------
-- -

C ==> Q

GEP ==> generalizedEtaPower $ EQI(C)
GEQ ==> generalizedEtaQuotient $ EQI(C)
EQ ==> etaQuotient $ EQI(C)
EE ==> eulerExpansion $ EQI(C)
EX ==> expansion $ EQI(C)

)set mess type on
)set mess time on

ps := partitionSeries(1)$QFunctions(Q, L1(Q))

-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------
-- +
-------------------------------------------------------------------
--test:p5n0
-------------------------------------------------------------------
-- -
-- # $p(5n)$

-- See Formula (1.4) of \cite{Chen+Du+Zhao:FindingModularFunctionsRamanujan:2019}.

f := p5n0 := choose(5, 0, ps);
f1 := EE GEQ [[1,-2],[5,1],[5,1,-8]];
f2 := EE GEQ [[1,-7],[5,6],[5,1,2]];
g := f1 - monomial(3, 1)$L1(C)*f2;
assertEquals(order(f - g,100), 100)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- +
-------------------------------------------------------------------
--test:p11n6
-------------------------------------------------------------------
-- -
-- # $p(11n+6)$

-- Theorem 1.1 Equations (1.7)-(1.9)

p11n6 := choose(11,6,ps);
z0 := EQ(11,[24,-23])*GEP(11,1,-28)*GEP(11,2,-16)*GEP(11,3,-12)*GEP(11,4,-4)
z0 := EQ(11,[24,-23])*GEQ(11,[1,2,3,4],[-28,-16,-12,-4])
z0 := monomial(1,-20)$L1(C)* EE GEQ [[1,24],[11,-23],[11,1,-28],[11,2,-16],[11,3,-12],[11,4,-4]]

z := EX GEQ [[1,1],[11,-1],[11,1,-3],[11,2,-2]]
z := EX(EQ(11,[1,-1]) * GEQ(11,[1,2],[-3,-2]))

e := EX GEQ [[1,3],[11,-3],[11,1,-5],[11,2,-5],[11,3,-4],[11,4,-1]]
e := EX(EQ(11,[3,-3]) * GEQ(11,[1,2,3,4],[-5,-5,-4,-1]))

ts := [z^10, z^8*e, z^9, z^7*e, z^8, z^6*e, z^7, z^5*e, z^6, z^4*e,
       z^5, z^3*e, z^4, z^2*e, z^3, z*e, z^2, z, 1$L1(Q)];
cs := [1,11,30,-44,-90,44,72,-44,4,99,-12,-132,-41,88,68,-22,-39,7,1];
[c*t for c in cs for t in ts];
zz := z0*p11n6 - 11*reduce(_+, [c*t for c in cs for t in ts], 0$L1(Q));
assertEquals(removeDuplicates[coefficient(zz,i) for i in -20..50],[0])
assertEquals(order(zz, 100), 100)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- +
-------------------------------------------------------------------
--test:pp5n2
-------------------------------------------------------------------
-- -
-- # $\overline{p}(5n+2)$
--
-- \cite[p. 7]{Chen+Du+Zhao:FindingModularFunctionsRamanujan:2019}
--
-- $$
-- \sum_{n=0}^\infty \overline{p}(n) q^n
-- =
-- \frac{(q^2;q^2)_\infty}{(q;q)_\infty^ 2}
-- $$

pp := expansion etaQuotient([1,2],[-2,1])
pp5n2 := choose(5, 2, pp);
phi := GEQ[[10],[10,5,9],[10,4,-8]];
f := EE phi * pp5n2

-- We list here the generators of $GE^\infty(10)$ as written the top
-- of page 20 of \cite{Chen+Du+Zhao:FindingModularFunctionsRamanujan:2019}
-- which is equation (3.2).

x := GEQ[[1],[5],[10,-2],[5,1,-2],[10,1,-1]];
x1 := GEQ[[1,-1],[2,2],[5],[10,-2],[5,1,2],[10,1,-4]];
x2 := GEQ[[1,-1],[2,-1],[5,3],[10,-1],[5,1,4],[10,1,-3]];
x3 := GEQ[[1],[2,-2],[5,-1],[10,2],[5,1,2],[10,1,-4]];
x4 := GEQ[[1,4],[2,-3],[10,-1],[5,1,2],[10,1,-4]];
xh := x^(-6) * x1^2 * x2^(-4) * x3^3 * x4^3;

-- Theorem 3.1 of \cite{Chen+Du+Zhao:FindingModularFunctionsRamanujan:2019}.

z := EX x;
h := EX xh;
zz := h*f - (4*z^3 + 4*z^2 - 32*z + 32);
assertEquals(removeDuplicates[coefficient(zz,i) for i in -20..50],[0])
assertEquals(order(zz, 100), 100)

y := GEQ[[1,11],[2,-7],[5,-19],[10,16],[5,1,12],[10,1,-14],[10,4,-8],[10,5,9]];
assertEquals(order(EX(xh*phi/y) - 1,100),100)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
