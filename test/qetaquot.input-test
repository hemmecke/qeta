-- -*- coding: utf-8 -*-
-- $$
-- \newcommand{\NearParens}[2]{#1\!\left(#2\right)}
-- \newcommand{\unityPowerSymbol}{\varepsilon}
-- \newcommand{\unityPower}[1]{\NearParens{\unityPowerSymbol}{#1}}
-- \newcommand{\unityPowerTau}[1]{\NearParens{\unityPowerSymbol^\tau}{#1}}
-- \newcommand{\qPochhammer}[3][\infty]{\left( #2;#3 \right)_{#1}}
-- \newcommand{\eulerFunction}[2][q]{\left({#1}^{#2}\right)_{\infty}}
-- \newcommand{\jacobiFunction}[2]{\NearParens{J}{#1,#2}}
-- \newcommand{\jacobiSchoeneberg}[3]{\NearParens{J^{[S]}}{#1,#2,#3}}
-- $$
-- Via jupytext this file can be shown as a jupyter notebook.

)cd
)read fricas/qeta/input/jfricas-test-support.input

-- This is a testfile for `src/qetaquot.spad`.
-- It is also connected to \cite{Hemmecke_DancingSambaRamanujan_2018}
-- formulas (4), (5), (9).
--
-- https://www.sciencedirect.com/science/article/abs/pii/S0747717117300147
-- and
-- https://risc.jku.at/publications/download/risc_5338/DancingSambaRamanujan.pdf
--
-- To each formula corresponds an expression in eta-functions.
-- Here we compute the expansion thereof not only at the cusp infinity
-- (which is given by (4), (5), (7)), but also at the other cusps of
-- $\Gamma_0(10)$, $\Gamma_0(14)$, $\Gamma_0(22)$.
-- The computation of such an expansion is given by $F_{r,s,m,t}$ (see
-- documentation in `src/qeta.tex`).

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------
-- -

C ==> QQ
QMOD ==> QMOD0
ORBIT ==> modularOrbit $ QMOD0
)read convenience.input )quiet
)set mess type on
)set mess time on
)set stream calc 2

-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------
-- -

)set output algebra on
)set output formatted off


-- +
-------------------------------------------------------------------
--test:Ramanujan5
-------------------------------------------------------------------
-- -

nn := 10 :: PP;
idxs := etaFunctionIndices nn
rspec := eqSPEC [[1,-1]]
m := 5 :: PP;
spitzen := cuspsM0 nn

orbs := [orb for tt in 0..m-1 | (orb := ORBIT(rspec,m,tt); one? # orb)]
t := (first first orbs)::ZZ
assertEquals(t, 4)

sspec := cofactInfM0(nn, rspec, m, t, idxs)
assertEquals(sspec, eqSPEC(10,[[1,6],[5,-5]]))

minroot := 120 :: PP
yf := specYM0EQ(sspec, rspec, m, t);
xiord := minimalRootOfUnity(yf)::PP
assertEquals(xiord, minroot)
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
mf := expandM0AnCX yf
-- compare result with formula (4) from
-- \cite{Hemmecke_DancingSambaRamanujan_2018}
-- Note that mf comes with the cofactor given by r. So we also must
-- multiply the right-hand side. That then equals to the constant 5.
minusfive := (-5)*1$An(CX)
assertTrue zero?(mf+minusfive)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------

-- +
-------------------------------------------------------------------
--test:Ramanujan7
-------------------------------------------------------------------
-- -

nn := 14 :: PP;
idxs := etaFunctionIndices nn
rspec := eqSPEC [[1,-1]];
m := 7 :: PP;
spitzen := cuspsM0 nn

orbs := [orb for tt in 0..m-1 | (orb := ORBIT(rspec,m,tt); one? # orb)]
t := (first first orbs) :: NN
assertEquals(t, 5)

sspec := cofactInfM0(nn, rspec, m, t, idxs) --: List ZZ
assertEquals(sspec,  eqSPEC[[1,7], [2,1], [14,-7]])

minroot := 168 :: PP

-- TODO:
-- c := etaCofactorSpace0(nn, mm, s, m, t)$QEtaCofactorSpace
-- vector r - (c.particular - 20*c.basis.3)(1..4) -- [0,0,1,0]
-- vector r = (c.particular + 2*c.basis.2 - 22*c.basis.3)(1..4) -- [8,0,-7,0]

yf := specYM0EQ(sspec, rspec, m, t);
xiord := minimalRootOfUnity yf
assertEquals(xiord, minroot)
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)

mf := expandM0AnCX yf;

-- compare result with formula (5) from
-- \cite{Hemmecke_DancingSambaRamanujan_2018}
-- Note that mf comes with the cofactor given by sspec. So we also must
-- multiply the right-hand side by that eta-quotient. It gives rise to
-- the (-7)*seven below for the second term on the rhs of (5).
-- The first term on the rhs of (5) turns into the eta-quotient given by
-- [[1,4],[7,-4]].

y1 := specYM0EQ(eqSPEC(nn,[3,1, 3,-7]),1$SPEC,1,0);
y2 := specYM0EQ(eqSPEC(nn,[-1,1,7,-7]),1$SPEC,1,0);

rhs := 7*expandM0AnCX(y1) + 49*expandM0AnCX(y2)
assertTrue(zero?(mf - rhs))

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------

-- +
-------------------------------------------------------------------
--test:Ramanujan7-4-4
-------------------------------------------------------------------
-- -

-- Check that the sifted computation equals modular computation as prefactor.

nn := 14 :: PP;
idxs := etaFunctionIndices nn
xiord := 168
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)

spitzen := cuspsM0 nn
y1 := specYM0EQ(eqSPEC(nn,[0,0, 0,0]),eqSPEC(7,[4,-4]),1,0);
y2 := specYM0EQ(eqSPEC(nn,[4,0,-4,0]),1$SPEC,1,0);
m1 := expandM0AnCX y1
m2 := expandM0AnCX y2
assertTrue(zero?(m1 - m2)) -- check different construction of m1 and m2.

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------

-- +
-------------------------------------------------------------------
--test:Ramanujan11
-------------------------------------------------------------------
-- -

nn := 22 :: PP;
idxs := etaFunctionIndices nn
--nn: PP := 11; r: List ZZ := [0, 1]
--nn: PP := 22; r: List ZZ := [-10,10,-9,10]
rspec := eqSPEC [[1, -1]]
m := 11 :: PP;
spitzen := cuspsM0 nn

orbs := [orb for tt in 0..m-1 | (orb := ORBIT(rspec,m,tt); one? # orb)]
t := (first first orbs)::NN
assertEquals(t, 6)

sspec := cofactInfM0(nn, rspec, m, t, idxs)
assertEquals(pureExponents sspec, [10, 2, 11, -22])

minroot := 264 :: PP;
yf := specYM0EQ(sspec, rspec, m, t);
xiord:= minimalRootOfUnity(yf) :: PP
assertEquals(xiord, minroot)
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
mf := expandM0AnCX yf


-- compare result with formula (9) from
-- \cite{Hemmecke_DancingSambaRamanujan_2018}

-- The $M_1, \ldots, M_7$ from \cite{Hemmecke_DancingSambaRamanujan_2018}.

mgens := [_
  [- 1,   1, 11, - 11],_
  [- 4,   8,  4,  - 8],_
  [  7, - 3,  3,  - 7],_
  [- 2,   6,  6, - 10],_
  [  0,   4,  8, - 12],_
  [  2,   2, 10, - 14],_
  [  4,   0, 12, - 16]]$List(List ZZ)
mspecs := [eqSPEC(nn, x) for x in mgens];

assertEquals(sort [pureExponents x for x in mSPECSInfM0(nn,idxs)], sort mgens)

ygens := [specYM0EQ(mspec,1$SPEC,1,0) for mspec in mspecs];
M := [expandM0AnCX x for x in ygens];
F ==> mf
X n ==> n * 1$An(CX)

repr := 11*(_
  11*3068*M.7_
  + 11*(3*M.3 + X 4236)*M.6_
  + (285*M.3+X(11*5972))*M.5_
  + 1/8*(M.3^2+11*4497*M.3+X(11^2*3156))*M.1_
  + (1867*M.3+X(11*2476))*M.4_
  + (-1/8)*(M.3^3+1011*M.3^2+11*6588*M.3+X(11^2*10880)));

ZERO := F - repr;

assertTrue zero? ZERO

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- # Expansion of dissected eta-function as Puiseux series

-- ## Pure eta function

-- +
-------------------------------------------------------------------
--test:eta-delta-m-lambda-puiseux
-------------------------------------------------------------------
-- -

-- It corresponds to \eqref{eq:eta_delta-m-lambda(gamma*tau)}.

-- Compute the expansion of $\eta((\tau+1)/2)$ under the
-- transformation with `matrix[[1,0],[5,1]]`.

delta := 1 :: PP;
rspec := eqSPEC [[delta,1]];
m := 2 :: PP; lambda := 1 :: NN;
gamma := matrix [[1,0],[5,1]]

-- We only have a puiseuxExpansion function for
-- SymbolicEtaQuotientLambdaGamma, so we do not compute an element of
-- SymbolicEtaGamma, but rather an element of
-- SymbolicEtaQuotientLambdaGamma.
-- Since there is only one part in

assertEquals(parts rspec, [[delta,-1,1]])

-- we can easily extract from

y := etaQuotient(rspec,m,lambda,gamma)$SymbolicEtaQuotientLambdaGamma;

-- the respective element of SymbolicEtaGamma.

yy := y[delta,-1] -- SymbolicEtaGamma

-- The Puiseux expansion of y and yy are the same.

-- Before we can compute the expansion, we must determine in which
-- coefficient ring we can do it.

-- We determine by which $n$-th root of unity $\xi$ we must extend our
-- coefficient ring (rational numbers) so that all coefficients of the
-- expansion (without the $(c\tau+d)$ factor live in
-- $\mathbb{Q}[\xi]$.

-- This is given by the function `minimalRootOfUnity`.

xiord := minimalRootOfUnity(y)
assertEquals(xiord,24)
assertEquals(minimalRootOfUnity yy, xiord)

-- Now we can define the coefficient ring CX and the root xi and
-- compute the expansion.

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
px := puiseuxExpansion(y,0) $ QESXM(C,CX,QMOD0)

-- Note that in our case, the 0 in the argument is actually
-- superfluous, but QEta has no implementation to expand `yy`.

-- Furthermore, the `QMOD0` parameter is actually not used, but QEta
-- did not bother to implement a domain that does not need that
-- parameter.

-- Let us continue with some checks.

ue := unityExponent y
qe := qExponent y -- 4th factor
cde := cdExponent y -- first factor

assertEquals(ue, 11/12)
assertEquals(order px, qe)
assertEquals(cde, 1/2)

-- Compute the actual root
-- $\left(\frac{h_{\delta,m,\lambda}}{\delta}\right)^{1/2}$ in
-- $\mathbb{Q}[\xi]$.

rpf := rationalPrefactor y
s2 := squareRoot(rpf)$GaussRoot(CX,xi,xiord)
assertEquals(s2^2, rpf)

c := s2*xi^(ue*xiord)

assertEquals(c,-xi^7+xi)
assertEquals(leadingCoefficient(px),c)
assertEquals(leadingCoefficient(reductum px),-c)
assertEquals(leadingCoefficient(reductum reductum px),-c)

-- ### The parts of the expansion

-- The left-hand side of \eqref{eq:eta_delta-m-lambda(gamma*tau)-YEG}
-- consists of five parts. We copy this formula here, but the details
-- must be looked up in `qeta.tex`.

-- \begin{align}
--   \eta_{\delta,m,\lambda}(\gamma \tau)
--   &=
--     (c\tau+d)^{1/2}
--     \left(\frac{h_{\delta,m,\lambda}}{\delta}\right)^{1/2}
--     \unityPower{v_{\delta,-1,m,\lambda}}
--     \unityPowerTau{u_{\delta,-1,m,\lambda}}
--     \eulerFunction[q_{\delta,m,\lambda}]{},
--     %\label{eq:eta_delta-m-lambda(gamma*tau)-YEG}
-- \end{align}

-- These factors can be computed as follows.
-- We here choose different parameters than above.

delta := 2 :: PP;
rspec := eqSPEC [[delta,1]];
m := 3 :: PP; lambda := 2 :: NN;
gamma := matrix [[1,1],[4,5]]
y := etaQuotient(rspec,m,lambda,gamma)$SymbolicEtaQuotientLambdaGamma;
xiord := minimalRootOfUnity(y)
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
px := puiseuxExpansion(y,0) $ QESXM(C,CX,QMOD0)

assertEquals(xiord, 12)

-- The exponent for $(c\tau+d)$:

assertEquals(cdExponent y, 1/2)

-- $h_{\delta,m,\lambda}/\delta$

rpf := rationalPrefactor y
s2 := squareRoot(rpf)$GaussRoot(CX,xi,xiord)
assertEquals(rpf, 3)
assertEquals(s2^2, rpf)

-- $v_{\delta,-1,m,\lambda}$

ue := unityExponent y
assertEquals(ue, 1/4)

-- $u_{\delta,-1,m,\lambda}$

qe := qExponent y
assertEquals(qe, 1/4)

-- $(u_{\delta,m,\lambda}, v_{\delta,m,\lambda})$

yy := y[delta,-1] -- SymbolicEtaGamma
assertEquals([udelta yy, vdelta yy], [6,0]$List(QQ))

-- The part \eqref{eq:eta_delta-m-lambda(gamma*tau)-YEG} describing
-- the $q$-Pochhammer symbol, i.e.,
-- $\eulerFunction[q_{\delta,m,\lambda}]{}$ is computed as follows.

qp := qPochhammerPart(y) $ QESXM(C,CX,QMOD0)

-- Putting all together, we should get the Puiseux series that we
-- computed above.

z := px - monomial(s2*xi^(xiord*ue), qe)$QEtaPuiseuxSeries(CX) * qp
assertEquals(order(z, 100), 100)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- ## Generalized eta function

-- +
-------------------------------------------------------------------
--test:eta-delta-g-m-lambda-puiseux
-------------------------------------------------------------------
-- -

-- It corresponds to \eqref{eq:eta_delta-g-m-lambda^[R](gamma*tau)}.

-- Compute the expansion of $\eta_{5,2}((\tau+2)/3)$ under the
-- transformation with `matrix[[1,0],[9,1]]`.

delta := 5 :: PP; g := 2 :: NN;
rspec := eqSPEC [[delta,g,1]];
m := 3 :: PP; lambda := 2 :: NN;
gamma := matrix [[1,0],[9,1]]

-- We only have a puiseuxExpansion function for
-- SymbolicEtaQuotientLambdaGamma, so we do not compute an element of
-- SymbolicEtaGamma, but rather an element of
-- SymbolicEtaQuotientLambdaGamma.
-- Since there is only one part in

assertEquals(parts rspec, [[delta,g,1]])

-- we can easily extract from

y := etaQuotient(rspec,m,lambda,gamma)$SymbolicEtaQuotientLambdaGamma;

-- the respective element of SymbolicEtaGamma.

yy := y[delta,g] -- SymbolicEtaGamma

-- The Puiseux expansion of y and yy are the same.

-- Before we can compute the expansion, we must determine in which
-- coefficient ring we can do it.

-- We determine by which $n$-th root of unity $\xi$ we must extend our
-- coefficient ring (rational numbers) so that all coefficients of the
-- expansion (without the $(c\tau+d)$ factor live in
-- $\mathbb{Q}[\xi]$.

-- This is given by the function `minimalRootOfUnity`.

xiord := minimalRootOfUnity(y)
assertEquals(xiord,180)
assertEquals(xiord,minimalRootOfUnity yy)

-- Now we can define the coefficient ring CX and the root xi and
-- compute the expansion.

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
px := puiseuxExpansion(y,0) $ QESXM(C,CX,QMOD1)

-- Note that in our case, the 0 in the argument is actually
-- superfluous, but QEta has no implementation to expand `yy`.

-- Furthermore, the `QMOD1` parameter is actually not used, but QEta
-- did not bother to implement a domain that does not need that
-- parameter.

-- Let us continue with some checks.

qe := qExponent y
assertEquals(order px, qe)

-- Generalized eta-quotients have no $(c\tau+d)$ factor.

cde := cdExponent y
assertEquals(cde, 0)

-- And there is also no rational prefactor different from 1.

assertEquals(rationalPrefactor y, 1)

-- There is a root-of-unity factor

ue := unityExponent y
assertEquals(ue, 31/36)

-- The actual series expansion without the above factors is

qp := qPochhammerPart(y) $ QESXM(C,CX,QMOD0)

-- Let us check the first 3 coefficients of the series expansion of
-- px.

g1 := gamma1 yy
gd := g1(1,1)*g/delta
hd := g1(1,2)*g/delta
c := xi^(xiord*unityExponent(yy))

-- In case gd is an inteter, we must multiply an additional
-- $(1-\xi^{-h})$ where $\xi$ is the respective $n$-th root of unity and
-- $h$ is `hd` multiplied by $n$. Note that $n$ is `xiord`.

if one? denom gd then c := c * (1-xi^(xiord*(-hd)))

c0 := -xi^35-xi^11+xi^5
c1 := 2*xi^47+xi^41-2*xi^29-2*xi^23+xi^11+2*xi^5
c2 := 2*xi^47-2*xi^41+xi^23-2*xi^17+xi^5
assertEquals(c, c0)
assertEquals(leadingCoefficient(px),c)
assertEquals(leadingCoefficient(reductum px), c1)
assertEquals(leadingCoefficient(reductum reductum px), c2)

-- ### The parts of the expansion

-- The left-hand side of
-- \eqref{eq:eta_delta-g-m-lambda(gamma*tau)-YEG} consists of five
-- parts. We copy this formula here, but the details must be looked up
-- in `qeta.tex`.

-- \begin{align}
--   \eta_{\delta,g,m,\lambda}(\gamma\tau)
--   &=
--     \unityPower{v_{\delta,g,m,\lambda}}
--     \cdot
--     \unityPowerTau{u_{\delta,g,m,\lambda}}
--     \cdot
--     \jacobiSchoeneberg{\frac{a' g}{\delta}}{\frac{b' g}{\delta}}{q_{\delta,m,\lambda}}
--     \eulerFunction[q_{\delta,m,\lambda}]{}^{-1}
--     %\label{eq:eta_delta-g-m-lambda^[R](gamma*tau)-YEG}
-- \end{align}

-- These factors can be computed as follows.
-- We here choose different parameters than above.

delta := 7 :: PP; g := 3 :: NN;
rspec := eqSPEC [[delta,g,1]];
m := 5 :: PP; lambda := 3 :: NN;
gamma := matrix [[1,0],[4,1]]

y := etaQuotient(rspec,m,lambda,gamma)$SymbolicEtaQuotientLambdaGamma;

xiord := minimalRootOfUnity(y)
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
px := puiseuxExpansion(y,0) $ QESXM(C,CX,QMOD0)

assertEquals(xiord, 420)

-- The exponent for $(c\tau+d)$:

assertEquals(cdExponent y, 0)

-- $h_{\delta,m,\lambda}/\delta$

rpf := rationalPrefactor y
assertEquals(rpf, 1)

-- $v_{\delta,-1,m,\lambda}$

ue := unityExponent y
assertEquals(ue, 341/420)

-- $u_{\delta,-1,m,\lambda}$

qe := qExponent y
assertEquals(qe, 1/420)

-- $(u_{\delta,m,\lambda}, v_{\delta,m,\lambda})$

yy := y[delta,g] -- SymbolicEtaGamma
assertEquals([udelta yy, vdelta yy], [1/35,16/35]$List(QQ))

-- The part \eqref{eq:eta_delta-m-lambda(gamma*tau)-YEG} describing
-- the $q$-Pochhammer symbol, i.e.,
-- $\eulerFunction[q_{\delta,m,\lambda}]{}$ is computed as follows.

qp := qPochhammerPart(y) $ QESXM(C,CX,QMOD0)

-- Putting all together, we should get the Puiseux series that we
-- computed above.

z := px - monomial(xi^(xiord*ue), qe)$QEtaPuiseuxSeries(CX) * qp
assertEquals(order(z, 10), 10)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- # Transformation of dissected eta-quotient

-- ## One particular $\lambda$

-- +
-------------------------------------------------------------------
--test:g-r-m-lambda-gamma-puiseux
-------------------------------------------------------------------
-- -

-- It corresponds to \eqref{eq:g_r-m-lambda(gamma*tau)}.

-- Compute the expansion of $g_{r,m,\lambda}(\tau)$ under the
-- transformation with `matrix[[0,1],[-1,0]]`.

rspec := eqSPEC [[1,-1],[3,1]];
m:=250; lambda := 1
gamma := matrix[[0,1],[-1,0]]

y := etaQuotient(rspec,m,lambda,gamma)$SymbolicEtaQuotientLambdaGamma;

-- We determine by which $n$-th root of unity $\xi$ we must extend our
-- coefficient ring (rational numbers) so that all coefficients of the
-- expansion (without the $(c\tau+d)$ factor live in
-- $\mathbb{Q}[\xi]$.

-- This is given by the function `minimalRootOfUnity`.

xiord := minimalRootOfUnity y
assertEquals(xiord,3000) -- lambda=1

-- Now we can define the coefficient ring CX and the root xi and
-- compute the expansion.

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
px := puiseuxExpansion(y,0)$ QESXM(C,CX,QMOD0)

-- The `QMOD0` parameter is actually not used, but QEta
-- did not bother to implement a domain that does not need that
-- parameter.

-- Let us continue with some checks.

assertTrue(zero? cdExponent y)

ue := unityExponent y
assertEquals(ue, 2917/3000)

rpf := rationalPrefactor y
s2 := squareRoot(rpf) $ GaussRoot(CX, xi, xiord)
assertEquals(s2^2, rpf)

qe := qExponent y -- 4th factor
assertEquals(order px, qe)

qp := qPochhammerPart(y) $ QESXM(C,CX,QMOD0)
z := px - monomial(s2*xi^(xiord*ue), qe)$QEtaPuiseuxSeries(CX) * qp
assertEquals(order(z, 10), 10)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- # Transformation of dissected eta-quotient

-- ## Sum over all $\lambda$

-- +
-------------------------------------------------------------------
--test:p-r-m-k-gamma-puiseux
-------------------------------------------------------------------
-- -

-- It corresponds to \eqref{eq:p_r-m-k(gamma*tau)}.

-- Compute the expansion of $p_{r,m,k}(\tau)$ under the transformation
-- with `matrix[[0,1],[-1,0]]`.

rspec := eqSPEC [[1,-1],[3,1]];
m:=250; k := 2
gamma := matrix[[0,1],[-1,0]]

orb := sort ORBIT(rspec,m,k)
assertEquals(orb, [2,102])

y2 := etaQuotient(rspec,m,k,gamma)$SymbolicEtaQuotientGamma;
y102 := etaQuotient(rspec,m,102,gamma)$SymbolicEtaQuotientGamma;

xiord2 := minimalRootOfUnity y2
xiord102 := minimalRootOfUnity y102
xiord := lcm(xiord2, xiord102)
assertEquals(xiord,1500) -- lambda=1

-- Now we can define the coefficient ring CX and the root xi and
-- compute the expansion.

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
px2 := puiseuxExpansion(y2)$ QESXM(C,CX,QMOD0)
px102 := puiseuxExpansion(y102)$ QESXM(C,CX,QMOD0)
z := px2 - px102
assertEquals(order z, 11/360)

-- The `QMOD0` parameter is actually not used, but QEta
-- did not bother to implement a domain that does not need that
-- parameter.

ue2 := unityExponent y2
ue102 := unityExponent y102

rho := rhoInfinity(rspec)
assertEquals(ue2, fractionalPart(-(2+rho)/m))

qemin2 := qExponentMin y2
qemin102 := qExponentMin y102
assertEquals(qemin2,qemin102)

ys := [etaQuotient(rspec,m,lambda,gamma)$SymbolicEtaQuotientLambdaGamma_
       for lambda in 0..m-1];
qes := [[i,qe] for y in ys for i in 1.. | (qe := qExponent(y); qe = qemin2)]
assertEquals(entries complete qes, [[1, qemin2]])

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
