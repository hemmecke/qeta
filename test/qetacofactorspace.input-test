-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

-- This is a testfile for `src/qetacofactorspace.spad`.

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------
-- -

-- X ==> QEtaCofactorSpace
C ==> Q
)read convenience.input )quiet
-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------
-- -

)set mess type on

-- +
-------------------------------------------------------------------
--test:etacofactorspace5
-------------------------------------------------------------------
-- -

nn := 5; spitzen := cusps(nn)$GAMMA0;
m := 5; t := 4
rspec := eqSPEC(1, [-1]);
assertEquals(ORBIT(rspec, m, t), [t])
assertEquals(sort ORBIT(rspec, m, 0), [0, 3])
rec := etaCofactorSpace0(nn, rspec, m, t)
n := numberOfDivisors(nn)
s := (rec.particular)(1..n)
assertEquals(s, [0,1])
sspec := geqSPEC(nn, rec.indices, rec.particular)
yf := specYM0EQ(sspec, rspec, m, t);
xiord := minimalRootOfUnity(yf)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
mf := expandAnCX yf
assertEquals(qetaGrades(mf), [1, -1])

-- And now for $\Gamma_1(5)$.

rec := etaCofactorSpace1(nn, rspec, m, t)

-- Should not fail, because there is a solution for Gamma1(nn).

assertEquals(rec.particular, [1, 0, 10, 0])
assertEquals(rec.basis, [[- 1, 1, - 10, 0], [0, 0, 11, 1], [0, 0, - 60, 0]])

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:etacofactorspace7
-------------------------------------------------------------------
-- -

nn := 7; spitzen := cusps(nn)$GAMMA0;
rspec := eqSPEC(1,[-1]);
m := 7; t := 5
assertEquals(ORBIT(rspec, m, t), [t])
assertEquals(sort ORBIT(rspec, m, 0), [0, 2, 6])
rec := etaCofactorSpace0(nn, rspec, m, t)
n := numberOfDivisors(nn)
s := (rec.particular)(1..n)
assertEquals(s, [0,1])
sspec := geqSPEC(nn, rec.indices, rec.particular)
yf := specYM0EQ(sspec, rspec, m, t);
xiord := minimalRootOfUnity(yf)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
mf := expandAnCX yf
assertEquals(qetaGrades(mf), [2, -1])

-- And now for $\Gamma_1(5)$.

spitzen := cusps(nn)$GAMMA1
rec1 := etaCofactorSpace1(nn, rspec, m, t)

-- Should not fail, because there is a solution for Gamma1(nn).

assertEquals(rec1.particular, [0,1,0,0,0])
assertEquals(# rec1.basis, 4)

sspec1 := geqSPEC(nn, rec1.indices, rec1.particular)
yf1 := specYM1GEQ(sspec1, rspec, m, t);
xiord := minimalRootOfUnity(yf1)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
mf1 := expandAnCX yf1
assertEquals(qetaGrades(mf1), [2, -1, 2, -1, 2, -1])



-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:etacofactorspace11
-------------------------------------------------------------------
-- -

nn := 11; spitzen := cusps(nn)$GAMMA0;
m := 11; t := 6
rspec := eqSPEC(1,[-1]);
assertEquals(ORBIT(rspec, m, t), [t])
assertEquals(sort ORBIT(rspec, m, 0), [0, 4, 7, 9, 10])
rec := etaCofactorSpace0(nn, rspec, m, t)
n := numberOfDivisors(nn)
s := (rec.particular)(1..n)
assertEquals(s, [0,1])
sspec := geqSPEC(nn, rec.indices, rec.particular)
yf := specYM0EQ(sspec, rspec, m, t);
xiord := minimalRootOfUnity(yf)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
mf := expandAnCX yf
assertEquals(qetaGrades(mf), [5, -1])

-- And now for $\Gamma_1(5)$.

rec := etaCofactorSpace1(nn, rspec, m, t)

-- Should not fail, because there is a solution for Gamma1(nn).

assertEquals(rec.particular, [- 105, 106, 0, 0, 0, 0, 165])
assertEquals(# rec.basis, 6)



-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:etacofactorspace-XXX
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
