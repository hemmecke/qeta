-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

-- This is a testfile for `src/qetacofactorspace.spad`.

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------
-- -

-- X ==> QEtaCoFactorSpace
C ==> Q

-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------
-- -

)set mess type on

-- +
-------------------------------------------------------------------
--test:etacofactorspace5
-------------------------------------------------------------------
-- -

nn := 5; spitzen := cusps(nn)$GAMMA0;
mm := 1; r := [-1];
m := 5; t := 4
assertEquals(orbit(mm, r, m, t), [t])
assertEquals(sort orbit(mm, r, m, 0), [0, 3])
rec := etaCoFactorSpace0(nn, mm, r, m, t)
n := numberOfDivisors(nn)
s := (rec.particular)(1..n)
assertEquals(s, [0,1])
yf := etaQuotient(nn, s, mm, r, m, t)$YM0SEQ;
xiord := minimalRootOfUnity(yf)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
f :=  yf::M0SEQ(C, CX);
mf := expansions(f)::MODFUNX(CX)
assertEquals(qetaGrades(mf), [1, -1])

-- And now for $\Gamma_1(5)$.

rr := [[1,-1]]
rec := etaCoFactorSpace1(nn, mm, rr, m, t)



-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:etacofactorspace7
-------------------------------------------------------------------
-- -

nn := 7; spitzen := cusps(nn)$GAMMA0;
mm := 1; r := [-1];
m := 7; t := 5
assertEquals(orbit(mm, r, m, t), [t])
assertEquals(sort orbit(mm, r, m, 0), [0, 2, 6])
rec := etaCoFactorSpace0(nn, mm, r, m, t)
n := numberOfDivisors(nn)
s := (rec.particular)(1..n)
assertEquals(s, [0,1])
yf := etaQuotient(nn, s, mm, r, m, t)$YM0SEQ;
xiord := minimalRootOfUnity(yf)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
f :=  yf::M0SEQ(C, CX);
mf := expansions(f)::MODFUNX(CX)
assertEquals(qetaGrades(mf), [2, -1])

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:etacofactorspace11
-------------------------------------------------------------------
-- -

nn := 11; spitzen := cusps(nn)$GAMMA0;
mm := 1; r := [-1];
m := 11; t := 6
assertEquals(orbit(mm, r, m, t), [t])
assertEquals(sort orbit(mm, r, m, 0), [0, 4, 7, 9, 10])
rec := etaCoFactorSpace0(nn, mm, r, m, t)
n := numberOfDivisors(nn)
s := (rec.particular)(1..n)
assertEquals(s, [0,1])
yf := etaQuotient(nn, s, mm, r, m, t)$YM0SEQ;
xiord := minimalRootOfUnity(yf)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
f :=  yf::M0SEQ(C, CX);
mf := expansions(f)::MODFUNX(CX)
assertEquals(qetaGrades(mf), [5, -1])

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--test:etacofactorspace-XXX
-------------------------------------------------------------------
-- -

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
