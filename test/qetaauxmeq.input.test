--setup
u ==> upsilonExponent$QAuxiliaryModularEtaQuotientPackage
rsr ==> rationalSquareRoot$QAuxiliaryModularEtaQuotientPackage
--endsetup


--test:upsilon
assertEquals(u(1,0,0,1), 0)
assertEquals(u(-1,0,0,-1), 6) -- compensate for the (c\tau+d)^(1/2) factor
assertEquals(u(1,1,0,1), 1) -- t +-> t+1
assertEquals(u(0,-1,1,0), 21) -- t +-> - 1/t
--endtest

--test:cusps
assertEquals(cuspsOfGamma0 4, [1,1/2,1/4])
assertEquals(cuspsOfGamma0 5, [1,1/5])
assertEquals(cuspsOfGamma0 6, [1,1/2,1/3,1/6])
assertEquals(cuspsOfGamma0 36, _
             [1, 1/2, 1/3, 2/3, 1/4, 1/6, 5/6, 1/9, 1/12, 5/12, 1/18, 1/36])
--endtest

--test:rationalSquareRoot
RQP ==> Record(rat: Q, rootOf: P)
chkrsr x ==> (z: RQP := rsr x; assertEquals(x, (z.rat)^2*z.rootOf))
chkrsr 1
chkrsr 16
chkrsr(1/16)
chkrsr(9/16)
chkrsr(7*6^2/(5^3*11^2))
--endtest

--test:primePower
pp(a,p,e) ==> assertEquals(primePower(a, p), e)
pp(5, 3, 0)
pp(6, 3, 1)
pp(12, 3, 1)
pp(9, 3, 2)
pp(12, 2, 2)
pp(36, 5, 0)
pp(72, 2, 3)
pp(72, 3, 2)
--endtest
