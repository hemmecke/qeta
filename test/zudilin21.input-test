-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

-- # Init

-- In this file we deal with the computation of a relation for
-- $f_{21}$ that is printed in Section 6.3 (page 77) of
-- \cite{Brunault+Zudilin:ManyVariationsMahlerMeasures:2020}.
--
-- In fact, by choosing another adjustment, we even find the 3 term relation:
--
-- $$
-- f_{21} =
--   2 \frac{\eta_1 \eta_6^2 \eta_{14} \eta_{21}^2}
--          {\eta_3 \eta_{42}}
-- - \eta_1 \eta_2 \eta_7 \eta_{14}
-- + \frac{\eta_1^2  \eta_6^2 \eta_7^2 \eta_{42}^2}
--        {\eta_2 \eta_3 \eta_{14} \eta_{21}}
-- $$
--
--
--     @Book{Brunault+Zudilin:ManyVariationsMahlerMeasures:2020,
--       author =       {Fran{\c}ois Brunault and Wadim Zudilin},
--       title =        {Many Variations of Mahler Measures},
--       publisher =    {Cambridge University Press,
--       year =         2020,
--       ISBN =         {9781108794459},
--       URL =          {https://www.cambridge.org/at/academic/subjects/mathematics/number-theory/many-variations-mahler-measures-lasting-symphony?format=PB&isbn=9781108794459}
--     }

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------
-- -

C ==> Q
VZ ==> Vector Z
MZ ==> Matrix Z
)set mess type off
)set mess time off
)read convenience.input )quiet
--)set mess type on
--)set mess time on

-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------


-- +
-------------------------------------------------------------------
--test:Zudilin21-42
-------------------------------------------------------------------
-- -

-- ```
-- From: Wadim Zudilin <wzudilin@gmail.com>
-- Date: Thu, 12 Mar 2020 08:28:07 +0100
--
-- P.S. Can you shorten the 6-term version of
-- ```
-- $$
-- \begin{align*}
-- f_{21}(\tau)
-- =
-- \frac{\eta_7}{2\eta_1^2\eta_3\eta_9\eta_{21}}
-- & (3\eta_1^2\eta_7^2\eta_9^4
--    - \eta_3^5\eta_7\eta_9\eta_{21}
--    + 7\eta_1\eta_3^2\eta_9\eta_{21}^4
-- \\ &\qquad
--    + 3\eta_1^3\eta_7\eta_9^3\eta_{63}
--    - 3\eta_1\eta_3^5\eta_{21}\eta_{63}
--    + 3\eta_1^4\eta_9^2\eta_{63}^2)
-- \end{align*}
-- $$
-- ```
-- ?
-- ```

-- We have given $f_{21}$ as an expression in level 63 although
-- it is known that it is a modular form of weight 2 for
-- $\Gamma_0(21)$.
--
-- So we first compute the respective q-series and then multiply with
-- a cofactor of level 42 to get a modular function in level 42.

level := 63;
f21epol63 := E7 / (2*E1^2*E3*E9*E21) _
        *_
        (3*E1^2*E7^2*E9^4 - E3^5*E7*E9*E21 + 7*E1*E3^2*E9*E21^4_
         + 3*E1^3*E7*E9^3*E63 - 3*E1*E3^5*E21*E63 + 3*E1^4*E9^2*E63^2)
esyms := indexedSymbols("E", DIVISORS level);
dim: N := #esyms;
num21RZ := toRZ numer f21epol63;
den21RZ := toRZ denom f21epol63;
f21polzudilinRZ := (num21RZ exquo den21RZ)::RZ;
f21 := rzToA1C f21polzudilinRZ

-- The following variables must be made invalid for
-- further computation.

)clear prop esyms dim f21polzudilinRZ

-- From now on we work in level 42 and only work with the
-- $q$ expansion of $f_{21}$.
--
-- The generators of the $\eta$-quotients of level 42 are given by
-- these exponents for the $\eta$ functions (with arguments being the
-- divisors of 21). The variable `rgens42` corresponds to the generators
-- of $R^\infty(42)$.

level := 42; divs := DIVISORS level;
rgens42 := etaQuotientMonoidExponentVectors(level)$QEQEV;
assertEquals(#rgens42, 1517)

egens42 := [EQA1C r for r in rgens42];
msyms42 := indexedSymbols("M", #egens42);
xgens42: List X1 C := [toX1(C, x, sy) for x in egens42 for sy in msyms42];

-- We take a minimal (in terms the order in q) element from the
-- generators and make it special. Then we compute an algebra basis
-- for $C[M_1,\ldots,M_{1517}]$.

tx: X1 C := xgens42.1
assertEquals(genus(level)$GAMMA0, 5)
abx42 := samba(tx, xgens42, 5)$QXTOPSAMBA1(C)

-- Interestingly, we only need to touch the first 13 entries
-- from the generators of the monoid of eta-quotients
-- in $M^\infty(42)$ and we show with the number of gaps
-- that the algebra basis generates all of $M^\infty(42)$.

assertEquals(numberOfGaps(abx42), 5)

-- From a paper of Zudilin below the table called
-- "Hypergeometric motives for rigid Calabiâ€“Yau manifolds".
-- $f_{21}$ is a modular form for $\Gamma_0(21)$ of weight 2.
--
-- We first find a cofactor $c$ such that
-- $f=f_{21} \cdot c \in M^\infty(42)$.
-- Unfortunately, there is no solution to bring
-- $f_{21} \cdot c$ into $M^\infty(21)$.

)set stream calc 2
idivs := [i for i in 1.. #divs-1];
wght := 2; -- weight of f21.
rhs: List Z := concat([0 for i in idivs], -2*wght);
z := zsolve4ti2(level, idivs, rhs);
zzi := sortByComponentGrade(level, [x(1..#divs) for x in z.zinhom]);
zzh := sortByComponentGrade(level, [x(1..#divs) for x in z.zhom]);
assertEquals(zzi, etaQuotientExponentVectors(level, idivs, -2*wght)$QEQEV);
assertEquals(#zzi,570);
assertEquals(#zzh, #rgens42);
#zzi

-- The order of $f_{21}$ is 1. So we aim at a cofactor
-- that leads to a small pole order of the resulting
-- modular function.

min [qetaGrade EQA1C r for r in zzi]
qetaGrade EQA1C zzi.1

rfcofactor := zzi.1
assertEquals(rfcofactor, [1, - 2, - 3, 6, - 3, 6, 9, - 18]);
f := f21 * EQA1C rfcofactor
assertEquals(qetaGrade f, 19);
xf := toX1(C, f, 'F);

-- Clearly, $f$ must reduce to zero
-- modulo our algebra basis.

xfr := reduce(xf, abx42)$QXTOPRED1(C);
assertTrue(zero? xfr)
assertEquals(removeDuplicates [qetaCoefficient(xfr,-i) for i in 0..230], [0])

-- So we have found a representation of $f$
-- (and therefore also of $f_{21}$) as a sum of
-- eta-quotients of $M^\infty(42)$.

ixfr := 49*xfr;
fmpol := -second(ixfr)::PolC + F  -- This corresponds to the mod func f.

assertEquals(# monomials fmpol, 17)

-- However, this relation has 17 terms in contrast to the
-- representation with only 6 eta-quotients of $M^\infty(63)$.

-- # Find a basis for all eta-quotients of weight 2 that are modular forms

-- We now try another method. Namely, we find a basis for all
-- eta-quotients of weight 2 involving only
-- $\eta(\delta\tau)$ with $\delta | 42$.
--
-- To reduce the search space, we consider only exponent vectors
-- that when multiplied with the respective Ligozat matrix give
-- non-negative values.
--
-- Note that for eta-quotients that are in $M^\infty(42)$ the
-- product of the exponent vector with the Ligozat matrix
-- gives basically 24 times the pole order of the expansion
-- at the cusps.

matrixLigozat(42)

-- where
-- $$
-- a(c,\delta)
-- =
-- \frac{N/c}{\gcd(N/c,c)}\frac{\gcd(c,\delta)^2}{\delta}
-- $$
-- and the rows and columns are indexed by the divisors of 42.

-- We have to solve an integer problem which can easily be
-- done by the program 4ti2.
--
-- As a result we get 138 candidates.

idivs := [i for i in 1..#divs];
rhs := concat([0 for i in idivs], 2*wght);
zmodform := zsolve4ti2(level, idivs, rhs)$QEQEV;
zmodformzi := [members x(1..#divs) for x in zmodform.zinhom];
assertEquals(#zmodformzi, 138)

-- Sort the generating exponents according to the resulting
-- series expansion at the cusp $\infty$.

vdivs := vector(divs)$VZ; -- part of the Ligozat matrix that gives the order
vmodformgens := [vector x for x in zmodformzi];
vmodformgenss := sort((x1,x2)+->dot(vdivs,x1)<dot(vdivs,x2), vmodformgens);
rmodformgens := [members x for x in vmodformgenss];

-- # Check whether there is a $\mathbb{Q}$-linear combinationn of holomorphic eta-quotients of level 42 that is equal to $f_{21}$.

--$ sage: dimension_modular_forms(Gamma0(42),2)
--: 12
--- CGRDS(gens, cond) ==> _
---  matrix [cons(i, x) for r in gens for i in 1..#gens| (x := g YEQn r; cond)]
--- GRDS(gens) ==> CGRDS(gens, true)
emodformgens := [EQA1C r for r in rmodformgens];
[order x for x in emodformgens]

-- Although the dimension of the space of modular forms for
-- $\Gamma_0(42)$ of weight 2 is 12, we need to consider the
-- first 15 coefficients in order to ensure that we find a
-- solution.
--
-- For each of our generators we compute the first 15
-- coefficients and put it into a matrix `matmodforms`.

dimM42 := 12
ncoefs := 14
cmodformgens := [[coefficient(x, i) for i in 0..ncoefs] for x in emodformgens];
matmodforms := transpose matrix cmodformgens
assertEquals(rank matmodforms, dimM42)

-- The coefficients from $f_{21}$ that we want to obtain
-- by an integer-linear combination of the coefficient
-- vectors of the modular forms from above.

cf21 := [coefficient(f21, i) for i in 0..ncoefs]

-- Let us prepare the equation system that we want to solve.
--
-- Since we have transposed the coefficient matrix of the
-- modular form generators, we are first trying to find
-- an integer-linear combination of the colums of the matrix
-- `matmodforms`, i.e., we are looking for an integer vector
-- $v$ of length `ncols(matmodforms)` such that
-- `matmodformgens * v = cf21`

rels: VZ := new(nrows matmodforms, 0); -- means equality
zmodforms := zsolve(matmodforms, rels, vector cf21)$X4ti2;
zmodformszi := zmodforms.zinhom;
zmodformszf := zmodforms.zfree;
assertEquals(#zmodformszi,1)
assertEquals(#zmodformszf,126)

-- We are lucky. In the only particular (inhomogeneous) solution
-- there are only 5 entries different from 0.

zzi := first zmodformszi
iv := [[i, x] for i in 1..#zzi | (x := zzi.i; not zero? x)];
assertEquals(iv, [[54, -2], [58, -3], [59, 6], [79, 2], [130, 21]])

-- We have just found a relation for $f_{21}$ that has only
-- 5 terms.
--
-- Not surprisingly, we find that the linear combination that
-- we have just found does not only equal $f_{21}$ in the first
-- 15 coefficients, but in 500 coefficients.

u := emodformgens;
h := -2*u.54 -3*u.58 +6*u.59 +2*u.79 +21*u.130;
z0 := h - f21
assertEquals(removeDuplicates [coefficient(z0, i) for i in -10..500],[0])


-- # Reduce the number of terms

-- We do not stop here, but rather look for homogeneous
-- solution vectors that could bring down the number of terms
-- even more.

[cons(i, x) for i in 1..#zmodformszf |
    (x:=zmodformszf.i; not zero? x.54 and x.54 + x.79 = 0)]

-- Luckily, the 38th homogeneous solution is already quite appropriate,
-- since it has many entries that are the negation of our inhomogeneous
-- solution.

z := zmodformszf.38;
ivh := [[i, x] for i in 1..#z | (x := z.i; not zero? x)];
assertEquals(ivh, [[54,2],[57,-1],[58,3],[59,-6],[60,2],[79,-2],[100,1],[130,-21]])

-- If we add the homogeneous solution to the inhomogeneous one,
-- we get an inhomogeneous solution with only 3 terms.

z := zzi + zmodformszf.38
ivi := [[i, x] for i in 1..#z | (x := z.i; not zero? x)];
assertEquals(ivi, [[57, -1], [60, 2], [100, 1]])

u := emodformgens;
hh := -u.57 + 2*u.60 + u.100;
z0 := hh - f21
assertEquals(removeDuplicates [coefficient(z0, i) for i in -10..500],[0])

-- Show nicely

qsyms := indexedSymbols("Q", #rmodformgens);
xg21gens: List X1 C := [toX1(C, x, sy) for x in emodformgens for sy in qsyms];

xg21 := -xg21gens.57 + 2*xg21gens.60 + xg21gens.100
g21qpol := second(xg21)::PolC;
esyms := indexedSymbols("E", DIVISORS level);
dim: N := #esyms;
qsymsRZ := [monRZ x for x in rmodformgens];

g21polRZ := EVALRZ(qsyms, qsymsRZ, g21qpol);
g21 := rzToA1C g21polRZ;
z0 := g21 - f21;
assertEquals(order(z0, 301), 301)

rez g21polRZ

-- Find common denominator

minEntries(x: DZ, y: DZ): DZ == (_
    directProduct vector [min(x.i, y.i) for i in 1..#x]);

g21monsDZ := [degree mon for mon in monomials g21polRZ];

g21denDZ := - reduce(minEntries, g21monsDZ, 0$DZ)$List(DZ);
assertEquals(g21denDZ::VZ, vector [0,1,1,0,0,1,1,1])
g21denRZ := monomial(1, g21denDZ)$RZ;
g21numRZ := g21polRZ * g21denRZ;
rez g21numRZ
rez g21denRZ

fRZtoE(x: RZ): Pol(C) ==
  c := leadingCoefficient(x)
  dd := degree(x)
  divs := DIVISORS(42)
  esysm := indexedSymbols("E", divs)
  mon := reduce(_*, [(esyms.i::Pol(C))^(dd.i) for i in 1..#divs])
  c*mon
enumpol := ALGSUM(fRZtoE, g21numRZ);
assertEquals(enumpol,_
      E1^2        *E6^2*E7^2          *E42^3_
  -   E1  *E2^2*E3     *E7  *E14^2*E21*E42_
  + 2*E1  *E2     *E6^2     *E14^2*E21^3)

-- # Do the check of the relation in terms of modular functions

-- First we use the relation that we got from the
-- eta-quotients by reduction via the algebra basis.

fmpol
msymsRZ := [monRZ x for x in rgens42];
fpolRZ := EVALRZ(msyms42, msymsRZ, fmpol);
fm := rzToA1C fpolRZ;
z0 := fm - f
assertTrue(zero? z0)
assertEquals(order(z0, 301), 301)

-- Now we turn the relation polynomial for $f_{21}$ into
-- a relation for the corresponding modular function by
-- multiplication with the cofactor.

rfcofactorRZ := monRZ rfcofactor
gpolRZ := g21polRZ * monRZ rfcofactor;
g := rzToA1C gpolRZ;
assertTrue(zero?(g - f))
z0 := f - g21 * EQA1C rfcofactor;
assertTrue(zero? z0)
assertEquals(order(z0, 301), 301)

-- We want to make sure that also the expansions
-- at all cusps vanish (as they should).
-- Note that here we get the expansion of $f$ by
-- two different relations in eta-quotients
-- that we have found, one from the reduction by
-- the algebra basis and the other one by solving
-- a linear system for the coefficients of $f_{21}$.

level := 42; spitzen := cusps(level)$GAMMA0;
xiord := 24*level;
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
fmA42 := rzToAnCX fpolRZ;
gA42 := rzToAnCX gpolRZ
z0 := fmA42 - gA42
assertTrue(zero? z0)

-- +
-----------------------------------------------------------------
--endtest
-----------------------------------------------------------------
