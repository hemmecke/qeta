-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

-- This is a testfile for `src/qetafun.spad`.
-- It is also connected to \cite{Hemmecke:DancingSambaRamanujan:2018}
-- formulas (4), (5), (9).
--
-- https://www.sciencedirect.com/science/article/abs/pii/S0747717117300147
-- and
-- https://risc.jku.at/publications/download/risc_5338/DancingSambaRamanujan.pdf
--
-- To each formula corresponds an expression in eta functions.
-- Here we compute the expansion thereof not only at the cusp infinity
-- (which is given by (4), (5), (7)), but also at the other cusps of
-- $\Gamma_0(10)$, $\Gamma_0(14)$, $\Gamma_0(22)$.
-- The computation of such an expansion is given by $F_{r,s,m,t}$ (see
-- documentation in `src/qetafun.spad`).

--setup
C ==> Q
LX ==> L1 CX
--endsetup

)set mess type on

-------------------------------------------------------------------
--test:Ramanujan5
nn := 10 :: P;
mm := 5 :: P; s := [-1, 0]$List(Z)
m := 5 :: P;
spitzen := cusps(nn)$GAMMA0

mmdivs := DIVISORS mm
shat := sigmaInfinity(mmdivs, s)
orbs := [orb for tt in 0..m-1 | (orb := ORBIT(shat,m,tt); one? # orb)]
t := (first first orbs)::Z
assertEquals(t, 4)

r := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularGamma0
assertEquals(r, [6,0,-5,0])

minroot := 60 :: P
yf := etaQuotient(nn, r, mm, s, m, t)$YMSETAQ;
xiord := minimalRootOfUnity(yf)::P
assertEquals(xiord, minroot)
CX := UnityRootExtension(C, xiord)
xi := generator()$CX
f :=  yf::MSETAQ(C, CX);
mf := expansions(f)::MODFUNX(CX)
-- compare result with formula (4) from
-- \cite{Hemmecke:DancingSambaRamanujan:2018}
-- Note that mf comes with the cofactor given by r. So we also must
-- multiply the right-hand side. That then equals to the constant 5.
minusfive := (-5)*1$MODFUNX(CX)
assertTrue zero?(mf+minusfive)
--endtest

-------------------------------------------------------------------
--test:Ramanujan7
nn := 14 :: P;
mm := 7 :: P; s := [-1, 0]$List(Z);
m := 7 :: P;
spitzen := cusps(nn)$GAMMA0

mmdivs := DIVISORS mm
shat := sigmaInfinity(mmdivs, s)
orbs := [orb for tt in 0..m-1 | (orb := ORBIT(shat,m,tt); one? # orb)]
t := (first first orbs) :: N
assertEquals(t, 5)

r := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularGamma0 --: List Z
assertEquals(r,  [7, 1, 0, - 7])

minroot := 168 :: P

-- TODO:
-- c := etaCoFactor(m, mm, nn, t, s)$QEtaCoFactor
-- vector r - (c.particular - 20*c.basis.3)(1..4) -- [0,0,1,0]
-- vector r = (c.particular + 2*c.basis.2 - 22*c.basis.3)(1..4) -- [8,0,-7,0]

yf := etaQuotient(nn, r, mm, s, m, t)$YMSETAQ;
xiord := minimalRootOfUnity yf
assertEquals(xiord, minroot)
CX := UnityRootExtension(C, xiord)
xi := generator()$CX

modfunx x ==> expansions(x::MSETAQ(C, CX))::MODFUNX(CX)
mf := modfunx yf;

-- compare result with formula (5) from
-- \cite{Hemmecke:DancingSambaRamanujan:2018}
-- Note that mf comes with the cofactor given by r. So we also must
-- multiply the right-hand side by that eta-quotient. It gives rise to
-- the (-7)*seven below for the second term on the rhs of (5).
-- The first term on the rhs of (5) turns into the eta-quotient for mm=7
-- given by the vector [4, -4].

y1 := etaQuotient(nn,[3,1, 3,-7],mm,[0,0],1,0)$YMSETAQ;
y2 := etaQuotient(nn,[-1,1,7,-7],mm,[0,0],1,0)$YMSETAQ;

rhs := 7*modfunx(y1)+49*modfunx(y2)
assertTrue(zero?(mf - rhs))
--endtest

-- +
-------------------------------------------------------------------
--test:Ramanujan7_4-4
-------------------------------------------------------------------
-- -

-- Check that the sifted computation equals modular computation as prefactor.

nn := 14 :: P;
mm := 7 :: P;
xiord := 168
CX := UnityRootExtension(C, xiord)
xi := generator()$CX

eqx1 := table()$XHashTable(Q, LX)
eqx2 := table()$XHashTable(Q, LX)
spitzen := cusps(nn)$GAMMA0
for cusp in spitzen repeat
  w := WIDTH0(nn, denom cusp) --: P
  gamma := cuspToMatrix(nn, cusp)$GAMMA0 --: SL2Z
  y1 := etaQuotient(nn,[0,0, 0,0],mm,[4,-4],1,0,gamma)$YMSETAQG
  y2 := etaQuotient(nn,[4,0,-4,0],mm,[0, 0],1,0,gamma)$YMSETAQG
  p1 := puiseux(y1, w)$SETAQG(Q, CX)
  p2 := puiseux(y2, w)$SETAQG(Q, CX)
  eqx1.cusp := laurent p1
  eqx2.cusp := laurent p2

m1 := eqx1 :: MODFUNX(CX)
m2 := eqx2 :: MODFUNX(CX)
assertTrue(zero?(m1 - m2)) -- check different construction of m1 and m2.
--endtest

-- +
-------------------------------------------------------------------
--test:Ramanujan11
-------------------------------------------------------------------
-- -

nn := 22 :: P;
--nn: P := 11; r: List Z := [0, 1]
--nn: P := 22; r: List Z := [-10,10,-9,10]
mm := 11 :: P; s := [-1, 0]$List(Z)
m := 11 :: P;
spitzen := cusps(nn)$GAMMA0

mmdivs := DIVISORS mm
shat := sigmaInfinity(mmdivs, s) --: Z
orbs := [orb for tt in 0..m-1 | (orb := ORBIT(shat,m,tt); one? # orb)]
t := (first first orbs)::N
assertEquals(t, 6)

r := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularGamma0 --: List Z
assertEquals(r, [10, 2, 11, -22])

minroot := 264 :: P;
yf := etaQuotient(nn, r, mm, s, m, t)$YMSETAQ;
xiord:= minimalRootOfUnity(yf) :: P
assertEquals(xiord, minroot)
CX := UnityRootExtension(C, xiord)
xi := generator()$CX
f := yf::MSETAQ(C, CX);
mf := expansions(f)::MODFUNX(CX)


-- compare result with formula (9) from
-- \cite{Hemmecke:DancingSambaRamanujan:2018}

-- The $M_1, \ldots, M_7$ from \cite{Hemmecke:DancingSambaRamanujan:2018}.

nndivs := DIVISORS nn
rgens := [_
  [- 1,   1, 11, - 11],_
  [- 4,   8,  4,  - 8],_
  [  7, - 3,  3,  - 7],_
  [- 2,   6,  6, - 10],_
  [  0,   4,  8, - 12],_
  [  2,   2, 10, - 14],_
  [  4,   0, 12, - 16]]$List(List Z)

assertEquals(rgens, etaQuotientMonoidExponentVectors nn)

ygens := [etaQuotient(nn,r,mm,[0,0],1,0)$YMSETAQ for r in rgens];
mgens := [x::MSETAQ(C, CX) for x in ygens];
M := [expansions(x)::MODFUNX(CX) for x in mgens];
F ==> mf
X n ==> n * 1$MODFUNX(CX)

repr := 11*(_
  11*3068*M.7_
  + 11*(3*M.3 + X 4236)*M.6_
  + (285*M.3+X(11*5972))*M.5_
  + 1/8*(M.3^2+11*4497*M.3+X(11^2*3156))*M.1_
  + (1867*M.3+X(11*2476))*M.4_
  + (-1/8)*(M.3^3+1011*M.3^2+11*6588*M.3+X(11^2*10880)));

ZERO := F - repr;

assertTrue zero? ZERO
--endtest

-- +
-------------------------------------------------------------------
--test:RamanujanInfinity5
-------------------------------------------------------------------
-- -

nn := 10 :: P; mm := 1 :: P; r := [-1]$List(Z); m := 5 :: P; t: N := 4;
s := etaCoFactorInfinity(nn, mm, r, m, t)$QEtaModularGamma0
yf := etaQuotient(nn, s, mm, r, m, t)$YMSETAQ;
xiord := minimalRootOfUnity(yf)::P
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi)
fn := (expansions(yf::MSETAQ(C, CX))(1/nn))::A1(CX)
f1 := modularSiftedEtaQuotientInfinity(nn, s, mm, r, m, t)$QETAMG0I(CX)
assertTrue(zero?(f1 - fn))

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -
