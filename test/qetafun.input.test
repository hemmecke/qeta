-- This is a testfile for src/qetafun.spad.
-- It is also connected to \cite{Hemmecke:DancingSambaRamanujan:2018}
-- formulas (4), (5), (9).
-- sciencedirect.com/science/journal/07477171
-- risc.jku.at/publications/download/risc_5338/DancingSambaRamanujan.pdf
-- To each formula corresponds an expression in eta functions.
-- Here we compute the expansion thereof not only at the cusp infinity
-- (which is given by (4), (5), (7)), but also at the other cusps of
-- \Gamma_0(10), \Gamma_0(14), \Gamma_0(22).
-- The computation of such an expansion is given by F_{r,s,m,t} (see
-- documentation in src/qetafun.spad).

--setup
B ==> Boolean
S ==> Symbol;
MZ ==> Matrix Z -- consider only 2x2 matricies
SL2Z ==> MZ -- matrices with determinant = 1

EZ ==> Expression Z;
expr x ==> x :: S :: EZ;

INTF ==> IntegerNumberTheoryFunctions
DIVISORS m ==>  [qcoerce(d)@P for d in divisors(m)$INTF]

C ==> Q

PQ ==> SparseUnivariatePolynomial Q;

CX ==> SimpleAlgebraicExtension(Q, PQ, pq);
LX ==> UnivariateLaurentSeries(CX, xsym, 0);
QAuxMEQ ==> QAuxiliaryModularEtaQuotientPackage;
YMSETAQ ==> SymbolicModularSiftedEtaQuotient;
SETAQG ==> SiftedEtaQuotientGamma(Q, mx, CX, xi, LX);
MSETAQ ==> ModularSiftedEtaQuotient(Q, mx, CX, xi, LX);
MODFUNX ==> ModularFunctionExpansions(CX, LX, nn);
-------------------------------------------------------------------
WIDTH(nn, c) == qcoerce(width(nn, c))@P
xsym: Symbol := "x"::Symbol;
-------------------------------------------------------------------
lift2Q x ==> map(coerce, x)$SparseUnivariatePolynomialFunctions2(Z, Q)
-------------------------------------------------------------------
--endsetup

-------------------------------------------------------------------
--test:Ramanujan5
nn: P := 10; r: List Z := [6,0,-5,0];
mm: P := 5; s: List Z := [-1, 0]
m: P := 5; t: N := 4;
minroot: P := 60
yf: YMSEQ := etaQuotient(nn, r, mm, s, m, t)
mx: P := minRootOfUnity yf
assertEquals(mx, minroot)
pq: PQ := lift2Q(cyclotomic(mx)$CyclotomicPolynomialPackage);
xi := generator()$CX
f: MSETAQ :=  expandAtAllCusps yf;
mf: MODFUNX := expansions(f)::MODFUNX
-- compare result with formula (4) from
-- \cite{Hemmecke:DancingSambaRamanujan:2018}
-- Note that meqx comes with the cofactor given by r, so we also must
-- multiply the right-hand side equals to the constant 5.
minusfive: MODFUNX := (-5)*1$MODFUNX
assertTrue zero?(mf+minusfive)
--endtest

-------------------------------------------------------------------
--test:Ramanujan7
nn: P := 14; r: List Z := [8,0,-7,0];
mm: P := 7; s: List Z := [-1, 0];
m: P := 7; t: N := 5;
minroot: P := 168

--TODO:
-- c := etaCoFactor(m, mm, nn, t, s)$QEtaKolberg
-- vector r - (c.particular - 20*c.basis.3)(1..4) -- [0,0,1,0]
-- vector r = (c.particular + 2*c.basis.2 - 22*c.basis.3)(1..4) -- [8,0,-7,0]

yf: SymbolicModularSiftedEtaQuotient := etaQuotient(nn, r, mm, s, m, t)
mx: P := minRootOfUnity yf
assertEquals(mx, minroot)
pq: PQ := lift2Q(cyclotomic(mx)$CyclotomicPolynomialPackage);
xi := generator()$CX
f: MSETAQ :=  expandAtAllCusps yf;
mf: MODFUNX := expansions(f)::MODFUNX

-- compare result with formula (5) from
-- \cite{Hemmecke:DancingSambaRamanujan:2018}
-- Note that meqx comes with the cofactor given by r, so we also must
-- multiply the right-hand side by that eta-quotient. It gives rise to
-- the (-7)*seven below for the second term on the rhs of (5).
-- The first term on the rhs of (5) turns into the eta-quotient for mm=7
-- given by the vector [4, -4].

eqx1: XHashTable(Q, LX) := table()
eqx2: XHashTable(Q, LX) := table()
for cusp in cusps yf repeat (_
  w: P := WIDTH(nn, denom cusp);_
  gamma: SL2Z := cuspToMatrix(nn, cusp)$QAuxMEQ;_
  y1: YMSETAQG := etaQuotient(nn,[0,0, 0,0],mm,[4,-4],1,0,gamma);_
  y2: YMSETAQG := etaQuotient(nn,[4,0,-4,0],mm,[0, 0],1,0,gamma);_
  p1: SETAQG := puiseux(y1, w);_
  p2: SETAQG := puiseux(y2, w);_
  eqx1.cusp := expansion p1;_
  eqx2.cusp := expansion p2_
  )

m1: MODFUNX := eqx1 :: MODFUNX
m2: MODFUNX := eqx2 :: MODFUNX
assertTrue(zero?(m1 + (-1)*m2)) -- check different construction of m1 and m2.

seven: MODFUNX := 7*1$MODFUNX
rhs: MODFUNX := (-7)*(m1+seven)
assertTrue(zero?(mf + rhs))
--endtest

-------------------------------------------------------------------
--test:Ramanujan11
nn: P := 22; r: List Z := [10, 2, 11, -22]
--nn: P := 11; r: List Z := [0, 1]
--nn: P := 22; r: List Z := [-10,10,-9,10]
mm: P := 11; s: List Z := [-1, 0]
m: P := 11; t: N := 6;
minroot: P := 264;
yf: SymbolicModularSiftedEtaQuotient := etaQuotient(nn, r, mm, s, m, t)
mx: P := minRootOfUnity yf
assertEquals(mx, minroot)
pq: PQ := lift2Q(cyclotomic(mx)$CyclotomicPolynomialPackage);
xi := generator()$CX
f: MSETAQ :=  expandAtAllCusps yf;
mf: MODFUNX := expansions(f)::MODFUNX


-- compare result with formula (9) from
-- \cite{Hemmecke:DancingSambaRamanujan:2018}

-- The M_1, ..., M_7 from \cite{Hemmecke:DancingSambaRamanujan:2018}.
nndivs := DIVISORS nn
rgens: List List Z := [_
  [7, -3,  3,  -7],_
  [-4, 8,  4,  -8],_
  [-2, 6,  6, -10],_
  [-1, 1, 11, -11],_
  [0,  4,  8, -12],_
  [2,  2, 10, -14],_
  [4,  0, 12, -16]]

assertEquals(rgens, xetaQuotientMonoidExponentVectors nn)

ygens: List YMSETAQ := [etaQuotient(nn,r,mm,[0,0],1,0)$YMSETAQ for r in rgens];
mgens: List MSETAQ := [expandAtAllCusps(x)$MSETAQ for x in ygens];
M: List MODFUNX := [expansions(x)::MODFUNX for x in mgens];
F ==> mf
X n ==> n * 1$MODFUNX

repr := 11^2*3068*M.7_
      + 11^2*(3*M.1 + X 4236)*M.6_
      + 11*(285*M.1+X(11*5972))*M.5_
      + 11/8*(M.1^2+11*4497*M.1+X(11^2*3156))*M.4_
      + 11*(1867*M.1+X(11*2476))*M.3_
      + (- 11/8)*(M.1^3+1011*M.1^2+11*6588*M.1+X(11^2*10880));

ZERO := F + (-1)*repr;

assertTrue zero? ZERO
--endtest

)fin
















--TODO: Find a "better" r-vector that makes
-- sum(g for cusp in cusps | (g := qetaGrade(F,cusp))>0) is minimal.

-- v = p + x1*v1 + x2*v2 + x3*v3

res := etaCoFactor(m, mm, nn, t, s)
res.particular + 10 * res.basis.1 - 5* (res.basis.2 -res.basis.3)

pp := (res.particular).(1..4)
vv := pp - vector r
mat := transpose matrix [x(1..4) for x in res.basis]
VZ ==> Vector Z

diophantineSystem(mat, vv)$SmithNormalForm(Z, VZ, VZ, MZ)

------------

gamma := gammas.2
w := width(nn, gamma(2,1))
eq1 := etaQuotientOrbitProduct(mm, mmdivs, s, m, t, gamma, w)$SEQG
eq2 := coEtaQuotient(nn, nndivs, r, gamma, w)$SEQG
expansion eq1 * expansion eq2

-- Consider the order of the the cofactor (without the (c\tau+d) factor)
-- at each cusp in terms of q^(1/w) where w=width(nn,gamma(2,1)).
yeq := [etaQuotient(nn, nndivs, r, gamma)$YEQG for gamma in gammas]
vr := vector r
yeq1 := [xExponent(y)$YEQG for y in yeq]

-------------------------------------------------------------------

yeqlg := [[(etaQuotient(mm, mmdivs, s, m, t, lambda, gamma)$YSEQLG) for lambda in 0..10] for gamma in gammas]
yeqlg1 := [[width(nn, (gamma$YSEQLG)(y)(2,1)) * qExponent(y)$YSEQLG for y in yeql] for yeql in yeqlg]


mats := [matrix [[1, lambda],[0,m]] * gamma for lambda in 0..10]
smats := [splitMatrix(mat, 1) for mat in mats]
