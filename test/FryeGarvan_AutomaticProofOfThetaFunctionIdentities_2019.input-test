-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input )quiet

-- # Problem formulation


-- This worksheet contains some formulas and computations from
-- the following article.
--
--     @InCollection{FryeGarvan_AutomaticProofOfThetaFunctionIdentities_2019,
--       author =       {Jie Frye and Frank Garvan},
--       title =        {Automatic Proof of Theta-Function Identities},
--       booktitle =    {Elliptic Integrals, Elliptic Functions and Modular
--                       Forms in Quantum Field Theory},
--       publisher =    {Springer International Publishing},
--       address =      {Cham},
--       crossref =     {BluemleinSchneiderPaule_EllipticIntegrals_2019},
--       isbn =         {978-3-030-04480-0},
--       doi =          {10.1007/978-3-030-04480-0_10},
--       url =          {https://link.springer.com/chapter/10.1007/978-3-030-04480-0_10},
--       pages =        {195--258}
--     }

-- # Init

-- +
-------------------------------------------------------------------
--setup
-------------------------------------------------------------------

-- +
)set mess type off
)set mess time off
C ==> Q

QF ==> QFunctions(Q, L1 Q)
QFX ==> QFunctions(CX, L1 CX)
jf ==> jacobiFunction $ QF
ef ==> eulerFunction $ QF
gep ==> generalizedEulerProduct $ QF
one(n: Z): Q == 1

)read convenience.input )quiet

L ==> L1 C
TX ==> T1 CX
LX ==> L1 CX
PX ==> QEtaPuiseuxSeries CX

puiex ==> puiseuxExpansion $ QESXM(C, CX, MOD1)

)set mess type on
)set mess time on

-- +
-------------------------------------------------------------------
--endsetup
-------------------------------------------------------------------

)set output algebra on
)set output formatted off

-- # Eta-Quotient relation in level 8

-- +
-------------------------------------------------------------------
--test:eq8rel
-------------------------------------------------------------------
-- -

-- We have taken the following relation from the website
-- https://www.risc.jku.at/people/hemmecke/eta/etarelations/etarels8.input
-- and check whether it holds for all cusps of $\Gamma_1(8)$.
-- $$E_4^{12} - E_1^4 E_2^2 E_4^2 E_8^4 - 4 E_2^4 E_8^8=0$$
-- In order to check we turn the equation into an identity of
-- modular functions of $\Gamma_1(8)$ by dividing the whole
-- equation by $E_4^12$, i.e. we check
-- $$1 - E_1^4 E_2^2 E_4^{-10} E_8^4 - 4 E_2^4 E_4^{-12} E_8^8 = 0$$.

nn := mm := 8;
rspec1 := eqSPEC(mm, []);
rspec2 := eqSPEC(mm, [[1,4],[2,2],[4,-10],[8,4]]);
rspec3 := eqSPEC(mm, [[2,4],[4,-12],[8,8]]);

y1 := specYM0EQ rspec1; xiord1 := minimalRootOfUnity(y1)::P;
y2 := specYM0EQ rspec2; xiord2 := minimalRootOfUnity(y2)::P;
y3 := specYM0EQ rspec3; xiord3 := minimalRootOfUnity(y3)::P;
xiord := lcm[xiord1,xiord2,xiord3]
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
spitzen := cusps(y1)

a1 := expandM0AnCX y1;
a2 := expandM0AnCX y2;
a3 := expandM0AnCX y3;
assertTrue(zero?(a1 - a2 - 4*a3))

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- # Rogers-Ramanujan functions

-- \begin{align}
-- G(q)
-- &=
-- \sum_{n=0}^\infty \frac{q^{n^2}}{(q;q)_n}
-- =
-- \prod_{n=0}^\infty \frac{1}{(1-q^{5n+1})(1-q^{5n+4})}
-- \\
-- H(q)
-- &=
-- \sum_{n=0}^\infty \frac{q^{n(n+1)}}{(q;q)_n}
-- =
-- \prod_{n=0}^\infty \frac{1}{(1-q^{5n+2})(1-q^{5n+3})}
-- \end{align}

-- ## Ramanujan identity (1.2)

-- +
-------------------------------------------------------------------
--test:Rogers-Ramanujan-1-2
-------------------------------------------------------------------
-- -

-- \begin{align}
-- H(q) G(q)^{11}-q^2 G(q) H(q)^{11}
-- &=
-- 1 + 11 G(q)^6 H(q)^6
-- \tag{1.2}
-- \end{align}


-- Check Pochhammer relations with eta-quotient and Jacobi function
-- computation.

z1 := expansion specEQI(C) eqSPEC([[5,1,-11],[5,2,-1]]);
z2 := gep(5, [1,4])^(-11) * gep(5,[2,3])^(-1);
assertEquals(order(z1 - z2, 200), 200)


jinvG:=jf(one,5,1);
jinvH:=jf(one,5,2);
pochGH := eulerExpansion(specEQI(C) eqSPEC(5, [0,12]))$EQI(C);
jjp := jinvG^(-11) *jinvH^(-1) * pochGH;
assertEquals(order(z1 - jjp,200),200)


-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- ## Ramanujan identity (1.3)

-- +
-------------------------------------------------------------------
--test:Rogers-Ramanujan-1-3
-------------------------------------------------------------------
-- -

-- \begin{align}
-- H(q) G(q^11)-q^2 G(q) H(q^{11})
-- &=
-- 1
-- \tag{1.3}
-- \end{align}

G := inv jf(one,5,1) * ef 5; -- (q  ,q^4;q^5)
H := inv jf(one,5,2) * ef 5; -- (q^2,q^3;q^5)
l1 := multiplyExponents(G, 11) * H;
l2 := monomial(1,2)$L * G * multiplyExponents(H,11);
assertEquals(order(l1 - l2 - 1, 100), 100)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- ## Ramanujan identity (1.5)

-- +
-------------------------------------------------------------------
--test:Rogers-Ramanujan-1-5
-------------------------------------------------------------------
-- -

-- \begin{align}
-- \frac{1}{\eta_{5;1}(\tau)^{11} \eta_{5;2}(\tau)}
-- -
-- \frac{1}{\eta_{5;1}(\tau) \eta_{5;2}(\tau)^{11}}
-- &=
-- 1 + 11 \frac{\eta(5\tau)^6}{\eta(\tau)^6}
-- \tag{1.5}
-- \end{align}
--
-- We check this identity at all cusps of $\Gamma_1(5)$.

nn := mm := 5
rspec1 := eqSPEC([[5,1,-11], [5,2, -1]])
assertTrue(modularGamma1? rspec1)
rspec2 := eqSPEC([[5,1, -1], [5,2,-11]])
assertTrue(modularGamma1? rspec2)
rspec3 := eqSPEC([[1,-6],[5,6]])
assertTrue(modularGamma1? rspec3)

y1 := specYM1EQ rspec1;
xiord1 := minimalRootOfUnity(y1)::P
y2 := specYM1EQ rspec2;
xiord2 := minimalRootOfUnity(y2)::P
y3 := specYM1EQ rspec3;
xiord3 := minimalRootOfUnity(y3)::P
xiord := lcm[xiord1,xiord2,xiord3]
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
spitzen := cusps(y1)

a1 := expandM1AnCX y1
a2 := expandM1AnCX y2
a3 := expandM1AnCX y3
a1 - a2 - (1$An(CX) + 11 * a3)
assertTrue(zero?(a1 - a2 - (1$An(CX) + 11 * a3)))



-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- ## Ramanujan identity (1.6)

-- +
-------------------------------------------------------------------
--test:Rogers-Ramanujan-1-6
-------------------------------------------------------------------
-- -

-- \begin{align}
-- \frac{1}{\eta_{5;1}(11\tau) \eta_{5;2}(\tau)}
-- -
-- \frac{1}{\eta_{5;1}(\tau) \eta_{5;2}(11\tau)}
-- &=
-- 1
-- \tag{1.6}
-- \end{align}

nn := mm := 5;
rspeceta51 := eqSPEC [[5,1,1]]; assertTrue(not modularGamma1? rspeceta51);
rspeceta52 := eqSPEC [[5,2,1]]; assertTrue(not modularGamma1? rspeceta52);
id := matrix [[1,0],[0,1]];
yeta51 := specYEQG(rspeceta51,id); xiord1 := minimalRootOfUnity(yeta51)::P;
yeta52 := specYEQG(rspeceta52,id); xiord2 := minimalRootOfUnity(yeta52)::P;
xiord := lcm[xiord1,xiord2]
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
spitzen := cuspsM1 nn

p1 := puiex(yeta51); -- eta_{5,1} -- Puiseux expansion
p2 := puiex(yeta52); -- eta_{5,2}
px1 := multiplyExponents(inv p1, 11) * inv p2;
px2 := inv p1 * multiplyExponents(inv p2,11);
assertEquals(order(px1-px2-1, 50),50)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------


-- ## Ramanujan identity (1.6) in level $11\cdot 5$

-- +
-------------------------------------------------------------------
--test:Rogers-Ramanujan-1-6-11
-------------------------------------------------------------------
-- -

-- \begin{align}
-- \frac{1}{\eta_{55;11}(\tau) \eta_{5;2}(\tau)}
-- -
-- \frac{1}{\eta_{5;1}(\tau) \eta_{55;22}(\tau)}
-- &=
-- 1
-- \tag{1.6}
-- \end{align}

-- +
nn: P := 55
rspec1 := eqSPEC [[55,11,-1],[5,2,-1]]; assertTrue(modularGamma1? rspec1)
rspec2 := eqSPEC [[5,1,-1],[55,22,-1]]; assertTrue(modularGamma1? rspec2)

y1 := specYM1EQ(rspec1); xiord1 := minimalRootOfUnity(y1)::P;
y2 := specYM1EQ(rspec2); xiord2 := minimalRootOfUnity(y2)::P;
xiord := lcm[xiord1,xiord2]
-- -

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
spitzen := cusps(y2)

a1 := expandM1AnCX y1;
a2 := expandM1AnCX y2;
assertTrue(zero?(a1-a2-1$An(CX)))

pgrds := [-order puiex(y1 c) * widthM1(nn, c) for c in spitzen]
lgrds := qetaGrades a1
assertEquals(pgrds, lgrds)

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- # Rogers-Ramanujan analogue in level 13

-- +
-------------------------------------------------------------------
--test:Rogers-Ramanujan-1-7
-------------------------------------------------------------------
-- -

-- \begin{align}
-- \frac{1}{\eta_{13;1,3,4}(\tau)^{3} \eta_{13;2,5,6}(\tau)}
-- -
-- \frac{1}{\eta_{13;1,3,4}(\tau) \eta_{13;2,5,6}(\tau)^3}
-- &=
-- 1 + 3 \frac{\eta(13\tau)^2}{\eta(\tau)^2}
-- \tag{1.7}
-- \end{align}
--
-- We check this identity at all cusps of $\Gamma_1(13)$.

-- +
rspec1 := eqSPEC [[13,1,-3],[13,3,-3],[13,4,-3],[13,2,-1],[13,5,-1],[13,6,-1]];
rspec2 := eqSPEC [[13,1,-1],[13,3,-1],[13,4,-1],[13,2,-3],[13,5,-3],[13,6,-3]];
rspec3 := eqSPEC [[1,-2],[13,2]];
assertTrue(modularGamma1? rspec1)
assertTrue(modularGamma1? rspec2)
assertTrue(modularGamma1? rspec3)

y1 := specYM1EQ rspec1; xiord1 := minimalRootOfUnity(y1)::P;
y2 := specYM1EQ rspec2; xiord2 := minimalRootOfUnity(y2)::P;
y3 := specYM1EQ rspec3; xiord3 := minimalRootOfUnity(y3)::P;
xiord := lcm[xiord1,xiord2,xiord3]
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
spitzen := cusps(y1)
-- -

a1 := expandM1AnCX y1;
a2 := expandM1AnCX y2;
a3 := expandM1AnCX y3;
assertTrue(zero?(a1 - a2 - (1$An(CX) + 3 * a3)))

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- # Rogers-Ramanujan analogue in level $3\cdot 13$

-- +
-------------------------------------------------------------------
--test:Rogers-Ramanujan-1-8
-------------------------------------------------------------------
-- -

-- \begin{align}
-- \frac{1}{\eta_{39;3,9,12}(\tau) \eta_{13;2,5,6}(\tau)}
-- -
-- \frac{1}{\eta_{13;1,3,4}(\tau) \eta_{39;6,15,18}(\tau)}
-- &=
-- 1 + 3 \frac{\eta(13\tau)^2}{\eta(\tau)^2}
-- \tag{1.8}
-- \end{align}
--
-- We check this identity at all cusps of $\Gamma_1(39)$.

rspec1:=eqSPEC [[39,3,-1],[39,9,-1],[39,12,-1],[13,2,-1],[13,5,-1],[13,6,-1]]
rspec2:=eqSPEC [[13,1,-1],[13,3,-1],[13,4,-1],[39,6,-1],[39,15,-1],[39,18,-1]]
rspec3:=eqSPEC(39, [[1,-2],[13,2]])
assertTrue(modularGamma1? rspec1)
assertTrue(modularGamma1? rspec2)
assertTrue(modularGamma1? rspec3)

y1 := specYM1EQ rspec1; xiord1 := minimalRootOfUnity(y1)::P;
y2 := specYM1EQ rspec2; xiord2 := minimalRootOfUnity(y2)::P;
y3 := specYM1EQ rspec3; xiord3 := minimalRootOfUnity(y3)::P;
xiord := lcm[xiord1,xiord2,xiord3]
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
spitzen := cusps(y1)

a1 := expandM1AnCX y1;
a2 := expandM1AnCX y2;
a3 := expandM1AnCX y3;
assertTrue(zero?(a1 - a2 - 1$An(CX)))

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
-- -

-- # Ramanujan identity (2.19)

-- +
-------------------------------------------------------------------
--test:Ramanujan-2-19
-------------------------------------------------------------------
-- -

-- \begin{align}
-- \frac{\eta(\tau)^2}{\eta(25\tau)}
-- &=
-- \frac{\eta_{25;10}(\tau)}{\eta_{25,5}(\tau)}
-- -
-- 1
-- -
-- \frac{\eta_{25;5}(\tau)}{\eta_{25,10}(\tau)}
-- \tag{2.19}
-- \end{align}
--
-- We check this identity at all cusps of $\Gamma_1(25)$.

rspec1 := eqSPEC [[1,1],[25,-1]];
rspec2 := eqSPEC [[25,5,-1],[25,10, 1]];
rspec3 := eqSPEC [[25,5, 1],[25,10,-1]];
assertTrue(modularGamma1? rspec1)
assertTrue(modularGamma1? rspec2)
assertTrue(modularGamma1? rspec3)

y1 := specYM1EQ rspec1; xiord1 := minimalRootOfUnity(y1)::P;
y2 := specYM1EQ rspec2; xiord2 := minimalRootOfUnity(y2)::P;
y3 := specYM1EQ rspec3; xiord3 := minimalRootOfUnity(y3)::P;
xiord := lcm[xiord1,xiord2,xiord3]
EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi);
spitzen := cusps(y1)

a1 := expandM1AnCX y1;
a2 := expandM1AnCX y2;
a3 := expandM1AnCX y3;
assertTrue(zero?(a1 - a2 + a3 + 1$An(CX)))

for c in spitzen repeat (_
  p1 := puiex y1 c;_
  p2 := puiex y2 c;_
  p3 := puiex y3 c;_
  px := p1 - p2 + p3 + 1;_
  assertEquals(order(px,10),10))

-- +
-------------------------------------------------------------------
--endtest
-------------------------------------------------------------------
