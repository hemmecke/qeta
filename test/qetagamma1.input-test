-- -*- coding: utf-8 -*-
-- Via jupytext this file can be shown as a jupyter notebook.

)read /home/hemmecke/g/qeta/input/jfricas-test-support.input

--setup
CUSPS1 ==> cusps $ GAMMA1
--endsetup

--test:cuspsOfGamma1
-- Explicitly listing cusps for N=1 to N=40.
cusps40 := [_
  [1],_
  [1,1/2],_
  [1,1/3],_
  [1,1/2,1/4],_
  [1,1/2,1/5,2/5],_
  [1,1/2,1/3,1/6],_
  [1,1/2,1/3,1/7,2/7,3/7],_
  [1,1/2,1/3,1/4,1/8,3/8],_
  [1,1/2,1/3,2/3,1/4,1/9,2/9,4/9],_
  [1,1/2,1/3,1/4,1/5,2/5,1/10,3/10],_
  [1,1/2,1/3,1/4,1/5,1/11,2/11,3/11,4/11,5/11],_
  [1,1/2,1/3,2/3,1/4,3/4,1/5,1/6,1/12,5/12],_
  [1,1/2,1/3,1/4,1/5,1/6,1/13,2/13,3/13,4/13,5/13,6/13],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,2/7,3/7,1/14,3/14,5/14],_
  [1,1/2,1/3,2/3,1/4,1/5,2/5,3/5,4/5,1/6,5/6,1/7,1/15,2/15,4/15,7/15],_
  [1,1/2,1/3,1/4,3/4,1/5,1/6,1/7,1/8,3/8,1/16,3/16,5/16,7/16],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/17,2/17,3/17,4/17,5/17,6/17,7/17,8/17],_
  [1,1/2,1/3,2/3,1/4,1/5,1/6,5/6,1/7,1/8,1/9,2/9,4/9,1/18,5/18,7/18],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/19,2/19,3/19,4/19,5/19,6/19,7/19,_
   8/19,9/19],_
  [1,1/2,1/3,1/4,3/4,1/5,2/5,3/5,4/5,1/6,1/7,1/8,3/8,1/9,1/10,3/10,1/20,_
   3/20,7/20,9/20],_
  [1,1/2,1/3,2/3,1/4,1/5,1/6,5/6,1/7,2/7,3/7,4/7,5/7,6/7,1/8,1/9,2/9,1/10,_
   1/21,2/21,4/21,5/21,8/21,10/21],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,2/11,3/11,4/11,5/11,1/22,_
   3/22,5/22,7/22,9/22],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/23,2/23,3/23,4/23,5/23,_
   6/23,7/23,8/23,9/23,10/23,11/23],_
  [1,1/2,1/3,2/3,1/4,3/4,1/5,1/6,5/6,1/7,1/8,3/8,5/8,7/8,1/9,2/9,1/10,1/11,_
   1/12,5/12,1/24,5/24,7/24,11/24],_
  [1,1/2,1/3,1/4,1/5,2/5,3/5,4/5,1/6,1/7,1/8,1/9,1/10,3/10,7/10,9/10,1/11,_
   1/12,1/25,2/25,3/25,4/25,6/25,7/25,8/25,9/25,11/25,12/25],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/12,1/13,2/13,3/13,4/13,_
   5/13,6/13,1/26,3/26,5/26,7/26,9/26,11/26],_
  [1,1/2,1/3,2/3,1/4,1/5,1/6,5/6,1/7,1/8,1/9,2/9,4/9,5/9,7/9,8/9,1/10,1/11,_
   1/12,5/12,1/13,1/27,2/27,4/27,5/27,7/27,8/27,10/27,11/27,13/27],_
  [1,1/2,1/3,1/4,3/4,1/5,1/6,1/7,2/7,3/7,4/7,5/7,6/7,1/8,3/8,1/9,1/10,1/11,_
   1/12,7/12,1/13,1/14,3/14,5/14,1/28,3/28,5/28,9/28,11/28,13/28],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/12,1/13,1/14,1/29,2/29,_
   3/29,4/29,5/29,6/29,7/29,8/29,9/29,10/29,11/29,12/29,13/29,14/29],_
  [1,1/2,1/3,2/3,1/4,1/5,2/5,3/5,4/5,1/6,5/6,1/7,1/8,1/9,2/9,1/10,3/10,_
   7/10,9/10,1/11,1/12,5/12,1/13,1/14,1/15,2/15,4/15,7/15,1/30,7/30,11/30,_
   13/30],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/12,1/13,1/14,1/15,1/31,_
   2/31,3/31,4/31,5/31,6/31,7/31,8/31,9/31,10/31,11/31,12/31,13/31,14/31,_
   15/31],_
  [1,1/2,1/3,1/4,3/4,1/5,1/6,1/7,1/8,3/8,5/8,7/8,1/9,1/10,1/11,1/12,7/12,_
   1/13,1/14,1/15,1/16,3/16,5/16,7/16,1/32,3/32,5/32,7/32,9/32,11/32,13/32,_
   15/32],_
  [1,1/2,1/3,2/3,1/4,1/5,1/6,5/6,1/7,1/8,1/9,2/9,1/10,1/11,2/11,3/11,4/11,_
   5/11,6/11,7/11,8/11,9/11,10/11,1/12,5/12,1/13,1/14,1/15,2/15,1/16,1/33,_
   2/33,4/33,5/33,7/33,8/33,10/33,13/33,14/33,16/33],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/12,1/13,1/14,1/15,1/16,_
   1/17,2/17,3/17,4/17,5/17,6/17,7/17,8/17,1/34,3/34,5/34,7/34,9/34,11/34,_
   13/34,15/34],_
  [1,1/2,1/3,1/4,1/5,2/5,3/5,4/5,1/6,1/7,2/7,3/7,4/7,5/7,6/7,1/8,1/9,1/10,_
   3/10,7/10,9/10,1/11,1/12,1/13,1/14,3/14,5/14,9/14,11/14,13/14,1/15,_
   2/15,4/15,8/15,1/16,1/17,1/35,2/35,3/35,4/35,6/35,8/35,9/35,11/35,_
   12/35,13/35,16/35,17/35],_
  [1,1/2,1/3,2/3,1/4,3/4,1/5,1/6,5/6,1/7,1/8,3/8,1/9,2/9,4/9,5/9,7/9,8/9,_
   1/10,1/11,1/12,5/12,7/12,11/12,1/13,1/14,1/15,2/15,1/16,3/16,1/17,1/18,_
   5/18,7/18,1/36,5/36,7/36,11/36,13/36,17/36],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/12,1/13,1/14,1/15,1/16,_
   1/17,1/18,1/37,2/37,3/37,4/37,5/37,6/37,7/37,8/37,9/37,10/37,11/37,_
   12/37,13/37,14/37,15/37,16/37,17/37,18/37],_
  [1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/12,1/13,1/14,1/15,1/16,_
   1/17,1/18,1/19,2/19,3/19,4/19,5/19,6/19,7/19,8/19,9/19,1/38,3/38,5/38,_
   7/38,9/38,11/38,13/38,15/38,17/38],_
  [1,1/2,1/3,2/3,1/4,1/5,1/6,5/6,1/7,1/8,1/9,2/9,1/10,1/11,1/12,5/12,_
   1/13,2/13,3/13,4/13,5/13,6/13,7/13,8/13,9/13,10/13,11/13,12/13,1/14,_
   1/15,2/15,1/16,1/17,1/18,5/18,1/19,1/39,2/39,4/39,5/39,7/39,8/39,10/39,_
   11/39,14/39,16/39,17/39,19/39],_
  [1,1/2,1/3,1/4,3/4,1/5,2/5,3/5,4/5,1/6,1/7,1/8,3/8,5/8,7/8,1/9,1/10,_
   3/10,7/10,9/10,1/11,1/12,7/12,1/13,1/14,1/15,2/15,4/15,8/15,1/16,_
   3/16,5/16,7/16,1/17,1/18,1/19,1/20,3/20,7/20,9/20,1/40,3/40,7/40,9/40,_
   11/40,13/40,17/40,19/40]]
for cs in cusps40 for nn in 1..40 repeat
    assertEquals(cusps(nn)$GAMMA1, cs)
--endtest

--test:numberOfCuspsOfGamma1
vals := [1, 2, 2, 3, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 16, 14, 16, 16,_
         18, 20, 24, 20, 22, 24, 28, 24, 30, 30, 28, 32, 30, 32, 40, 32,_
         48, 40, 36, 36, 48, 48, 40, 48, 42, 50, 64, 44, 46, 56, 60, 56]

for level in 1..#vals for n in vals repeat
    assertEquals(numberOfCusps(level)$GAMMA1, n)
--endtest

--test:numberOfCuspsOfGamma1-eq
for level in 1..200 repeat
    assertEquals(numberOfCusps(level)$GAMMA1, # CUSPS1 level)
--endtest

-- +
--test:genusOfGamma1
-- -

genusVals := [0,0,0,0,0,0,0,0,0,0,1,0,2,1,1,2,5,2,7,3,5,6,12,5,12,10,_
              13,10,22,9,26,17,21,21,25,17,40,28,33,25,51,25,57,36,41,_
              45,70,37,69,48,65,55,92,52,81,61,85,78,117,57,126,91,97,_
              93,121,81,155,105,133,97,176,97, 187,136,145,136,181,121,_
              222,137,190,171,247,133,225,190,225,181,287,153,265,210,_
              261,231,289,193,345,235,281,231]

for level in 1..#genusVals for g in genusVals repeat
    assertEquals(genus(level)$GAMMA1, g)
--endtest

-- +
--test:nu2OfGamma1
-- -
vals := [1,1,0,0,0,0,0,0,0,0]
for level in 1..#vals for n in vals repeat
    assertEquals(nu2(level)$GAMMA1, n)

--endtest

-- +
--test:nu3OfGamma1
-- -
vals := [1,0,1,0,0,0,0,0,0,0]
for level in 1..#vals for n in vals repeat
    assertEquals(nu3(level)$GAMMA1, n)
--endtest

-- +
--test:normalizeCusp
-- -

normcusps := [_
  [[[[nn]]],_
   [[ [(a/c), normalizeCusp(nn,a,c)$GAMMA1] for a in 1..c | one? gcd(a,c)] _
    for c in 1..nn]_
  ] for nn in 1..10]

expected := _
[[[[[1]]], [[[1, 1]]]],_
 [[[[2]]], [[[1, 1]], [[1/2, 1/2]]]],_
 [[[[3]]], [[[1, 1]], [[1/2, 1]], [[1/3, 1/3], [2/3, 1/3]]]],_
 [[[[4]]],_
  [[[1, 1]], [[1/2, 1/2]], [[1/3, 1], [2/3, 1]], [[1/4, 1/4], [3/4, 1/4]]]],_
 [[[[5]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/2], [2/3, 1/2]],_
   [[1/4, 1], [3/4, 1]],_
   [[1/5, 1/5], [2/5, 2/5], [3/5, 2/5], [4/5, 1/5]]]],_
 [[[[6]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/3], [2/3, 1/3]],_
   [[1/4, 1/2], [3/4, 1/2]],_
   [[1/5, 1], [2/5, 1], [3/5, 1], [4/5, 1]],_
   [[1/6, 1/6], [5/6, 1/6]]]],_
 [[[[7]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/3], [2/3, 1/3]],_
   [[1/4, 1/3], [3/4, 1/3]],_
   [[1/5, 1/2], [2/5, 1/2], [3/5, 1/2], [4/5, 1/2]],_
   [[1/6, 1], [5/6, 1]],_
   [[1/7, 1/7], [2/7, 2/7], [3/7, 3/7], [4/7, 3/7], [5/7, 2/7], [6/7, 1/7]]]],_
 [[[[8]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/3], [2/3, 1/3]],_
   [[1/4, 1/4], [3/4, 1/4]],_
   [[1/5, 1/3], [2/5, 1/3], [3/5, 1/3], [4/5, 1/3]],_
   [[1/6, 1/2], [5/6, 1/2]],_
   [[1/7, 1], [2/7, 1], [3/7, 1], [4/7, 1], [5/7, 1], [6/7, 1]],_
   [[1/8, 1/8], [3/8, 3/8], [5/8, 3/8], [7/8, 1/8]]]],_
 [[[[9]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/3], [2/3, 2/3]],_
   [[1/4, 1/4], [3/4, 1/4]],_
   [[1/5, 1/4], [2/5, 1/4], [3/5, 1/4], [4/5, 1/4]],_
   [[1/6, 2/3], [5/6, 1/3]],_
   [[1/7, 1/2], [2/7, 1/2], [3/7, 1/2], [4/7, 1/2], [5/7, 1/2], [6/7, 1/2]],_
   [[1/8, 1], [3/8, 1], [5/8, 1], [7/8, 1]],_
   [[1/9, 1/9], [2/9, 2/9], [4/9, 4/9], [5/9, 4/9], [7/9, 2/9], [8/9, 1/9]]]],_
 [[[[10]]],_
  [[[1, 1]],_
   [[1/2, 1/2]],_
   [[1/3, 1/3], [2/3, 1/3]],_
   [[1/4, 1/4], [3/4, 1/4]],_
   [[1/5, 1/5], [2/5, 2/5], [3/5, 2/5], [4/5, 1/5]],_
   [[1/6, 1/4], [5/6, 1/4]],_
   [[1/7, 1/3], [2/7, 1/3], [3/7, 1/3], [4/7, 1/3], [5/7, 1/3], [6/7, 1/3]],_
   [[1/8, 1/2], [3/8, 1/2], [5/8, 1/2], [7/8, 1/2]],_
   [[1/9, 1], [2/9, 1], [4/9, 1], [5/9, 1], [7/9, 1], [8/9, 1]],_
   [[1/10, 1/10], [3/10, 3/10], [7/10, 3/10], [9/10, 1/10]]]]]

assertEquals(normcusps, expected)

for nn in 1..30 repeat _
  for c in 1..nn repeat for a in 1..c | one? gcd(a,c) repeat _
    assertTrue(equivalentCusps?(nn,a/c, normalizeCusp(nn, a, c)$GAMMA0)$GAMMA0)

--+
--endtest
