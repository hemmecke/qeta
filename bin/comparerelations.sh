#!/bin/bash

function usage {
    echo "Usage:"
    echo "  comparerelations.sh N FILE1 FILE2 [--12] [--21]"
    cat <<EOF

The script reads the files FILE1 and FILE2 corresponding. It assumes that
FILE1 and FILE2 eache defines a variables of the same name as the filename.
This variable is supposed to hold a list of polynomials in the E variables
of level N.

If option --12 is given, it outputs a the content of FILE1 (as f variables)
and the contents of FILE2 as g variables. Then it reduces the f variables
by the g variables It outputs fi - \sum cij*gj - ri where ri is the reductum
of the i-th reduction. Such relations express ideal membership in the ideal
generated by FILE2.

Option --21 behaves like --12 just with the roles of FILE1 and FILE2
exchanged. (But still the f (FILE1) and g (FILE2) variables in the original
sense.

Furthermore, true (false) is output if the lists in FILE1 and FILE2 agree
(do not agree).

The output is written to stdout.
EOF
}

function fricas_program {
    LEVEL=$1
    FILE1=$2
    FILE2=$3
    F=$4
    G=$5
    COMMENT12=$6
    COMMENT21=$7
    if test -z "$COMMENT12" -o -z "$COMMENT21"; then
        COMMENT="";
    else
        COMMENT="";
    fi
    cat <<EOF
)set message prompt none
)read etacompute )quiet
level := $LEVEL
)read $FILE1
)read $FILE2

divs: List Z := divisors(level)\$IntegerNumberTheoryFunctions
syms: LSym := indexedSymbols("E", divs)\$QAuxiliaryTools
dim: N := #syms
D ==> HomogeneousDirectProduct(dim, N);
V ==> Vector R
X ==> Record(poly: R, repr: V, mult: C)
toR ==> coerce\$PolynomialConversion(C, E, syms)

f: List R := [toR p for p in $F]
g: List R := [toR p for p in $G]

printRelations(fdim: N, fsyms: LSym, f: List R, _
               gdim: N, gsyms: LSym, g: List R): Void == (_
    ldim := fdim + gdim;_
    lsyms := concat(fsyms, gsyms);_
    DX := DirectProduct(ldim, N);_
    EX := Monomials(ldim, N, DX, lsyms);_
    RX := PolynomialRing(R, EX);_
    fvars: List RX := [monomial(1, unitVector(i::P)\$EX)\$RX for i in 1..fdim];_
    gvars: List RX := [monomial(1, unitVector(fdim+i::P)\$EX)\$RX for i in 1..gdim];_
    for fvar in fvars for p in f repeat (_
        x: X := reduce(p, g)\$ExtendedPolynomialReduction(C, E, R);_
        rx: RX := x.mult * fvar - x.poly * 1\$RX; _
        v: V := x.repr;_
        for i in 1..gdim for gvar in gvars repeat rx := rx - v.i * gvar; _
        display77(rx :: OF)));

fdim: N := #f;
gdim: N := #g;

fsyms: LSym := indexedSymbols("f", fdim)\$QAuxiliaryTools;
gsyms: LSym := indexedSymbols("g", gdim)\$QAuxiliaryTools;

"-- relations1 = relations2 --"::Symbol::OF
vPrint("tdeg1", [totalDegree p for p in f]);
vPrint("tdeg2", [totalDegree p for p in g]);
vPrint("lenghts", [#f, #g]);

c: Boolean := (f=g)@Boolean; d: Boolean := not c;
vPrint("equal", c);

C X ==> if not c then X else void();

${COMMENT}C("-- eta relations 1 --"::Symbol::OF)
${COMMENT}C(for i in 1..#f for p in f repeat vPrint(concat("f", string i), p));

${COMMENT}C("-- eta relations 2 --"::Symbol::OF)
${COMMENT}C(for i in 1..#g for p in g repeat vPrint(concat("g", string i), p));

${COMMENT12}C("-- relations 1 by 2 --"::Symbol::OF)
${COMMENT12}C printRelations(fdim, fsyms, f, gdim, gsyms, g);

${COMMENT21}C("-- relations 2 by 1 --"::Symbol::OF)
${COMMENT21}C printRelations(gdim, gsyms, g, fdim, fsyms, f);

EOF
}

# default values
if test "$#" -lt 3; then usage; exit 1; fi

N=$1;     shift;
FILE1=$1; shift;
FILE2=$1; shift;
F=`basename $FILE1 .input`
G=`basename $FILE2 .input`

COMMENT12="--";
COMMENT21="--";
while (( "$#" )); do
    param=$1
    case $param in
        --12)
            COMMENT12=""
            ;;
        --21)
            COMMENT21=""
            ;;
    esac
    shift
done

echo [CMD=comparerelations][N=$N][F=$F][G=$G]

if test -z "$N"; then usage; exit 1; fi

fricas_program $N $FILE1 $FILE2 $F $G "$COMMENT12" "$COMMENT21" | fricas -nosman
