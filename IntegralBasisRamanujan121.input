-- # Compute integral basis for $M^\infty(121)$

-- Compute integral basis for N=121 by adding to the generators of the
-- eta quotients of level 121 having only poles at infinity the
-- p(11n+6) generating series and a series coming from the trace of a
-- modular eta quotient for N=242 of order -15.

-- ## Init

)clear completely
)set output linear on
)set output algebra off
)cd /home/hemmecke/g/qeta/tmp
)set mess type off

)r projectlibs )quiet
)r etamacros.input )quiet
C ==> Q;
CF ==> CF1 C
X ==> X1 C

)r ../input/tracemacros )quiet

F1Z ==> F1 Z
abmap(A, B, x) ==> _
  map((c: A): B +-> c::B, x)$Finite0SeriesFunctions2(A, B, 'q, 'q, 0, 0)
zcmap(x) ==> abmap(Z, C, x)

)set mess time on
)set mess type on
)set output linear on
)set output algebra off
)set stream calculate 2

nn: P := 121; -- level
nndivs := DIVISORS nn;

-- We do expansion at the cusp $i\infty$ which corresponds to $1/N$ or to `1/nn` in terms of our session variables.

QEQMEV ==> QEtaQuotientMonoidExponentVectors4ti2
eqmev ==> etaQuotientMonoidExponentVectors $ QEQMEV
rgens := eqmev nn;
eqgens := [retract(etaQuotient(nndivs, r)$ETA C) for r in rgens]

-- ## Samba with T and M2

-- The generators of the $\eta$-quotients of level 121 are given by these exponents for the $\eta$ functions (with arguments being the divisors of 121).
-- The variable `rgens` corresponds to the generators of $R^\infty(121)$.

xgens := [toX1(C, eqgens.1, 'T), toX1(C, eqgens.2, 'M2)]

-- We take a minimal (in terms the order in q) element from the generators and make it special.b
-- Then we compute an algebra basis for $C[T,M_2]$.

xt: X := xgens.1

xab := samba(xt, xgens, 0, onet1Step!)$QXSAMBA1(C)
# basis xab, [qetaGrade x for x in basis xab]

-- Let's set new variables for each series in the basis.

xtt := toX1(C, first xt, T);
bsyms := indexedSymbols("B", # basis xab);
xabbasis := [toX1(C, first x, s) for x in basis xab for s in bsyms];
grades := [qcoerce(qetaGrade x)@P for x in xabbasis]
nog := numberOfGaps(qetaGrade xt, grades)
genus := genusOfGamma0 121
xabb := samba(xtt, xabbasis, nog, onet1Step!)$QXSAMBA1(C)

-- With this number of gaps (96), we have not yet reached the
-- genus of the modular curve. Thus we must find another modular
-- function.

-- # Series U: N=242, r=[6, - 3, - 1, 1, 5, - 8]

-- We can generate a new modular function by applying the trace to
-- a modular function from $M^\infty(242)$.

-- ## Atkin-Lehner involution $W_2^{242}$

-- The trace
-- $\mathrm{tr}_{121}^{242}: M^\infty(242) \to M^\infty(121)$
-- is given through the Atkin-Lehner involution.
-- See, for example, \cite{Kohnen:WeierstrassPointsAtInfinity:2004}.
--
-- In our case we have
-- $$f|\mathrm{tr}_{121}^{242} = f + 2 f|W_2^{242}|U_2$$
-- where 
-- $$
-- W_2^{242}=
-- \begin{pmatrix}
-- 2 & -1\\
-- 242 & -120
-- \end{pmatrix}
-- $$
-- is given below and $U_2$ is the operator described
-- in `qetafun.spad`.
--
-- We can split $W_2^{242}$ into an element of $SL_2(\mathbb{Z})$
-- and a triangular matrix.

alw := matrix [[2, -1], [242, -120]]
sm := splitMatrix(alw(1,1), alw(1,2), alw(2,1), alw(2,2))
gamma := sm.red;

-- The second matrix just corresponds to going from $\tau$ to $2\tau$.

w := WIDTH(242, gamma(2,1))

-- The width of the matrix Atkin-Lehner involution $W_2^{242}$ is 2,
-- so the resulting series will be in $q^{1/w}$ which together with
-- the above $\tau\mapsto 2\tau$ neutalizes and we can simply read
-- the resulting series as a series in $q$.

-- ## Series coming from $N=242$

-- Since we can only compute with series coming from eta quotients, we
-- temporarily switch to level 242 and take the trace of a series from
-- there.

divs242 := DIVISORS 242;
rgens242 := etaQuotientMonoidExponentVectors(242)$QEQMEV
egens242 := [(retract etaQuotient(divs242, r)$ETA(Z))::F1(C) for r in rgens242];
[qetaGrade(x) for x in egens242]

-- For all the series we compute that we need at most a second root of unity, i.e. we continue our computation in $C=\mathbb{Q}$.

[minimalRootOfUnity etaQuotient(242, divs242, r, gamma) for r in rgens242]

CX := Q;
xiord := 2;
xi := -1; -- a second root of unity

-- We have tried to compute the algebra basis for N=121 with
-- the addition of one of the series coming from the N=242
-- generators and found that the eta quotient corresponding to
-- the third vector, namely $(6, -3, -1, 1, 5, -8)$ works best
-- in the sense that it yields a basis with number of gaps equal
-- to 6 whereas for other indices we get bases with a higher
-- number of gaps.
--
-- $1 = (-1, 2, 0, 0, 1, -2) \to 8$,
-- $2 = (0, 0, 7, -3, 3, -7) \to 31$,
-- $3 = (6, -3, -1, 1, 5, -8) \to 6$,
-- $4 = (0, 0, -4, 8, 4, -8) \to 31$,
-- $5 = (7, -3, -1, 1, 4, -8) \to 6$.

-- Thus, we have chosen the third vector which gives a
-- series of order -55.

r242   := rgens242.3
eqt242 := egens242.3

-- Below we use the functions from `qetafun.spad`.

-- Since internally the computation of `eqt242` is done by a different function, we first check that we optain the same result when the transformation is the identity matrix.

idgamma: SL2Z := matrix [[1,0],[0,1]];
yeq242: YETAQG := etaQuotient(242, divs242, r242, idgamma);
modular? yeq242

eq242 := (expansion(etaQuotient(yeq242)$ETAQG))::F1(C)

zero?(eqt242-eq242)

yeq242g: YETAQG := etaQuotient(242, divs242, r242, gamma);
eq242g := (expansion(etaQuotient(yeq242g)$ETAQG))::F1(C)

-- Now we apply the $U_2$ operator.

ordu2eq242g := (order(eq242g)/2)::Z -- series starts at this order
u2eq242g := choose((n: Z): Z +-> 2*n, eq242g, ordu2eq242g)

-- Similar computation with other (sifted) domain.
-- This is another check that we have no bug in the
-- implementation.

yseq242g: YSETAQG := etaQuotient(242, divs242, r242, 1, 0, gamma);
seq242g := puiseux(yseq242g, w)$SETAQG

-- Due to implementation as Laurent series, the above series is computed with $q$ standing for $q^{24}$. The result, however, says (den=24) that we should consider it as a series in $q=(q^{24})^{1/24}$.

-- We additionally apply the $U_2$ operator (factor 2 below).

eseq242g := expansion(seq242g)
ordseq242g := (order eseq242g / 24 / 2)::Z
u2seq242g := choose((n: Z): Z +-> 2*24*n, eseq242g, ordseq242g)::F1(C)

[coefficient(u2eq242g - u2seq242g, i) for i in 0..100]

-- u2eq242g represents $f|W_2^{242}|U_2$.

-- Now we compute $f + 2 f|W_2^{242}|U_2$.

cftraceeq242 := (eq242 + 2*u2eq242g)::CF

xu: X := toX1(C, cftraceeq242, 'U);

-- ## `cfuab`=Samba($t, u \cup `xab`$)

-- Now we can add this element to the algebra basis computed earlier
-- and hope that we end with a algebra basis for all modular functions
-- of level 121, i.e., $M^\infty(121)$.

cft := first xtt
cfabbasis := [first x for x in basis xab];
cftracebas := cons(cftraceeq242, cfabbasis)


genus

cfuab := samba(cft, cftracebas, genus, cfonet1Step!)$QSAMBA1(C);


cfuab

grades := [qcoerce(qetaGrade x)@P for x in basis cfuab]
nog := numberOfGaps(qetaGrade xt, grades)

-- ## xuab=Samba($t, \{m_2,u\}$)

xtracebas := [xtt, xgens.2, xu]


xuab := samba(xtt, xtracebas, genus, onet1Step!)$QXSAMBA1(C);


# basis xuab
grades := [qcoerce(qetaGrade x)@P for x in basis xuab]
numberOfGaps(qetaGrade xtt, grades)

-- ## Denominator polynomial for $u$ with respect to `xab`

-- We try to find a polynomial $p(t)$ such that .. see below.

e1:=29; e2:=129
rs := [reduce(xt^e1*xu, xab)$QXRED(C)];
for i in e1+1..e2 repeat (_
  print(i);_
  rs := cons(reduce(xt*first(rs), xab)$QXRED(C), rs))
rs := reverse! rs;
[qetaGrade x for x in rs]
[variables(second(x)::Pol(C)) for x in rs]
[coefficient(second(x)::Pol C, U, 1) for x in rs]

l := [[qetaCoefficient(first x, i) for i in 0..191] for x in rs];

-- Extract the 192 coefficients corresponding to the orders $-191, \ldots, 0$ and compute the kernel of the corresponding matrix.

mat := transpose matrix l;
[nrows mat, ncols mat]
ns := nullSpace mat;
#ns

-- Extract the coefficients from the vector in the nullspace.

cs := members first ns;

-- Check that the resulting vector indeed yields a relation.

lincomp := [c*rr for c in cs for rr in rs];
lc := reduce(_+, lincomp);
zero? lc
qetaCoefficient(lc, 0)

-- Indeed, we have just shown a relation for
-- $t^{39}u-h_{39}, \ldots, t^{129}u-h_{129}$.
--
-- In the second component of this "zero" is it's relation in terms of $U, $$M_1$, and $M_2$.
-- The "denominator polynomial" is given by the coefficient of $U$.

p := (second lc)::Pol C;
variables p
[degree(p, x) for x in variables p]

-- ### Computation of the corresponding polynomials $p_0,..,p_4$

-- In order to find the respective cofactors to the $c_1$
-- from above, we must do the whole computation with
-- different attached values, namely $T$, and $M2$
-- for the elements in basis `xab`.

c1:=coefficient(p,U,1);
c0:=coefficient(p,U,0);

variables c0
vars := reverse! rest variables c0
c0s := [coefficient(c0, x, 1) for x in vars];
degree(c1, T), [degree(x, T) for x in c0s]
gcd cons(c1,c0s)

-- Apart from the $t^{39}$ factor, we get other factors.

fl := factorList factor c1;
[x.exponent for x in fl]
flfactors := [x.factor for x in fl]

-- ## Try to reduce the order -15 element that comes from level 242

r242_1 := rgens242.1

eqt242_1 := (retract etaQuotient(divs242, r242_1)$ETA(Z))::F1(C)

yeq242_1g: YETAQG := etaQuotient(242, divs242, r242_1, gamma);
eq242_1g := (expansion(etaQuotient(yeq242_1g)$ETAQG))::F1(C);

ordu2eq242_1g := (order(eq242_1g)/2)::Z
u2eq242_1g := choose((n: Z): Z +-> 2*n, eq242_1g, ordu2eq242_1g)

cftraceeq242_1 := (eqt242_1 + 2*u2eq242_1g)::CF

xu_1 := toX1(C, cftraceeq242_1, 'U1)
xr_1 := reduce(xu_1, xuab)$QXRED(C);
zero? xr_1
[coefficient(first(xr_1)::F1(C), i) for i in -30..30]

-- Note that the `zero?` function only tests negative coefficients. That is not sufficient here, otherwise we could "prove" that some function is a modular functio for $\Gamma_0(121)$ when it is actually not.

xu_u := toX1(C, eqt242_1, 'UU)
xr_u := reduce(xu_u, xuab)$QXRED(C);
zero? xr_u
[coefficient(first(xr_u)::F1(C), i) for i in -30..3]

-- However, we see it more easily by reducing the product with
-- $t$ by the algebra basis.

xr_tu := reduce(xt*xu_u, xuab)$QXRED(C);
first xr_tu
zero? xr_tu

-- # Series F: $p(11n+6)$ generating series

-- Now we consider an additional series. Here we take the series corresponding to the $p(11n+6)$ problem.

mm: P := 11; s: List Z := [-1, 0]; m: P := 11;
mmdivs: List P := DIVISORS mm
shat: Z := sigmaInfinity(mmdivs, s)
orbs := [orb for tt in 0..m-1 | (orb := orbit(shat,m,tt); one? # orb)]
t: N := first first orbs
r: List Z := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularFunctionTools

ps: F1Z := partitionSeries(1)$QFunctions(Z, F1Z)
r11: F1Z := choose((n: Z): Z +-> m*n+t, ps, 0) -- p(11n+6)

expectedGrade := qetaGrades(nn, r, mm, s, m, t).(1/nn)
eqcf11 := etaQuotient(nndivs, r)$EtaQuotient(Z, F1Z); --cofactor for r11
qfactor := ((qetaGrade series eqcf11)-expectedGrade)*24 - prefactor eqcf11
fcf11 := retract(q24(qfactor)$EtaQuotient(Z, F1Z) * eqcf11)
fzf := r11 * fcf11; -- modular f with integer coefficients
ff := zcmap fzf; -- modular f with coefficients in C, i.e. living in F1
xf := toX1(C, ff, F)

-- The generating series does not reduce to zero modulo the
-- algebra basis `xab`, but it does modulo the basis `xuab`.

-- +
xr := reduce(xf, xab)$QXRED(C);
zero? xr

xfr := reduce(xf, xuab)$QXRED(C);
zero? xfr
-- -

-- Note the the relation looks pretty ugly. Coefficients are too big.

-- ## Compute denominator polynomial for integral basis

-- We only need the coefficients of the pricipal part of
-- $t^{37} f-h_{37}, \ldots, t^{102}f-h_{102}$
-- where $h_i \in \langle 1, b_1, b_2, b_3, b_4 \rangle_{C[t]}$
-- in order to find a relation among these $q$-series.
--
-- Note that $t$ corresponds to our variable `tex` and $b_1,\ldots,b_4$ to our basis `abex`.
--
-- Then $t^i f - h_i$ corresponds to `reduce(xtt^i xf, xtt, xabb)`.
--
-- Note that the result $r$ contains in its second component its representation in terms of the given $F$, and the $B_i$.

e1:=37; e2:=102
rs := [reduce(xt^e1*xf, xabb)$QXRED(C)];
for i in e1+1..e2 repeat (_
  print(i);_
  rs := cons(reduce(xtt*first(rs), xabb)$QXRED(C), rs))
rs := reverse! rs;
[qetaGrade x for x in rs]

[coefficient(second(x)::Pol C, F, 1) for x in rs]

-- Extract the 192 coefficients corresponding to the orders $-191, \ldots, 0$ and compute the kernel of the corresponding matrix.

l := [[qetaCoefficient(first x, i) for i in 0..191] for x in rs];
mat := transpose matrix l;
ns := nullSpace mat;
#ns

-- Extract the coefficients from the vector in the nullspace.

cs := members first ns;

-- Check that the resulting vector indeed yields a relation.

lincomp := [c*rr for c in cs for rr in rs];
lc := reduce(_+, lincomp);
zero? lc

qetaCoefficient(lc, 0)

-- Indeed, we have just shown a relation for
-- $t^{37} f-h_{37}, \ldots, t^{102}f-h_{102}$.
--
-- In the second component of this "zero" is it's relation in terms of $F, $$M_1$, and $M_2$.
-- The "denominator polynomial" is given by the coefficient of $F$.

pf := (second lc)::Pol C;
variables pf
[degree(pf, x) for x in variables pf]

-- ### Computation of the corresponding polynomials $p_0,..,p_4$

-- In order to find the respective cofactors to the $c1$ from above, we must do the whole computation with different attached values, namely T, and B1, B2, B3, B4, for the elements in basis `ab`.

c1f:=coefficient(pf,F,1);
c0f:=coefficient(pf,F,0);

variables c0f
vars := reverse! rest variables c0f
c0fs := [coefficient(c0f, x, 1) for x in vars];
degree(c1f, T), [degree(x, T) for x in c0fs]
gcd cons(c1f,c0fs)

-- Apart from the $t^{37}$ factor, we get other factors.

flf := factorList factor c1f;

[x.exponent for x in flf]
flffactors := [x.factor for x in flf]

-- There is one factor that is not already a factor of `c1f`.

[x for x in flfactors | not member?(x, flffactors)]

-- # Compute a new basis with the $f$ added

cft := first xtt
cff := first xf
cfabbasis := [first x for x in xabbasis]
-- We know already that the number of gaps will be 31.
cffab := samba(cft, cons(cff, cfabbasis), 31, cfonet1Step!)$QSAMBA1(C);
grades := [qcoerce(qetaGrade x)@P for x in basis cffab]
nog := numberOfGaps(qetaGrade xt, grades)

-- # Add f-expansion at 1 instead of $\infty$





-- END basis for M^\infty(121)




































-- -----------------------------------------------------------------
-- # Investigate another $f_2
-- $ whose generating series corresponds to $c(11n+1)$

-- The first $f$ had used the parameter $s=(-1,0)$.

s

-- Now we use a function corresponding to the vector $s_2 =(-2,0)$.
-- As can be seen below, that function already lives in the module generated by $F$ and the original generators $M_1$ and $M_2$.

s2 := [-2,0]
shat2: Z := sigmaInfinity(mmdivs, s2)
orbs2 := [orb for tt in 0..m-1 | (orb := orbit(shat2,m,tt); one? # orb)]
t2: N := first first orbs2
r2: List Z := etaCoFactorInfinity(nn, mm, s2, m, t2)$QEtaModularFunctionTools

ps2: LZ := ps^2
r112: LZ := choose((n: Z): Z +-> m*n+t2, ps2, 0)
ecfz2 := etaQuotient(nndivs, r2)$EtaQuotient(Z, LZ)

expectedGrade := qetaGrades(nn, r2, mm, s2, m, t2).(1/nn)
qfactor2 := ((qetaGrade series ecfz2)-expectedGrade)*24 - prefactor ecfz2

pf2Z := retract(q24(qfactor2)$EtaQuotient(Z, LZ) * ecfz2);
fe2z := r112 * pf2Z;
fe2 := zcmap fe2z;
f2x: X := xembed(fe2, F)

r2x: X := reduce(f2x, tx, abfx);
zero? r2x

-- -----------------------------------------------------------------
-- # Yet another try with $f_{11}$ corresponding to $p(121n+116)$

mm: P := 121; s: List Z := [-1, 0, 0]; m: P := 121;
mmdivs: List P := DIVISORS mm
shat: Z := sigmaInfinity(mmdivs, s)
orbs := [orb for tt in 0..m-1 | (orb := orbit(shat,m,tt); one? # orb)]
t: N := first first orbs
r: List Z := etaCoFactorInfinity(nn, mm, s, m, t)$QEtaModularFunctionTools


r121: LZ := choose((n: Z): Z +-> m*n+t, ps, 0)
ecfz121 := etaQuotient(nndivs, r)$EtaQuotient(Z, LZ)

expectedGrade := qetaGrades(nn, r, mm, s, m, t).(1/nn)
qfactor121 := ((qetaGrade series ecfz121)-expectedGrade)*24 - prefactor ecfz121

pf121Z := retract(q24(qfactor121)$EtaQuotient(Z, LZ) * ecfz121);
fe121z := r121 * pf121Z;
fe121 := zcmap fe121z;
f121x: X := xembed(fe121, F121)

-- We reduce first by `abx` and only then by `abfx`.

red121 := reduce(first f121x, first tx, [first x for x in abx]);
red121f := reduce(red121, first tx, [first x for x in abfx]);
zero? red121f

-- r11x: X := reduce(f11x, tx, abfx);
-- zero? r11x
























-- -----------------------------------------------------------------
-- # Algebraic Curve setup

h := etaQuotientIdealGenerators(nn, rgens)$QEtaIdeal(C, L0);
variables h
#h
gb := groebner(h);

dis := eval(discriminant(first gb, M2), M1=T);

disfl := factorList factor dis;
#disfl

[x.exponent for x in disfl]
[degree(x.factor, T) for x in disfl]
disflfactors := [x.factor for x in disfl]

(flfactors = [disflfactors.i for i in [1,2,3,4,7,8]])@Boolean

-- Additional factors in the discriminant.

disflfactors.5,disflfactors.6





-- -----------------------------------------------------------------
-- ## Try with built-in AlgebraicFunctionField

U ==> UnivariatePolynomial('M1, Q)
UU ==> UnivariatePolynomial('M2, Fraction U)
modulus: UU := gb.1::UU;
AFF ==> AlgebraicFunctionField(Q, U, UU, modulus)

basis()$AFF

1--genus()$AFF

1--integralBasis()$AFF

-- Maybe our denominator comes from the fact that our basis is not given in terms of
-- $[1, M_2, M_2^2, M_2^3, M_2^4]$ but in the following representation.

[second x for x in abex]

[reduce((xeqgens.2)^i, tex, [tex]) for i in 1..4]



reduce((xeqgens.2)^2, tex, [tex])
