-------------------------------------------------------------------
-- General macros for the compuation with eta quotions in the QEta package
-------------------------------------------------------------------

OF==>OutputForm
dbgPrint(x,y) ==> display(([x::OF, y::OF]$List(OF)::OF)::Formatter(Format1D))
vPrint(x,y)==>display(hconcat([x::Symbol::OF, ":="::Symbol::OF, y::OF]$List(OF))::Formatter(Format1D))

-------------------------------------------------------------------
N ==> NonNegativeInteger
P ==> PositiveInteger
Z ==> Integer
Q ==> Fraction Z
MZ ==> Matrix Z -- consider only 2x2 matricies
SL2Z ==> MZ -- matrices with determinant = 1

LSym ==> List Symbol

INTF ==> IntegerNumberTheoryFunctions
DIVISORS m ==>  [qcoerce(d)@P for d in divisors(m)$INTF]

-------------------------------------------------------------------
-- The following macros are parametrized by the coefficient domain C.
-------------------------------------------------------------------
-- related to Gröbner basis computation
-- The domain D (DirectProduct) has to be set to specify the term order.
-- The list of variables have to be given through `syms`.
Pol C  ==> Polynomial C
LPol C  ==> List Pol C

QAuxMEQ ==> QAuxiliaryModularEtaQuotientPackage;
WIDTH(nn, c) == qcoerce(width(nn, c)$QAuxMEQ)@P

-------------------------------------------------------------------
-- The type of laurent series that we use for expansion.
-- Should be possible to replace this with SparseUnivariateLaurentSeries.
-- However, our series are dense anyway.
-------------------------------------------------------------------
-- related to computation with eta quotients having poles only at infinity
L1 C  ==> UnivariateLaurentSeries(C, 'q, 0);
A1 C ==> Finite0Series(C, 'q, 0) -- actual computation domain
ETA C  ==> EtaQuotient(C, A1 C)
CA1 C ==> QEtaAlgebraCachedPower(C, A1 C) -- computation domain (cached)
CPol C ==> QEtaAlgebraCachedPower(C, Pol C) -- computation pols in (cached)
X1 C ==> QEtaExtendedAlgebra(C, CA1 C, CPol C)
toX1(C, a, b) ==> embed(a::CA1(C), b::CPol(C))$X1(C)

-- We always use CachedPower versions
QAB1 C ==> QEtaAlgebraBasis(C, CA1 C)
QTOPRED1 C ==> QEtaTopReduction(C, CA1 C, QAB1 C)
QTOPCOMP1 C ==> QEtaComputation(C, CA1 C, QAB1 C, QTOPRED1 C)
QTOPSAMBA1 C ==> QEtaSambaPackage(C, CA1 C, QAB1 C, QTOPCOMP1 C)

QRED1 C ==> QEtaReduction(C, CA1 C, QAB1 C)
QCOMP1 C ==> QEtaComputation(C, CA1 C, QAB1 C, QRED1 C)
QSAMBA1 C ==> QEtaSambaPackage(C, CA1 C, QAB1 C, QCOMP1 C)

-- Now samba in extended form, i.e., with attached part (all cahed powers)
QXAB1 C ==> QEtaAlgebraBasis(C, X1 C)
QXTOPRED1 C ==> QEtaTopReduction(C, X1 C, QXAB1 C)
QXTOPCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QXTOPRED1 C)
QXTOPSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXTOPCOMP1 C)

QXRED1 C ==> QEtaReduction(C, X1 C, QXAB1 C)
QXCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QXRED1 C)
QXSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXCOMP1 C)

QXTOPCOMPDP1 C ==> QEtaComputationDelayedPairs(C, X1 C, QXAB1 C, QXTOPRED1 C)
QXTOPSAMBADP1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXTOPCOMPDP1 C)

QXCOMPDP1 C ==> QEtaComputationDelayedPairs(C, X1 C, QXAB1 C, QXRED1 C)
QXSAMBADP1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXCOMPDP1 C)

-- The following macros yield samba with a zero-reduction test
-- before the reduction with attached part is repeated.
QFXRED1 C ==> QEtaExtendedReduction(C, CA1 C, X1 C, QXAB1 C)
QFXCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QFXRED1 C)
QFXSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QFXCOMP1 C)
-------------------------------------------------------------------
-- related to computation with eta quotients having poles at any cusp
-- Must set:
-- xiord: order of the root of unity
xisym: Symbol := "ξ"::Symbol;
UPxi C ==> UnivariatePolynomial(xisym, C);
SUPZ2SUP(C, x) ==> map(coerce, x)$SparseUnivariatePolynomialFunctions2(Z, C)
SUP2UP(C, x) ==> unmakeSUP(SUPZ2SUP(C, x))$UPxi(C)

-- minimal polynomial for n-th root of unity
MINROOTPOL(C, n) ==> SUP2UP(C, cyclotomic(n)$CyclotomicPolynomialPackage)
-- If xiord = 1 or 2 then set xi==>1 or xi==>-1 respectively and,
-- furthermore, CX ==> C.
-- Extension of C with n-th root of unity
UnityRootExtension(C, n) ==> _
    SimpleAlgebraicExtension(C, UPxi C, MINROOTPOL(C, n));

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi) ==> (_
    if xiord < 3 then (CX := Q; xi := -(1$CX)) else _
        (CX := UnityRootExtension(C, xiord); xi := generator()$CX))
-------------------------------------------------------------------
-- TODO: The following macros must be made more parametrized.
-- Problem is that we need C, xiord, and xi, spitzen.
YETAQ ==> SymbolicEtaQuotient
YETAQG ==> SymbolicEtaQuotientGamma
YMSETAQ ==> SymbolicModularSiftedEtaQuotient
YMSETAQG ==> SymbolicModularSiftedEtaQuotientGamma
ETAQG(C, CX) ==> EtaQuotientGamma(C, xiord, CX, xi, L1 CX);
METAQ(C, CX) ==> ModularEtaQuotient(C, xiord, CX, xi, L1 CX)
SETAQG(C, CX) ==> SiftedEtaQuotientGamma(C, xiord, CX, xi, L1 CX)
MSETAQ(C, CX) ==> ModularSiftedEtaQuotient(C, xiord, CX, xi, L1 CX)
MODFUNX CX ==> ModularFunctionExpansionsAtCusps(CX, L1 CX, spitzen)
An CX ==> MODFUNX CX
MEQtoAn x ==> expansions(x)::An(CX)
CAn CX ==> QEtaAlgebraCachedPower(CX, An CX) -- domain in cached version
Xn CX ==> QEtaExtendedAlgebra(CX, CAn CX, CPol CX)
toXn(CX, a, b) ==> embed(a, b::CPol(CX))$Xn(CX)

-- Now powersamba in extended form, i.e., with attached part (all cahed powers)
QXABn C ==> XEtaAlgebraBasis(C, Xn C)
QXREDn C ==> XEtaReduction(C, Xn C, QXABn C)
QXCOMPn C ==> XEtaComputation(C, Xn C, QXABn C, QXREDn C)
QXSAMBAn C ==> XEtaSambaPackage(C, Xn C, QXABn C, QXCOMPn C)


-------------------------------------------------------------------
-- Auxiliary functions
-------------------------------------------------------------------
sigmaInfinity(divs: List P, s: List Z): Z == (_
  #divs ~= #s => error "sigmaInfinity: Lists have different lengths.";_
  shat: Z := 0;_
  for delta in divs for sdelta in s repeat shat := shat + delta * sdelta;_
  shat)
-------------------------------------------------------------------
smallerGrade?(x, y) == qetaGrade x < qetaGrade y
-------------------------------------------------------------------
