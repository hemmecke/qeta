-------------------------------------------------------------------
-- General macros for the compuation with eta-quotions in the QEta package
-------------------------------------------------------------------

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))
vPrint(x,y) ==> display77(hconcat([yof x,yof":=",y::OF]$List(OF)))
  -- print variable assignment in 1D

-------------------------------------------------------------------
N ==> NonNegativeInteger
P ==> PositiveInteger
Z ==> Integer
Q ==> Fraction Z
MZ ==> Matrix Z -- consider only 2x2 matricies
SL2Z ==> MZ -- matrices with determinant = 1

LSym ==> List Symbol

INTF ==> IntegerNumberTheoryFunctions
DIVISORS m ==>  [qcoerce(d)@P for d in divisors(m)$INTF]

SPEC ==> QEtaSpecification
SPECS ==> List SPEC

-- Show the specification as q-Pochhammer symbol or eta-quotient.
printQPOCH spec ==> _
  qEtaQuotient(spec, varPochhammer$QEtaRamanujanKolbergIdentity(Z))
printETA spec ==> _
  etaQuotient(spec, varEta$QEtaRamanujanKolbergIdentity(Z))
printSPEC spec ==> printQPOCH spec = printETA spec


-- rspec := eqSPEC(nn, r)
-- rspec := eqSPEC(divs, r)
-- rspec := geqSPEC([[5,1,-11], [5,2, -1]])
eqSPEC ==> etaQuotientSpecification $ SPEC
geqSPEC ==> generalizedEtaQuotientSpecification $ SPEC
-------------------------------------------------------------------
-- The following macros are parametrized by the coefficient domain C.
-------------------------------------------------------------------
-- related to Gröbner basis computation
-- The domain D (DirectProduct) has to be set to specify the term order.
-- The list of variables have to be given through `syms`.
Pol C  ==> Polynomial C
LPol C  ==> List Pol C

GAMMA0 ==> CongruenceSubgroupGamma0
GAMMA1 ==> CongruenceSubgroupGamma1
QCONDM0 ==> QEtaConditionsModularGamma0
QCONDM1 ==> QEtaConditionsModularGamma1
QETAAUX ==> QEtaAuxiliaryPackage
AUXFUN ==> QEtaAuxiliaryFunctions
CUSPS0 nn ==> cusps()$GAMMA0(nn)
CUSPS1 nn ==> cusps()$GAMMA1(nn)
WIDTH0(nn, c) ==> qcoerce(width(c)$GAMMA0(nn))@P
WIDTH1(nn, c) ==> qcoerce(width(c)$GAMMA1(nn))@P
ORBIT ==> modularOrbit $ QCONDM0

-------------------------------------------------------------------
-- The type of laurent series that we use for expansion.
-- Should be possible to replace this with SparseUnivariateLaurentSeries.
-- However, our series are dense anyway.
-------------------------------------------------------------------
-- related to computation with eta-quotients having poles only at infinity
T1 C  ==> QEtaTaylorSeries C
L1 C  ==> QEtaLaurentSeries C
A1 C ==> Finite0Series C -- actual computation domain
EQI C ==> EtaQuotientInfinity C
CA1 C ==> QEtaAlgebraCachedPower(C, A1 C) -- computation domain (cached)
CPol C ==> QEtaAlgebraCachedPower(C, Pol C) -- computation pols in (cached)
X1 C ==> QEtaExtendedAlgebra(C, CA1 C, CPol C)
toX1(C, a, b) ==> embed(a::CA1(C), b::CPol(C))$X1(C)


-------------------------------------------------------------------
-- Symbolic modular (generalized) eta-quotients
YM0EQ   ==> SymbolicModularGamma0EtaQuotient
YM0EQG  ==> SymbolicModularGamma0EtaQuotientGamma
YM1GEQ  ==> SymbolicModularGamma1GeneralizedEtaQuotient
YM1GEQG ==> SymbolicModularGamma1GeneralizedEtaQuotientGamma

-------------------------------------------------------------------
-- Creation of symbolic eta-quotients
-- We consider the modular group Gamma_0(level spec).
specYM0EQ  ==> etaQuotient $ YM0EQ
specYM0EQG ==> etaQuotient $ YM0EQG
-- We consider the modular group Gamma_1(level spec).
specYM1GEQ  ==> generalizedEtaQuotient $ YM1GEQ
specYM1GEQG ==> generalizedEtaQuotient $ YM1GEQG

-------------------------------------------------------------------
-- Creation of eta-quotient expansions from specifications
-- a1 := modularEtaQuotientInfinity(rspec)
-- a1 := modularEtaQuotientInfinity(sspec,rspec,m,t)
-- a1 := modularEtaQuotientInfinity(nn,rspec,m,t,sidxs)
specEQI C ==> generalizedEtaQuotient $ EQI(C)
specM0A1 C ==> modularEtaQuotientInfinity $ QEtaModularGamma0Infinity(C)
specM1A1 C ==> modularGeneralizedEtaQuotientInfinity $ QEtaModularGamma1Infinity(C)

-------------------------------------------------------------------
-- Creation of symbolic eta-quotients (non-modular)
specYEQ ==> etaQuotient $ YEQ
specYGEQ ==> generalizedEtaQuotient $ YGEQ

-------------------------------------------------------------------
-- Creation of eta-quotient monoid
-- mspecs := etaQuotientMonoidSpecifications nn;
-- mspecs := generalizedEtaQuotientMonoidSpecifications(nn, idxs)
mSPECS0 ==> etaQuotientMonoidSpecifications $ QEtaQuotientSpecifications4ti2
mSPECS1 ==> generalizedEtaQuotientMonoidSpecifications $ QEtaQuotientSpecifications4ti2
ncmSPECS1 ==> nonConstantGeneralizedEtaQuotientMonoidSpecifications $ QEtaQuotientSpecifications4ti2


-------------------------------------------------------------------
-- In which level must we compute?
-- nn := minimalLevelCoEtaQuotientGamma1(rspec, m, t)$QEtaCofactorConditions
minLevel0 ==> minimalLevelCoEtaQuotient $ QCONDM0
minLevel1 ==> minimalLevelCoEtaQuotient $ QCONDM1
candidateLevels0 ==> candidateLevelsCoEtaQuotient $ QCONDM0
candidateLevels1 ==> candidateLevelsCoEtaQuotient $ QCONDM1

-------------------------------------------------------------------
-- What is the cofactor for Gamma0/1?
-- sspec := etacofactorInfinity(nn, rspec, m, t) -- Gamma0
-- sspec := etacofactorInfinity(nn, rspec, m, t, sidxs) -- Gamma1
cofactI0 ==> etaCofactorInfinity $ QEtaModularGamma0Package
cofactI1 ==> etaCofactorInfinity $ QEtaModularGamma1Package

-- ecs := etacofactorSpace0(nn, rspec, m, t) -- Gamma0
-- ecs := etacofactorSpace0(nn, rspec, m, t, sidx) -- Gamma1
-- s := members minimizeVector(ecs.particular, ecs.basis) $ QEtaModularGamma0
cofactSpace0 ==> etaCofactorSpace0 $ QEtaCofactorSpace
cofactSpace1 ==> etaCofactorSpace1 $ QEtaCofactorSpace

-------------------------------------------------------------------
-- Given nn, rsoec, m, t, find an identity.
-- id := findID0(nn, rspec, m, t)
-- id := findID1(nn, sidxs, rspec, m, t, bidxs)
-- qIdentity ==> 1
-- expand ==> 2
-- nonModular ==> 4
-- asExpression ==> 8
-- withSubscript ==> 16
-- pretty(id, qIdentity + expand + nonModular + withSubscript)
findID0 ==> findIdentity $ QEtaRamanujanKolberg(C)
findID1 ==> findIdentity $ QEtaGeneralizedRamanujan(C)



-------------------------------------------------------------------
-- We always use CachedPower versions
QAB1 C ==> QEtaAlgebraBasis(C, CA1 C)
QTOPRED1 C ==> QEtaTopReduction(C, CA1 C, QAB1 C)
QTOPCOMP1 C ==> QEtaComputation(C, CA1 C, QAB1 C, QTOPRED1 C)
QTOPSAMBA1 C ==> QEtaSambaPackage(C, CA1 C, QAB1 C, QTOPCOMP1 C)

QRED1 C ==> QEtaReduction(C, CA1 C, QAB1 C)
QCOMP1 C ==> QEtaComputation(C, CA1 C, QAB1 C, QRED1 C)
QSAMBA1 C ==> QEtaSambaPackage(C, CA1 C, QAB1 C, QCOMP1 C)

-- Now samba in extended form, i.e., with attached part (all cahed powers)
QXAB1 C ==> QEtaAlgebraBasis(C, X1 C)
QXTOPRED1 C ==> QEtaTopReduction(C, X1 C, QXAB1 C)
QXTOPCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QXTOPRED1 C)
QXTOPSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXTOPCOMP1 C)

QXRED1 C ==> QEtaReduction(C, X1 C, QXAB1 C)
QXCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QXRED1 C)
QXSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXCOMP1 C)

QXTOPCOMPDP1 C ==> QEtaComputationDelayedPairs(C, X1 C, QXAB1 C, QXTOPRED1 C)
QXTOPSAMBADP1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXTOPCOMPDP1 C)

QXCOMPDP1 C ==> QEtaComputationDelayedPairs(C, X1 C, QXAB1 C, QXRED1 C)
QXSAMBADP1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXCOMPDP1 C)

-- The following macros yield samba with a zero-reduction test
-- before the reduction with attached part is repeated.
QFXRED1 C ==> QEtaExtendedReduction(C, CA1 C, X1 C, QXAB1 C)
QFXCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QFXRED1 C)
QFXSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QFXCOMP1 C)
-------------------------------------------------------------------
-- related to computation with eta-quotients having poles at any cusp
-- Must set:
-- xiord: order of the root of unity
xisym: Symbol := "ξ"::Symbol;
UPxi C ==> UnivariatePolynomial(xisym, C);
SUPZ2SUP(C, x) ==> map(coerce, x)$SparseUnivariatePolynomialFunctions2(Z, C)
SUP2UP(C, x) ==> unmakeSUP(SUPZ2SUP(C, x))$UPxi(C)

-- minimal polynomial for n-th root of unity
MINROOTPOL(C, n) ==> SUP2UP(C, cyclotomic(n)$CyclotomicPolynomialPackage)
-- If xiord = 1 or 2 then set xi==>1 or xi==>-1 respectively and,
-- furthermore, CX ==> C.
-- Extension of C with n-th root of unity
UnityRootExtension(C, n) ==> _
    SimpleAlgebraicExtension(C, UPxi C, MINROOTPOL(C, n));

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi) ==> (_
    if xiord < 3 then (CX := Q; xi := -(1$CX)) else _
        (CX := UnityRootExtension(C, xiord); xi := generator()$CX))

-------------------------------------------------------------------
-- Auxiliary functions
-------------------------------------------------------------------
smallerGrade?(x, y) == qetaGrade x < qetaGrade y
-------------------------------------------------------------------
