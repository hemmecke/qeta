-------------------------------------------------------------------
-- Define tracing functionality
-------------------------------------------------------------------
HX ==> XHashTable(Z, List X1 C)
-------------------------------------------------------------------
rEnter1(u: X1 C, ab: QXAB1 C): Void == (_
    grdu: Z := qetaGrade u;_
    vPrint("-- -----------------------------------------------red u", grdu);_
    t: X1 C := multiplier ab;_
    n := qetaGrade t - 1;_
    l: List List X1 C := [basis(ab, i) for i in 1..n];_
    gs: List List Z := [[qetaGrade x for x in bs] for bs in l];_
    vPrint("-- red gs", gs))

--    vPrint("-- red bas", l);_

-------------------------------------------------------------------
rLoop1(u: X1 C): Void == (_
    vPrint("-- red loop", qetaGrade u))
-------------------------------------------------------------------
rReturn1(u: X1 C): Void == vPrint("-- redx", first u)
-------------------------------------------------------------------
Y ==> QXTOPCOMP1 C
XX ==> Record(f1: X1 C, f2: X1 C)
Products ==> XHashTable(Z, List XX)
YRep ==> Record(ab: QXAB1 C, cbe: List X1 C, pairs: Products)
yy ==> y pretend YRep
-------------------------------------------------------------------
ytrace1(y: Y): Void == (_
    vPrint("-- ==================================step(#cbe,#pairs)",_
           [#(yy.cbe), #(yy.pairs)]$List(Z));_
    vPrint("-- +++ grades(cbe, pairs)",_
           [[qetaGrade x for x in yy.cbe], sort keys yy.pairs]$List(List Z)))
-------------------------------------------------------------------
onet1Step!(y: Y): Y == (oneTracedStep!$Y)(ytrace1, rEnter1, rLoop1, rReturn1)(y)


-------------------------------------------------------------------
-- Similar functionality by for CA1 C instead of X1 C
-------------------------------------------------------------------
HAF ==> XHashTable(Z, List CA1 C)
-------------------------------------------------------------------
carEnter1(u: CA1 C, ab: QAB1 C): Void == (_
    grdu: Z := qetaGrade u;_
    vPrint("-- -----------------------------------------------red u", grdu);_
    t: CA1 C := multiplier ab;_
    n := qetaGrade t - 1;_
    l: List List CA1 C := [basis(ab, i) for i in 1..n];_
    gs: List List Z := [[qetaGrade x for x in bs] for bs in l];_
    vPrint("-- red gs", gs))

--    vPrint("-- red bas", l);_

-------------------------------------------------------------------
carLoop1(u: CA1 C): Void == (_
    vPrint("-- red loop", qetaGrade u))
-------------------------------------------------------------------
carReturn1(u: CA1 C): Void == vPrint("-- redx", u)
-------------------------------------------------------------------
CAY ==> QTOPCOMP1 C
CAA ==> Record(f1: CA1 C, f2: CA1 C)
CAProducts ==> XHashTable(Z, List CAA)
CAYRep ==> Record(ab: QAB1 C, cbe: List CA1 C, pairs: CAProducts)
cayy ==> y pretend CAYRep
-------------------------------------------------------------------
caytrace1(y: CAY): Void == (_
    vPrint("-- ==================================step(#cbe,#pairs)",_
           [#(cayy.cbe), #(cayy.pairs)]$List(Z));_
    vPrint("-- +++ grades(cbe, pairs)",_
           [[qetaGrade x for x in cayy.cbe], keys cayy.pairs]$List(List Z)))
-------------------------------------------------------------------
caonet1Step!(y: CAY): CAY == _
    (oneTracedStep!$CAY)(caytrace1, carEnter1, carLoop1, carReturn1)(y)
