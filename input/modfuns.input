-- This functions defined in this file assume that the missing values
-- for the macros in qetamacros.input and convenience.input have been set.
-- In particular C, xiord, and CX.

-- expansion of j(n*tau) at cuspOf(gamma)
kleinJ(n: PP, gamma: SL2Z, w: PP): L1 CX ==
  t := splitMatrix(gamma, n).triang
  j := kleinJInvariant()$QFunctions(CX, L1 CX)
  d := t(2,2)
  uq: QQ := t(1,1)*w/d
  vq: QQ := t(1,2)*xiord/d
  not one? denom(uq) => error "kleinJ: denominator of u should vanish"
  not one? denom(vq) => error "kleinJ: denominator of v should vanish"
  v: NN := numer(vq)::NN
  px: QEtaPuiseuxSeries CX := substitute(j, uq, v)$QESXM(C, CX, MOD0)
  laurent(px, 1)$QESXM(C, CX, MOD0)

-- expansion of j(n*tau) at all cusps of Gamma0(nn).
kleinJn(nn: PP, n: NN): An(CX) == (_
  h := table()$XHashTable(Cusp, L1 CX);_
  for cusp in cuspsM0 nn repeat (_
    w := widthM0(nn, cusp);_
    gamma := cuspToMatrix(nn,cusp)$MOD0;_
    h.cusp  := kleinJ(n, gamma, w));_
  h :: An(CX))


-- traceMap(nn, t, r) applies the trace function, see
-- \cite{Kohnen_WeierstrassPointsAtInfinity_2004}, to the modular
-- eta-quotient of M(nn*t) given by the exponent vector r.
-- The result is a modular function in M(nn).
-- Input condition: #r = #DIVISORS(nn*t), gcd(nn, t)=1.
traceMap(nn: PP, t: PP, r: List ZZ): A1 C ==
  #r ~= numberOfDivisors(nn*t)$IntegerNumberTheoryFunctions =>
    error "length of r must match number of divisors)"
  idgamma: SL2Z := matrix [[1,0],[0,1]]
  rspec: SPEC := eqSPEC(nn*t, r)
  ye := etaQuotient(rspec, idgamma)$YEQG
  p := puiseuxExpansion(ye)$QEtaSeriesExpansion(C, 1, C, 1, MOD0)
  e := laurent(p, 1)$QEtaSeriesExpansion(C, 1, C, 1, MOD0)
  alw: Matrix ZZ := matrixAtkinLehner(nn*t, t)
  sm := splitMatrix(alw(1,1), alw(1,2), alw(2,1), alw(2,2))
  gamma := sm.red
  yeg := etaQuotient(rspec, gamma)$YEQG
  -- Check that there is no need for an extension by a root of unity
  xiord := minimalRootOfUnity yeg;
  xiord > 2 =>
    print("minimalRootOfUnity yeg"::Symbol::OutputForm)
    print((minimalRootOfUnity yeg)::OutputForm)
    error "traceMap: need extension by root of unity"
  pg := puiseuxExpansion(yeg)$QEtaSeriesExpansion(C, 2, C, -1, MOD0)
  eg := laurent(pg, t)$QEtaSeriesExpansion(C, 2, C, -1, MOD0)
  -- finally apply Ut operator
  uteg := choose(t, 0, eg)
  -- and add things up
  (e + t*uteg)::A1(C)
