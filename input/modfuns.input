-- This functions defined in this file assume that the missing values
-- for the macros in etamacros.input and convenience.input have been set.
-- In particular C, xiord, and CX.

-- expansion of j(n*tau) at cusp gamma(1,1)/gamma(2,1).
kleinJ(n: P, gamma: SL2Z, w: P): L1 CX ==
  t := splitMatrix(gamma, n).triang
  j := kleinJInvariant()$QFunctions(CX, L1 CX)
  d := t(2,2)
  uq: Q := t(1,1)*w/d
  vq: Q := t(1,2)*xiord/d
  not one? denom(uq) => error "kleinJ: denominator of u should vanish"
  not one? denom(vq) => error "kleinJ: denominator of v should vanish"
  v: N := numer(vq)::N
  px: QEtaPuiseuxSeries CX := substitute(j, uq, v)$QESX(C, CX)
  laurent(px, 1)$QESX(C, CX)

-- expansion of j(n*tau) at all cusps of Gamma0(nn).
kleinJn(nn: P, n: N): An(CX) == (_
  h := table()$XHashTable(Cusp, L1 CX);_
  for cusp in cusps(nn)$GAMMA0 repeat (_
    w := WIDTH0(nn, cusp);_
    gamma := cuspToMatrix(nn, cusp)$GAMMA0;_
    h.cusp  := kleinJ(n, gamma, w));_
  h :: An(CX))


-- traceMap(nn, t, r) applies the trace function, see
-- \cite{Kohnen:WeierstrassPointsAtInfinity:2004}, to the modular
-- eta-quotient of M(nn*t) given by the exponent vector r.
-- The result is a modular function in M(nn).
-- Input condition: #r = #DIVISORS(nn*t), gcd(nn, t)=1.
traceMap(nn: P, t: P, r: List Z): A1 C ==
  #r ~= numberOfDivisors(nn*t)$INTF =>
    error "length of r must match number of divisors)"
  idgamma: SL2Z := matrix [[1,0],[0,1]]
  ye := etaQuotient(nn*t, r, idgamma)$YEQG
  e := laurentExpansion(ye, 1)$QEtaLaurentExpansion(C, 1, C, 1)
  alw: MZ := matrixAtkinLehner(nn*t, t)
  sm := splitMatrix(alw(1,1), alw(1,2), alw(2,1), alw(2,2))
  gamma := sm.red
  yeg := etaQuotient(nn*t, r, gamma)$YEQG
  -- Check that there is no need for an extension by a root of unity
  xiord := minimalRootOfUnity yeg;
  xiord > 2 =>
    print("minimalRootOfUnity yeg"::Symbol::OutputForm)
    print((minimalRootOfUnity yeg)::OutputForm)
    error "traceMap: need extension by root of unity"
  eg := laurentExpansion(yeg, t)$QEtaLaurentExpansion(C, 2, C, -1)
  -- finally apply Ut operator
  uteg := choose(t, 0, eg)
  -- and add things up
  (e + t*uteg)::A1(C)
