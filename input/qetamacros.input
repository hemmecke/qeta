-------------------------------------------------------------------
-- General macros for the compuation with eta-quotions in the QEta package
-------------------------------------------------------------------

OF==>OutputForm
display77(x) ==> display((x::OF)::Formatter(Format1D))
yof x ==> x :: Symbol :: OF
dbgPrint(x,y) ==> display77([yof ":> ", yof x, y::OF]$List(OF))
tracePrint(x,y) ==> display77(hconcat([yof"-- ",yof x,yof":=",y::OF]$List(OF)))
vPrint(x,y) ==> display77(hconcat([yof x,yof":=",y::OF]$List(OF)))
  -- print variable assignment in 1D

-------------------------------------------------------------------
NN ==> NonNegativeInteger
PP ==> PositiveInteger
ZZ ==> Integer
QQ ==> Fraction ZZ
SL2Z ==> Matrix ZZ -- 2x2 matricies with determinant = 1

SPEC ==> QEtaSpecification
SPECS ==> List SPEC

-- Show the specification as q-Pochhammer symbol or eta-quotient.
printQPOCH spec ==> _
  qEtaQuotient(spec, varPochhammer$QEtaRamanujanKolbergIdentity(ZZ))
printETA spec ==> _
  etaQuotient(spec, varEta$QEtaRamanujanKolbergIdentity(ZZ))
printSPEC spec ==> printQPOCH spec = printETA spec

-- rspec := eqSPEC(nn, r)
-- rspec := eqSPEC(divs, r)
-- rspec := eqSPEC([[5,1,-11], [5,2, -1]])
eqSPEC ==> etaQuotientSpecification $ SPEC

-------------------------------------------------------------------
-- The following macros are parametrized by the coefficient domain C.
-------------------------------------------------------------------
-- related to Gröbner basis computation
-- The domain D (DirectProduct) has to be set to specify the term order.
-- The list of variables have to be given through `syms`.
Pol C  ==> Polynomial C
LPol C  ==> List Pol C

GAMMA0 ==> CongruenceSubgroupGamma0
GAMMA1 ==> CongruenceSubgroupGamma1
MOD0 ==> QEtaConditionsModularGamma0
MOD1 ==> QEtaConditionsModularGamma1
QETAAUX ==> QEtaAuxiliaryPackage
AUXFUN ==> QEtaAuxiliaryFunctions

-- cusps(nn)$MOD
-- cusps(nn)$MOD0 = cusps()$GAMMA0
-- cusps(nn)$MOD1 = cusps()$GAMMA1
cuspsMOD ==> cusps $ MOD
cuspsM0  ==> cusps $ MOD0
cuspsM1  ==> cusps $ MOD1

-- width(nn, gamma)$MOD
-- width(nn, cusp)$MOD
-- width(nn, cusp)$MOD0 = width(cusp)$GAMMA0
-- width(nn, cusp)$MOD1 = width(cusp)$GAMMA1
widthMOD ==> width $ MOD
widthM0  ==> width $ MOD0
widthM1  ==> width $ MOD1

-------------------------------------------------------------------
-- The type of laurent series that we use for expansion.
-- Should be possible to replace this with SparseUnivariateLaurentSeries.
-- However, our series are dense anyway.
-------------------------------------------------------------------
-- related to computation with eta-quotients having poles only at infinity
T1 C  ==> QEtaTaylorSeries C
L1 C  ==> QEtaLaurentSeries C
A1 C ==> Finite0Series C -- actual computation domain
EQI C ==> EtaQuotientInfinity C
CA1 C ==> QEtaAlgebraCachedPower(C, A1 C) -- computation domain (cached)
CPol C ==> QEtaAlgebraCachedPower(C, Pol C) -- computation pols in (cached)
X1 C ==> QEtaExtendedAlgebra(C, CA1 C, CPol C)
toX1(C, a, b) ==> embed(a::CA1(C), b::CPol(C))$X1(C)


-------------------------------------------------------------------
-- Symbolic modular (generalized) eta-quotients
YMEQ  ==> SymbolicModularEtaQuotient
YMEQG ==> SymbolicModularEtaQuotientGamma
-- implicitly using the MOD parameter
YMODEQ  ==> YMEQ MOD
YMODEQG ==> YMEQG MOD

-------------------------------------------------------------------
-- Creation of symbolic eta-quotients for one transformation matrix
-- y := etaQuotient(sspec,rspec,m,t,gamma)
-- y := etaQuotient(rspec,gamma)
-- y := etaQuotient(rspec)
specYMEQG MOD ==> etaQuotient $ YMEQG(MOD)
-- implicitly using the MOD parameter
specYMODEQG ==> specYMEQG MOD
specYM0EQG  ==> specYMEQG MOD0
specYM1EQG  ==> specYMEQG MOD1

-- Creation of symbolic eta-quotients for several cusps
-- y := etaQuotient(sspec,rspec,m,t,spitzen)
-- y := etaQuotient(sspec,rspec,m,t)
-- y := etaQuotient(rspec,spitzen)
-- y := etaQuotient(rspec)
specYMEQ MOD ==> etaQuotient $ YMEQ(MOD)
-- implicitly using the MOD parameter
specYMODEQ ==> specYMEQ MOD
specYM0EQ  ==> specYMEQ MOD0
specYM1EQ  ==> specYMEQ MOD1

-------------------------------------------------------------------
-- Creation of eta-quotient expansions from specifications
-- a1 := modularEtaQuotientInfinity(rspec)
-- a1 := modularEtaQuotientInfinity(sspec,rspec,m,t)
specEQI C ==> etaQuotientInfinity $ EQI(C)
specMA1(C,MOD) ==> modularEtaQuotientInfinity $ QEtaModularInfinity(C, MOD)
-- implicitly using the MOD parameter
specMODA1 C ==> specMA1(C, MOD)
specM0A1 C  ==> specMA1(C, MOD0)
specM1A1 C  ==> specMA1(C, MOD1)

-------------------------------------------------------------------
-- Creation of symbolic eta-quotients (non-modular)
-- y1 := etaQuotient(spec,m,t,gamma)
-- y1 := etaQuotient(spec,gamma)
-- y1 := etaQuotient(spec) -- for gamma=id
specYEQG ==> etaQuotient $ YEQG

-------------------------------------------------------------------
-- Creation of eta-quotient monoid
-- mspecs := etaQuotientMonoidInfinitySpecifications(nn, idxs)
-- mspecs := nonConstantEtaQuotientMonoidInfinitySpecifications(nn, idxs)
mSPECSInf MOD ==> etaQuotientMonoidInfinitySpecifications _
                    $ QEtaQuotientSpecifications4ti2(MOD)
-- implicitly using the MOD parameter
mSPECSInfMOD ==> mSPECSInf MOD
mSPECSInfM0 ==> mSPECSInf MOD0
mSPECSInfM1 ==> mSPECSInf MOD1

ncmSPECSInf MOD ==> nonConstantEtaQuotientMonoidInfinitySpecifications _
                      $ QEtaQuotientSpecifications4ti2(MOD)
-- implicitly using the MOD parameter
ncmSPECSInfMOD ==> ncmSPECSInf MOD
ncmSPECSInfM0 ==> ncmSPECSInf MOD0
ncmSPECSInfM1 ==> ncmSPECSInf MOD1

-------------------------------------------------------------------
-- In which level must we compute?
-- nn := minimalLevelCoEtaQuotient(rspec, m, t)$MOD
minLevel MOD ==> minimalLevelCoEtaQuotient $ MOD
minLevelMOD ==> minLevel MOD
minLevelM0  ==> minLevel MOD0
minLevelM1  ==> minLevel MOD1

-------------------------------------------------------------------
-- What is the cofactor for Gamma0/1?
-- sspec := etacofactorInfinity(nn, rspec, m, t, sidxs)
cofactInf MOD ==> etaCofactorInfinity $ QEtaModularGammaPackage(MOD)
cofactInfMOD ==> cofactInf MOD
cofactInfM0  ==> cofactInf MOD0
cofactInfM1  ==> cofactInf MOD1

-------------------------------------------------------------------
-- Given nn, rsoec, m, t, find an identity.
-- id := findIdM1(nn, sidxs, rspec, m, t, bidxs)
-- qIdentity ==> 1
-- expand ==> 2
-- nonModular ==> 4
-- asExpression ==> 8
-- withSubscript ==> 16
-- pretty(id, qIdentity + expand + nonModular + withSubscript)
findId MOD ==> findIdentity $ QEtaRamanujanKolberg(C, MOD)
findIdMOD ==> findId MOD
findIdM0  ==> findId MOD0
findIdM1  ==> findId MOD1

-------------------------------------------------------------------
-- We always use CachedPower versions
QAB1 C ==> QEtaAlgebraBasis(C, CA1 C)
QTOPRED1 C ==> QEtaTopReduction(C, CA1 C, QAB1 C)
QTOPCOMP1 C ==> QEtaComputation(C, CA1 C, QAB1 C, QTOPRED1 C)
QTOPSAMBA1 C ==> QEtaSambaPackage(C, CA1 C, QAB1 C, QTOPCOMP1 C)

QRED1 C ==> QEtaReduction(C, CA1 C, QAB1 C)
QCOMP1 C ==> QEtaComputation(C, CA1 C, QAB1 C, QRED1 C)
QSAMBA1 C ==> QEtaSambaPackage(C, CA1 C, QAB1 C, QCOMP1 C)

-- Now samba in extended form, i.e., with attached part (all cahed powers)
QXAB1 C ==> QEtaAlgebraBasis(C, X1 C)
QXTOPRED1 C ==> QEtaTopReduction(C, X1 C, QXAB1 C)
QXTOPCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QXTOPRED1 C)
QXTOPSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXTOPCOMP1 C)

QXRED1 C ==> QEtaReduction(C, X1 C, QXAB1 C)
QXCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QXRED1 C)
QXSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXCOMP1 C)

QXTOPCOMPDP1 C ==> QEtaComputationDelayedPairs(C, X1 C, QXAB1 C, QXTOPRED1 C)
QXTOPSAMBADP1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXTOPCOMPDP1 C)

QXCOMPDP1 C ==> QEtaComputationDelayedPairs(C, X1 C, QXAB1 C, QXRED1 C)
QXSAMBADP1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QXCOMPDP1 C)

-- The following macros yield samba with a zero-reduction test
-- before the reduction with attached part is repeated.
QFXRED1 C ==> QEtaExtendedReduction(C, CA1 C, X1 C, QXAB1 C)
QFXCOMP1 C ==> QEtaComputation(C, X1 C, QXAB1 C, QFXRED1 C)
QFXSAMBA1 C ==> QEtaSambaPackage(C, X1 C, QXAB1 C, QFXCOMP1 C)
-------------------------------------------------------------------
-- related to computation with eta-quotients having poles at any cusp
-- Must set:
-- xiord: order of the root of unity
xisym: Symbol := "ξ"::Symbol;
UPxi C ==> UnivariatePolynomial(xisym, C);
SUPZ2SUP(C, x) ==> map(coerce, x)$SparseUnivariatePolynomialFunctions2(ZZ, C)
SUP2UP(C, x) ==> unmakeSUP(SUPZ2SUP(C, x))$UPxi(C)

-- minimal polynomial for n-th root of unity
MINROOTPOL(C, n) ==> SUP2UP(C, cyclotomic(n)$CyclotomicPolynomialPackage)
-- If xiord = 1 or 2 then set xi==>1 or xi==>-1 respectively and,
-- furthermore, CX ==> C.
-- Extension of C with n-th root of unity
UnityRootExtension(C, n) ==> _
    SimpleAlgebraicExtension(C, UPxi C, MINROOTPOL(C, n));

EXTENDEDCOEFFICIENTRING(C, xiord, CX, xi) ==> (_
    if xiord < 3 then (CX := QQ; xi := -(1$CX)) else _
        (CX := UnityRootExtension(C, xiord); xi := generator()$CX))

-------------------------------------------------------------------
-- Auxiliary functions
-------------------------------------------------------------------
smallerGrade?(x, y) == qetaGrade x < qetaGrade y
-------------------------------------------------------------------
