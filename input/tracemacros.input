-------------------------------------------------------------------
-- Define tracing functionality
-------------------------------------------------------------------
HX ==> XHashTable(Z, List X)
-------------------------------------------------------------------
rEnter(u: X, ab: QXAB1 C): Void == (_
    grdu: Z := qetaGrade u;_
    vPrint("-- -----------------------------------------------red u", grdu);_
    t: X := multiplier ab;_
    n := qetaGrade t - 1;_
    l: List List X := [basis(ab, i) for i in 1..n];_
    gs: List List Z := [[qetaGrade x for x in bs] for bs in l];_
    vPrint("-- red gs", gs))

--    vPrint("-- red bas", l);_

-------------------------------------------------------------------
rLoop(u: X): Void == (_
    vPrint("-- red loop", qetaGrade u))
-------------------------------------------------------------------
rReturn(u: X): Void == vPrint("-- redx", first u)
-------------------------------------------------------------------
Y ==> QXCOMP1 C
XX ==> Record(f1: X, f2: X)
Products ==> XHashTable(Z, List XX)
YRep ==> Record(ab: QXAB1 C, cbe: List X, pairs: Products)
yy ==> y pretend YRep
-------------------------------------------------------------------
ytrace(y: Y): Void == (_
    vPrint("-- ==================================step(#cbe,#pairs)",_
           [#(yy.cbe), #(yy.pairs)]$List(Z)))
-------------------------------------------------------------------
onet1Step!(y: Y): Y == (oneTracedStep!$Y)(ytrace, rEnter, rLoop, rReturn)(y)


-------------------------------------------------------------------
-- Similar functionality by for CF instead of X
-------------------------------------------------------------------
HCF ==> XHashTable(Z, List CF)
-------------------------------------------------------------------
cfrEnter(u: CF, ab: QAB1 C): Void == (_
    grdu: Z := qetaGrade u;_
    vPrint("-- -----------------------------------------------red u", grdu);_
    t: CF := multiplier ab;_
    n := qetaGrade t - 1;_
    l: List List CF := [basis(ab, i) for i in 1..n];_
    gs: List List Z := [[qetaGrade x for x in bs] for bs in l];_
    vPrint("-- red gs", gs))

--    vPrint("-- red bas", l);_

-------------------------------------------------------------------
cfrLoop(u: CF): Void == (_
    vPrint("-- red loop", qetaGrade u))
-------------------------------------------------------------------
cfrReturn(u: CF): Void == vPrint("-- redx", u)
-------------------------------------------------------------------
CFY ==> QCOMP1 C
CFF ==> Record(f1: CF, f2: CF)
CFProducts ==> XHashTable(Z, List CFF)
CFYRep ==> Record(ab: QAB1 C, cbe: List CF, pairs: CFProducts)
cfyy ==> y pretend CFYRep
-------------------------------------------------------------------
cfytrace(y: CFY): Void == (_
    vPrint("-- ==================================step(#cbe,#pairs)",_
           [#(cfyy.cbe), #(cfyy.pairs)]$List(Z)))
-------------------------------------------------------------------
cfonet1Step!(y: CFY): CFY == _
    (oneTracedStep!$CFY)(cfytrace, cfrEnter, cfrLoop, cfrReturn)(y)
