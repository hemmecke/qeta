)cd /home/hemmecke/g/qeta/tmp
)set mess time off
)r etacompute

C ==> Q
VZ ==> Vector Z
VQ ==> Vector Q
MZ ==> Matrix Z

)set mess type off
)set mess time off
)read convenience.input )quiet

)set mess type on
)set mess time on
)set stream calc 2

-- The variables coefs, lvl, wgth, dimM, ncoefs are assumed to be set
-- already.

level := lvl;
divs := DIVISORS level;
esyms := indexedSymbols("E", divs);
spitzen := cusps(level)$GAMMA0;
dimM := dimensionOfModularForms(level, wght)$GAMMA0;
dim := #divs;
vdivs := vector(divs)$VZ;
grdsrt(x1: VZ, x2: VZ): Boolean == dot(vdivs,x1)$VZ < dot(vdivs,x2)$VZ

equalSeries?(f1: A1 C, f2: A1 C): Boolean ==
    fd := f1 - f2
    removeDuplicates [coefficient(fd, i) for i in 0..999] ~= [0] =>
        dbgPrint("difference is not zero", [level, wght])
        false
    true

computation(): Boolean ==
    ff := (laurent(0, coefs :: Stream(C))$L1(C))::A1(C)
    idivs := [i for i in 1..#divs]
    rhs := concat([0 for i in idivs], 2*wght)
    zmodform := zsolve4ti2(level, idivs, rhs)$QEQEV
    zmodformzi := [members x(1..#divs) for x in zmodform.zinhom]
    zero?(#zmodformzi) =>
        dbgPrint("no eta-quotients of (level, weight)", [level, wght])
        false
    vmodformgens := sort(grdsrt, [vector x for x in zmodformzi])
    rmodformgens := [members x for x in vmodformgens]
    emodformgens := [EQA1C r for r in rmodformgens]
    rnk := 0
    for rhxi in 0..20 while rnk < dimM repeat
        ncoefs := dimM + rhxi
        cmodformgens := [[coefficient(x, i) for i in 0..ncoefs]
                          for x in emodformgens]
        rnk := rank matrix cmodformgens
        dbgPrint("[ncoefs, rnk, dimM]", [ncoefs, rnk, dimM])
    if rnk < dim then
        dbgPrint("WARNING: rank smaller than dimension",
                 [ncoefs, #rmodformgens, rnk, dimM])
    matmodforms: MZ := transpose matrix cmodformgens
    vf := vector [coefficient(ff, i)::Z for i in 0..ncoefs]
    rels: VZ := new(nrows matmodforms, 0)
    zmodforms := zsolve(matmodforms, rels, vf)$X4ti2
    zmodformszi := zmodforms.zinhom
    mons := [monRZ x for x in rmodformgens]
    vPrint("divs", divs)
    if zero?(#zmodformszi) then
        vPrint("holomorphicRelationWithIntegerCoefficients", false)
      else
        sv := (first zmodformszi)::VQ -- solution vector
        fz := reduce(_+, [sv.i * emodformgens.i for i in 1..#sv])
        not equalSeries?(fz, ff) => return false
        fzpol := reduce(_+, [sv.i * mons.i for i in 1..#sv])
        vPrint("holomorphicRelationWithIntegerCoefficients", true)
        vPrint("fzpol", fzpol)
        vPrint("lzpol", rez fzpol)
    sol := solve(matmodforms, vf)
    if sol.particular case "failed" then
        vPrint("holomorphicRelationWithRationalCoefficients", false)
      else
        sv := sol.particular -- solution vector
        fz := reduce(_+, [sv.i * emodformgens.i for i in 1..#sv])
        not equalSeries?(fz, ff) => return false
        fzpol := reduce(_+, [sv.i * mons.i for i in 1..#sv])
        vPrint("holomorphicRelationWithRationalCoefficients", true)
        vPrint("fqpol", fzpol)
        vPrint("lqpol", rez fzpol)
    true

vPrint("SUCCESS", computation());
